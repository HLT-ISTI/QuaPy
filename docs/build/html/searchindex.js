Search.setIndex({"docnames": ["index", "modules", "quapy", "quapy.classification", "quapy.data", "quapy.method"], "filenames": ["index.rst", "modules.rst", "quapy.rst", "quapy.classification.rst", "quapy.data.rst", "quapy.method.rst"], "titles": ["Welcome to QuaPy\u2019s documentation!", "quapy", "quapy package", "quapy.classification package", "quapy.data package", "quapy.method package"], "terms": {"i": [0, 2, 3, 4, 5], "python": [0, 4], "base": [0, 1, 2, 3], "open": [0, 2, 4], "sourc": [0, 2, 3, 4, 5], "framework": [0, 5], "quantif": [0, 2, 3, 4, 5], "thi": [0, 2, 3, 4, 5], "contain": [0, 2, 3, 4, 5], "api": 0, "modul": [0, 1], "includ": [0, 4, 5], "pip": [0, 5], "host": 0, "http": [0, 2, 4, 5], "com": [0, 2], "hlt": 0, "isti": 0, "packag": [0, 1], "subpackag": [0, 1], "classif": [0, 1, 2, 4, 5], "submodul": [0, 1], "calibr": [0, 1, 2], "bctscalibr": [0, 2, 3], "nbvscalibr": [0, 2, 3], "recalibratedprobabilisticclassifi": [0, 2, 3], "recalibratedprobabilisticclassifierbas": [0, 2, 3], "classes_": [0, 2, 3, 4, 5], "fit": [0, 1, 2, 3, 4, 5], "fit_cv": [0, 2, 3], "fit_tr_val": [0, 2, 3], "predict": [0, 1, 2, 3, 5], "predict_proba": [0, 2, 3, 5], "tscalibr": [0, 2, 3], "vscalibr": [0, 2, 3], "method": [0, 1, 2], "lowranklogisticregress": [0, 2, 3], "get_param": [0, 1, 2, 3, 5], "set_param": [0, 1, 2, 3, 5], "transform": [0, 2, 3, 4, 5], "neural": [0, 1, 2, 4, 5], "cnnnet": [0, 2, 3, 5], "document_embed": [0, 2, 3], "train": [0, 2, 3, 4, 5], "vocabulary_s": [0, 2, 3, 4, 5], "lstmnet": [0, 2, 3], "neuralclassifiertrain": [0, 2, 3, 5], "devic": [0, 2, 3, 5], "reset_net_param": [0, 2, 3], "textclassifiernet": [0, 2, 3], "dimens": [0, 2, 3, 4, 5], "forward": [0, 2, 3, 5], "xavier_uniform": [0, 2, 3], "torchdataset": [0, 2, 3], "asdataload": [0, 2, 3], "svmperf": [0, 1, 2, 5], "decision_funct": [0, 2, 3, 5], "valid_loss": [0, 2, 3, 5], "data": [0, 1, 2, 3, 5], "dataset": [0, 1, 2, 3, 5], "splitstratifi": [0, 2, 4], "binari": [0, 2, 3, 4, 5], "kfcv": [0, 2, 3, 4], "load": [0, 2, 4, 5], "n_class": [0, 2, 3, 4, 5], "reduc": [0, 2, 4], "stat": [0, 2, 4], "train_test": [0, 2, 4], "labelledcollect": [0, 2, 4, 5], "x": [0, 2, 3, 4, 5], "xp": [0, 2, 4], "xy": [0, 2, 4], "count": [0, 2, 4, 5], "join": [0, 2, 4], "p": [0, 2, 3, 4, 5], "preval": [0, 2, 3, 4, 5], "sampl": [0, 1, 2, 3, 4, 5], "sampling_from_index": [0, 2, 4], "sampling_index": [0, 2, 4], "split_random": [0, 2, 4], "split_stratifi": [0, 2, 4], "uniform_sampl": [0, 2, 4], "uniform_sampling_index": [0, 2, 4], "y": [0, 2, 3, 4, 5], "fetch_ifcb": [0, 2, 4], "fetch_ucibinarydataset": [0, 2, 4], "fetch_ucibinarylabelledcollect": [0, 2, 4], "fetch_ucimulticlassdataset": [0, 2, 4], "fetch_ucimulticlasslabelledcollect": [0, 2, 4], "fetch_lequa2022": [0, 2, 4], "fetch_review": [0, 2, 4, 5], "fetch_twitt": [0, 2, 4], "warn": [0, 2, 4, 5], "preprocess": [0, 1, 2, 5], "indextransform": [0, 2, 4], "add_word": [0, 2, 4], "fit_transform": [0, 2, 4], "index": [0, 2, 3, 4, 5], "reduce_column": [0, 2, 4], "standard": [0, 2, 3, 4, 5], "text2tfidf": [0, 2, 4], "reader": [0, 1, 2], "binar": [0, 2, 4], "from_csv": [0, 2, 4], "from_spars": [0, 2, 4], "from_text": [0, 2, 4], "reindex_label": [0, 2, 4], "aggreg": [0, 1, 2], "acc": [0, 1, 2, 5], "clip": [0, 2, 5], "solver": [0, 2, 5], "aggregation_fit": [0, 2, 5], "getptecondestim": [0, 2, 5], "newinvariantratioestim": [0, 2, 5], "adjustedclassifyandcount": [0, 2, 5], "aggregativecrispquantifi": [0, 2, 5], "aggregativemedianestim": [0, 2, 5], "quantifi": [0, 1, 2, 4, 5], "aggregativequantifi": [0, 2, 5], "classifi": [0, 2, 3, 5], "classifier_fit_predict": [0, 2, 5], "val_split": [0, 2, 3, 5], "val_split_": [0, 2, 5], "aggregativesoftquantifi": [0, 2, 5], "bayesiancc": [0, 2, 5], "get_conditional_probability_sampl": [0, 2, 5], "get_prevalence_sampl": [0, 2, 5], "sample_from_posterior": [0, 2, 5], "binaryaggregativequantifi": [0, 2, 5], "neg_label": [0, 2, 5], "pos_label": [0, 2, 5], "cc": [0, 2, 5], "classifyandcount": [0, 2, 5], "dmy": [0, 2, 5], "distributionmatchingi": [0, 2, 5], "dy": [0, 2, 5], "emq": [0, 2, 5], "em": [0, 2, 5], "emq_bct": [0, 2, 5], "epsilon": [0, 2, 5], "max_it": [0, 2, 5], "expectationmaximizationquantifi": [0, 2, 5], "hdy": [0, 2, 5], "hellingerdistancei": [0, 2, 5], "onevsallaggreg": [0, 2, 5], "pacc": [0, 2, 5], "pcc": [0, 2, 5], "probabilisticadjustedclassifyandcount": [0, 2, 5], "probabilisticclassifyandcount": [0, 2, 5], "sld": [0, 2, 5], "smm": [0, 2, 5], "newelm": [0, 2, 5], "newsvma": [0, 2, 5], "newsvmkld": [0, 2, 5], "newsvmq": [0, 2, 5], "newsvmra": [0, 2, 5], "kdebas": [0, 2, 5], "bandwidth_method": [0, 2, 5], "get_kde_funct": [0, 2, 5], "get_mixture_compon": [0, 2, 5], "pdf": [0, 2, 5], "kdeyc": [0, 2, 5], "gram_matrix_mix_sum": [0, 2, 5], "kdeyhd": [0, 2, 5], "kdeyml": [0, 2, 5], "quanetmodul": [0, 2, 5], "quanettrain": [0, 2, 5], "clean_checkpoint": [0, 2, 5], "clean_checkpoint_dir": [0, 2, 5], "mae_loss": [0, 2, 5], "max": [0, 2, 5], "condit": [0, 2, 5], "m": [0, 2, 5], "ms2": [0, 2, 5], "discard": [0, 2, 5], "t50": [0, 2, 5], "thresholdoptim": [0, 2, 5], "aggregate_with_threshold": [0, 2, 5], "basequantifi": [0, 2, 5], "binaryquantifi": [0, 2, 5], "onevsal": [0, 2, 5], "onevsallgener": [0, 2, 5], "newonevsal": [0, 2, 5], "meta": [0, 1, 2], "eacc": [0, 2, 5], "ecc": [0, 2, 5], "eemq": [0, 2, 5], "ehdi": [0, 2, 5], "epacc": [0, 2, 5], "ensembl": [0, 2, 4, 5], "valid_polici": [0, 2, 5], "probabilist": [0, 2, 3, 5], "medianestim": [0, 2, 5], "medianestimator2": [0, 2, 5], "ensemblefactori": [0, 2, 5], "get_probability_distribut": [0, 2, 5], "non_aggreg": [0, 1, 2], "dmx": [0, 2, 5], "hdx": [0, 2, 5], "distributionmatchingx": [0, 2, 5], "maximumlikelihoodprevalenceestim": [0, 2, 5], "readm": [0, 2, 5], "std_constrained_linear_l": [0, 2, 5], "error": [0, 1, 3, 5], "absolute_error": [0, 1, 2], "acc_error": [0, 1, 2], "ae": [0, 1, 2], "f1_error": [0, 1, 2], "f1e": [0, 1, 2], "from_nam": [0, 1, 2], "kld": [0, 1, 2, 3, 5], "mae": [0, 1, 2, 3, 5], "mean_absolute_error": [0, 1, 2], "mean_normalized_absolute_error": [0, 1, 2], "mean_normalized_relative_absolute_error": [0, 1, 2], "mean_relative_absolute_error": [0, 1, 2], "mkld": [0, 1, 2, 5], "mnae": [0, 1, 2, 5], "mnkld": [0, 1, 2, 5], "mnrae": [0, 1, 2, 5], "mrae": [0, 1, 2, 3, 5], "mse": [0, 1, 2, 5], "nae": [0, 1, 2], "nkld": [0, 1, 2, 3, 5], "normalized_absolute_error": [0, 1, 2], "normalized_relative_absolute_error": [0, 1, 2], "nrae": [0, 1, 2], "rae": [0, 1, 2], "relative_absolute_error": [0, 1, 2], "se": [0, 1, 2], "smooth": [0, 1, 2], "evalu": [0, 1, 3, 4, 5], "evaluate_on_sampl": [0, 1, 2], "evaluation_report": [0, 1, 2], "function": [0, 1, 3, 4, 5], "hellingerdist": [0, 1, 2], "topsoedist": [0, 1, 2], "adjusted_quantif": [0, 1, 2], "argmin_preval": [0, 1, 2], "as_binary_preval": [0, 1, 2], "check_prevalence_vector": [0, 1, 2], "clip_preval": [0, 1, 2], "counts_from_label": [0, 1, 2], "get_diverg": [0, 1, 2], "get_nprevpoints_approxim": [0, 1, 2], "linear_search": [0, 1, 2], "map_onto_probability_simplex": [0, 1, 2], "normalize_preval": [0, 1, 2], "num_prevalence_combin": [0, 1, 2], "optim_minim": [0, 1, 2, 5], "prevalence_from_label": [0, 1, 2], "prevalence_from_prob": [0, 1, 2], "prevalence_linspac": [0, 1, 2], "solve_adjust": [0, 1, 2], "strprev": [0, 1, 2], "uniform_prevalence_sampl": [0, 1, 2], "uniform_simplex_sampl": [0, 1, 2], "model_select": [0, 1, 5], "configstatu": [0, 1, 2], "fail": [0, 1, 2], "success": [0, 1, 2], "gridsearchq": [0, 1, 2, 5], "best_model": [0, 1, 2], "statu": [0, 1, 2], "invalid": [0, 1, 2], "timeout": [0, 1, 2], "cross_val_predict": [0, 1, 2], "expand_grid": [0, 1, 2], "group_param": [0, 1, 2], "plot": [0, 1], "binary_bias_bin": [0, 1, 2], "binary_bias_glob": [0, 1, 2], "binary_diagon": [0, 1, 2], "brokenbar_supremacy_by_drift": [0, 1, 2], "error_by_drift": [0, 1, 2], "protocol": [0, 1, 4, 5], "app": [0, 1, 2, 5], "prevalence_grid": [0, 1, 2], "samples_paramet": [0, 1, 2], "total": [0, 1, 2], "abstractprotocol": [0, 1, 2, 4], "abstractstochasticseededprotocol": [0, 1, 2], "collat": [0, 1, 2], "random_st": [0, 1, 2, 4, 5], "artificialprevalenceprotocol": [0, 1, 2], "domainmix": [0, 1, 2], "iterateprotocol": [0, 1, 2], "npp": [0, 1, 2], "naturalprevalenceprotocol": [0, 1, 2], "onlabelledcollectionprotocol": [0, 1, 2], "return_typ": [0, 1, 2], "get_col": [0, 1, 2], "get_labelled_collect": [0, 1, 2], "on_preclassified_inst": [0, 1, 2], "upp": [0, 1, 2], "uniformprevalenceprotocol": [0, 1, 2], "util": [0, 1, 3, 4], "earlystop": [0, 1, 2], "create_if_not_exist": [0, 1, 2], "create_parent_dir": [0, 1, 2], "download_fil": [0, 1, 2], "download_file_if_not_exist": [0, 1, 2], "get_quapy_hom": [0, 1, 2], "map_parallel": [0, 1, 2], "parallel": [0, 1, 2, 3, 4, 5], "parallel_unpack": [0, 1, 2], "pickled_resourc": [0, 1, 2], "save_text_fil": [0, 1, 2], "temp_se": [0, 1, 2], "search": [0, 2, 5], "page": 0, "content": 1, "implement": [2, 3, 4, 5], "measur": [2, 5], "us": [2, 3, 4, 5], "prev": [2, 4], "prevs_hat": 2, "comput": [2, 5], "absolut": [2, 5], "between": [2, 3, 5], "two": [2, 4, 5], "vector": [2, 3, 4, 5], "hat": [2, 5], "frac": [2, 5], "1": [2, 3, 4, 5], "mathcal": [2, 5], "sum_": [2, 5], "where": [2, 3, 4, 5], "ar": [2, 3, 4, 5], "class": [2, 3, 4, 5], "interest": 2, "paramet": [2, 3, 4, 5], "arrai": [2, 3, 4, 5], "like": [2, 3, 4, 5], "shape": [2, 3, 4, 5], "true": [2, 3, 4, 5], "valu": [2, 3, 4, 5], "return": [2, 3, 4, 5], "y_true": 2, "y_pred": 2, "term": [2, 3, 4, 5], "accuraci": [2, 5], "The": [2, 3, 4, 5], "tp": 2, "tn": 2, "fp": 2, "fn": 2, "stand": [2, 5], "posit": [2, 4, 5], "fals": [2, 3, 4, 5], "neg": [2, 5], "respect": [2, 5], "label": [2, 3, 4, 5], "f1": [2, 3], "simpli": [2, 5], "macro": 2, "f_1": 2, "e": [2, 3, 4, 5], "harmon": 2, "mean": [2, 3, 4, 5], "precis": 2, "recal": 2, "defin": [2, 3, 4, 5], "2tp": 2, "averag": [2, 4, 5], "each": [2, 3, 4, 5], "categori": 2, "independ": [2, 5], "err_nam": 2, "get": [2, 3, 4, 5], "an": [2, 3, 4, 5], "from": [2, 3, 4, 5], "its": [2, 3, 5], "name": [2, 3, 4, 5], "g": [2, 4, 5], "string": [2, 4, 5], "callabl": [2, 4, 5], "request": [2, 4, 5], "ep": 2, "none": [2, 3, 4, 5], "kullback": [2, 5], "leibler": [2, 5], "diverg": [2, 5], "distribut": [2, 4, 5], "d_": 2, "kl": 2, "log": [2, 4, 5], "factor": 2, "see": [2, 3, 4, 5], "case": [2, 3, 4, 5], "which": [2, 3, 4, 5], "zero": 2, "typic": [2, 3, 4, 5], "set": [2, 3, 4, 5], "2t": 2, "t": [2, 3, 5], "size": [2, 3, 4, 5], "If": [2, 4, 5], "taken": [2, 3, 4, 5], "environ": [2, 5], "variabl": [2, 4], "sample_s": [2, 5], "ha": [2, 3, 4, 5], "thu": [2, 3, 5], "beforehand": 2, "across": [2, 5], "pair": 2, "n_sampl": [2, 3], "normal": [2, 4, 5], "rel": [2, 4, 5], "squar": [2, 5], "z_": 2, "2": [2, 4, 5], "min_": [2, 5], "math": [2, 5], "2frac": 2, "underlin": 2, "displaystyl": 2, "model": [2, 3, 4, 5], "error_metr": 2, "union": [2, 4, 5], "str": [2, 4, 5], "aggr_speedup": 2, "bool": [2, 3, 5], "auto": 2, "verbos": [2, 3, 4, 5], "accord": [2, 3, 4, 5], "specif": [2, 5], "gener": [2, 3, 4, 5], "one": [2, 4, 5], "metric": [2, 5], "instanc": [2, 3, 4, 5], "object": [2, 3, 4, 5], "also": [2, 3, 5], "speed": [2, 5], "up": [2, 3, 5], "can": [2, 4, 5], "run": [2, 4, 5], "charg": [2, 4], "repres": [2, 4, 5], "": [2, 3, 4, 5], "qp": [2, 4, 5], "itself": [2, 5], "whether": [2, 3, 4, 5], "appli": [2, 3, 4, 5], "forc": 2, "even": 2, "number": [2, 3, 4, 5], "origin": [2, 4, 5], "collect": [2, 3, 4, 5], "act": 2, "larger": [2, 4, 5], "than": [2, 3, 4, 5], "default": [2, 3, 4, 5], "let": [2, 5], "decid": [2, 4], "conveni": 2, "deactiv": 2, "boolean": [2, 4, 5], "show": [2, 3, 4, 5], "inform": [2, 3, 4, 5], "stdout": 2, "score": [2, 3, 4, 5], "singl": [2, 5], "float": [2, 3, 4, 5], "iter": [2, 4, 5], "given": [2, 3, 4, 5], "list": [2, 3, 4, 5], "report": [2, 5], "panda": 2, "datafram": 2, "more": [2, 4, 5], "column": [2, 4], "estim": [2, 3, 4, 5], "mani": [2, 5], "have": [2, 4, 5], "been": [2, 3, 4, 5], "indic": [2, 3, 4, 5], "displai": [2, 3], "everi": [2, 5], "via": [2, 3, 5], "central": 2, "all": [2, 3, 4, 5], "process": [2, 4], "endow": 2, "optim": [2, 3, 5], "larg": 2, "onli": [2, 3, 4, 5], "come": [2, 4, 5], "down": [2, 4, 5], "onc": [2, 4], "over": [2, 5], "instead": [2, 4, 5], "raw": [2, 4], "so": [2, 3, 4, 5], "never": 2, "call": [2, 4, 5], "again": 2, "behaviour": 2, "obtain": [2, 3, 5], "carri": [2, 4, 5], "out": [2, 3, 4, 5], "overal": 2, "need": [2, 4, 5], "exce": 2, "undertaken": 2, "issu": [2, 5], "tupl": [2, 4, 5], "true_prev": 2, "estim_prev": 2, "element": [2, 4, 5], "ndarrai": [2, 4, 5], "q": [2, 3, 5], "hellingh": 2, "distanc": [2, 5], "hd": [2, 5], "discret": [2, 5], "k": [2, 3, 4, 5], "bin": [2, 5], "sqrt": [2, 5], "p_i": 2, "q_i": 2, "real": [2, 3, 4, 5], "1e": [2, 3, 5], "20": [2, 5], "topso": [2, 5], "left": [2, 4, 5], "right": [2, 4, 5], "prevalence_estim": 2, "_supportsarrai": 2, "dtype": [2, 4], "_nestedsequ": 2, "int": [2, 4, 5], "complex": 2, "byte": 2, "tpr": [2, 5], "fpr": [2, 5], "adjust": [2, 5], "rate": [2, 3, 5], "might": [2, 4], "rang": [2, 5], "0": [2, 3, 4, 5], "loss": [2, 3, 5], "liter": [2, 5], "ternary_search": 2, "minim": [2, 5], "strategi": 2, "possibl": [2, 5], "scipi": [2, 4], "linear": [2, 5], "problem": [2, 4, 5], "space": [2, 3, 5], "01": [2, 3, 5], "02": 2, "ternari": [2, 5], "yet": 2, "np": [2, 4, 5], "positive_preval": 2, "clip_if_necessari": 2, "helper": 2, "order": [2, 4, 5], "guarante": [2, 4, 5], "result": [2, 5], "valid": [2, 3, 4, 5], "check": 2, "rais": [2, 5], "raise_except": 2, "toleranz": 2, "08": 2, "sum": [2, 5], "otherwis": [2, 4, 5], "project": [2, 5], "proport": [2, 3, 4, 5], "probabl": [2, 3, 5], "perform": [2, 3, 5], "thei": [2, 5], "onto": [2, 5], "simplex": [2, 5], "n_instanc": [2, 3, 5], "correctli": 2, "when": [2, 3, 4, 5], "some": [2, 4, 5], "exampl": [2, 3, 4, 5], "len": 2, "occurr": [2, 4], "receiv": 2, "argument": [2, 4, 5], "That": 2, "alreadi": 2, "tri": [2, 5], "instanti": [2, 3, 5], "correspond": [2, 4, 5], "combinations_budget": 2, "n_repeat": 2, "largest": 2, "equidist": 2, "point": [2, 4, 5], "combin": [2, 5], "dimension": [2, 3, 4, 5], "do": [2, 3, 4, 5], "integ": [2, 3, 4, 5], "maximum": [2, 3, 5], "allow": [2, 3, 4, 5], "repetit": 2, "less": [2, 4, 5], "best": [2, 3, 5], "explor": 2, "step": [2, 5], "ineffici": 2, "ad": 2, "complet": [2, 5], "earli": [2, 3, 5], "literatur": 2, "A": [2, 3, 4, 5], "most": [2, 4, 5], "power": 2, "altern": [2, 5], "found": [2, 3, 4, 5], "unnormalized_arr": 2, "code": [2, 3], "adapt": [2, 3], "mathieu": 2, "blondel": 2, "bsd": 2, "licens": 2, "accompani": 2, "paper": [2, 3, 5], "akinori": 2, "fujino": 2, "naonori": 2, "ueda": 2, "scale": [2, 3, 5], "multiclass": [2, 4, 5], "support": [2, 4, 5], "machin": [2, 3], "euclidean": 2, "icpr": 2, "2014": 2, "url": 2, "n": [2, 3, 5], "v": [2, 3, 5], "matrix": [2, 5], "consist": [2, 3, 4, 5], "l1": [2, 5], "convert": [2, 3, 4, 5], "n_prevpoint": 2, "equal": [2, 5], "distant": 2, "calcul": [2, 5], "binom": 2, "c": [2, 3, 4, 5], "time": [2, 4, 5], "r": [2, 4, 5], "mass": 2, "block": 2, "alloc": [2, 3], "solut": [2, 5], "star": 2, "bar": 2, "For": [2, 4, 5], "5": [2, 3, 4, 5], "25": [2, 3, 5], "75": [2, 5], "50": [2, 5], "yield": [2, 4, 5], "smallest": 2, "lost": 2, "constrain": [2, 4], "slsqp": 2, "routin": [2, 4, 5], "posterior": [2, 3, 5], "crisp": [2, 5], "decis": [2, 3, 5], "take": [2, 4, 5], "argmax": 2, "grid_point": 2, "21": 2, "repeat": 2, "smooth_limits_epsilon": 2, "produc": 2, "uniformli": 2, "separ": [2, 4], "By": 2, "05": [2, 5], "limit": [2, 5], "10": [2, 3, 5], "15": [2, 4], "90": 2, "95": 2, "99": 2, "interv": 2, "quantiti": 2, "add": [2, 4], "subtract": [2, 4], "p_c_cond_i": 2, "p_c": [2, 5], "invers": [2, 5], "invari": [2, 5], "ratio": [2, 5], "exact": [2, 4, 5], "solv": [2, 5], "equat": [2, 5], "misclassif": [2, 5], "entri": [2, 5], "being": [2, 5], "belong": [2, 5], "end": [2, 5], "option": [2, 4, 5], "mai": 2, "exist": 2, "degener": 2, "vaz": [2, 5], "et": [2, 3, 4, 5], "al": [2, 3, 4, 5], "replac": [2, 4, 5], "last": [2, 3, 4, 5], "system": [2, 5], "rank": [2, 3, 5], "strictli": [2, 5], "full": [2, 4, 5], "deprec": [2, 5], "alwai": [2, 5], "prec": 2, "3": [2, 3, 4, 5], "represent": [2, 3, 5], "33": 2, "67": 2, "kraemer": 2, "algorithm": [2, 4, 5], "random": [2, 4, 5], "unit": [2, 5], "post": 2, "stackexchang": 2, "question": 2, "3227": 2, "uniform": [2, 4, 5], "_": [2, 4, 5], "param": [2, 3, 5], "msg": 2, "param_grid": [2, 5], "dict": [2, 4, 5], "type": [2, 4, 5], "refit": 2, "n_job": [2, 3, 4, 5], "raise_error": 2, "grid": [2, 5], "target": [2, 3, 5], "orient": [2, 5], "hyperparamet": [2, 5], "dictionari": [2, 3, 4, 5], "kei": [2, 4], "ones": [2, 4, 5], "those": [2, 3, 5], "quantification_error": 2, "whole": [2, 3], "chosen": 2, "ignor": [2, 4, 5], "gen": 2, "establish": 2, "timer": 2, "second": [2, 4], "configur": [2, 5], "test": [2, 3, 4, 5], "whenev": 2, "longer": [2, 5], "timeouterror": 2, "except": [2, 5], "bound": [2, 5], "ani": [2, 3, 4, 5], "mark": 2, "goe": 2, "howev": 2, "valueerror": 2, "through": 2, "after": [2, 5], "hyper": [2, 3, 5], "learn": [2, 3, 4, 5], "select": [2, 4, 5], "self": [2, 3, 4, 5], "deep": [2, 5], "unus": [2, 3], "contanin": 2, "enum": 2, "enumer": 2, "4": [2, 4], "nfold": [2, 4], "akin": [2, 5], "scikit": [2, 3, 4, 5], "fold": [2, 4, 5], "cross": [2, 3, 4, 5], "seed": [2, 4, 5], "reproduc": [2, 4], "expand": 2, "100": [2, 3, 4, 5], "b": [2, 4, 5], "print": [2, 3, 4], "assign": [2, 4], "partit": [2, 3], "anoth": [2, 5], "que": 2, "method_nam": 2, "pos_class": [2, 4], "titl": 2, "nbin": [2, 5], "colormap": 2, "matplotlib": 2, "color": 2, "listedcolormap": 2, "vertical_xtick": 2, "legend": 2, "savepath": 2, "box": 2, "local": 2, "bia": [2, 3, 5], "sign": 2, "minu": 2, "differ": [2, 4, 5], "classs": 2, "experi": [2, 4], "compon": [2, 3, 5], "cm": 2, "tab10": 2, "secondari": 2, "path": [2, 3, 4, 5], "save": [2, 4], "shown": 2, "global": 2, "show_std": 2, "train_prev": 2, "method_ord": 2, "diagon": 2, "along": [2, 5], "axi": 2, "describ": [2, 5], "henc": [2, 4, 5], "It": [2, 4], "though": 2, "other": [2, 4, 5], "prefer": 2, "deviat": [2, 4], "band": 2, "inconveni": 2, "compar": 2, "high": [2, 5], "leyend": 2, "hightlight": 2, "conduct": 2, "same": [2, 4, 5], "impos": 2, "associ": 2, "tr_prev": [2, 5], "n_bin": [2, 5], "isomer": 2, "x_error": 2, "y_error": 2, "ttest_alpha": 2, "005": 2, "tail_density_threshold": 2, "top": [2, 5], "region": 2, "shift": [2, 3, 5], "form": [2, 4, 5], "broken": 2, "chart": 2, "either": 2, "follow": [2, 4, 5], "hold": [2, 5], "ii": 2, "statist": [2, 5], "significantli": 2, "side": 2, "confid": 2, "made": [2, 4, 5], "isometr": 2, "percentil": 2, "divid": 2, "amount": [2, 5], "abov": 2, "consid": [2, 3, 4, 5], "involv": 2, "similar": [2, 5], "threshold": [2, 5], "densiti": [2, 5], "below": [2, 4], "tail": 2, "avoid": 2, "outlier": 2, "error_nam": 2, "show_dens": 2, "show_legend": 2, "logscal": 2, "vline": 2, "especi": 2, "cumberson": 2, "gain": 2, "understand": 2, "about": [2, 4, 5], "how": [2, 4, 5], "fare": 2, "prior": [2, 5], "spectrum": 2, "low": [2, 3], "regim": 2, "highlight": 2, "vertic": 2, "dot": 2, "line": 2, "n_preval": 2, "sanity_check": 2, "10000": [2, 5], "sample_prev": 2, "artifici": 2, "drawn": [2, 4], "extract": [2, 4, 5], "copi": [2, 4], "replic": 2, "sequenc": 2, "user": 2, "skip": 2, "labelled_collect": 2, "exhaust": 2, "depend": [2, 5], "11": 2, "9": 2, "implicit": 2, "return_constrained_dim": 2, "rest": [2, 3, 4], "note": [2, 4], "quit": 2, "obvious": 2, "doe": [2, 5], "determinist": 2, "anywher": 2, "multipli": 2, "realiz": 2, "necessari": [2, 5], "abstract": [2, 3, 4, 5], "parent": 2, "known": [2, 5], "procedur": 2, "enforc": 2, "fulli": 2, "In": [2, 3, 4, 5], "make": [2, 5], "extend": [2, 5], "input": [2, 3, 4, 5], "arg": [2, 3, 4, 5], "prepar": 2, "accommod": 2, "desir": [2, 4], "output": [2, 3, 4, 5], "format": [2, 4, 5], "befor": [2, 3, 4, 5], "inherit": 2, "custom": [2, 4], "addit": 2, "adher": 2, "properti": [2, 3, 4, 5], "determin": 2, "serv": [2, 4], "alia": [2, 4, 5], "domaina": 2, "domainb": 2, "mixture_point": 2, "mixtur": [2, 5], "domain": 2, "control": 2, "preserv": [2, 4], "draw": [2, 5], "specifi": [2, 3, 4, 5], "should": [2, 3, 4, 5], "zip": 2, "veri": 2, "simpl": [2, 5], "previous": [2, 5], "natur": 2, "therefor": 2, "approxim": [2, 3], "classmethod": [2, 4, 5], "pre_classif": 2, "in_plac": 2, "modifi": 2, "version": [2, 3], "pre": 2, "advanc": 2, "hard": [2, 3, 5], "modif": 2, "place": [2, 4], "new": [2, 4], "variant": [2, 5], "reli": [2, 5], "cover": [2, 3], "entir": 2, "sens": 2, "unlik": 2, "endeavour": 2, "intract": 2, "patienc": [2, 3, 5], "lower_is_bett": 2, "stop": [2, 3, 5], "network": [2, 3, 4, 5], "epoch": [2, 3, 5], "7": [2, 3, 5], "improv": [2, 3, 5], "best_epoch": 2, "best_scor": 2, "consecut": [2, 3, 4, 5], "monitor": 2, "obtaind": 2, "held": [2, 3, 5], "split": [2, 3, 4, 5], "wors": 2, "far": [2, 3, 4], "flag": 2, "keep": [2, 4], "track": 2, "seen": [2, 5], "wa": [2, 4, 5], "o": 2, "makedir": 2, "exist_ok": 2, "dir": [2, 5], "subdir": 2, "anotherdir": 2, "creat": [2, 5], "file": [2, 3, 4, 5], "txt": 2, "archive_filenam": 2, "download": [2, 4], "destin": 2, "filenam": 2, "dowload": 2, "home": [2, 4], "directori": [2, 3, 4, 5], "perman": 2, "quapy_data": 2, "func": 2, "slice": 2, "item": 2, "work": [2, 4, 5], "pass": [2, 3, 5], "worker": [2, 3, 4, 5], "asarrai": 2, "backend": [2, 5], "loki": [2, 5], "wrapper": [2, 3, 4, 5], "multiprocess": [2, 5], "delai": 2, "args_i": 2, "silent": [2, 5], "child": 2, "ensur": 2, "numer": [2, 4, 5], "handl": 2, "open_arg": 2, "pickle_path": 2, "generation_func": 2, "fast": [2, 4], "reus": [2, 4], "resourc": 2, "next": [2, 3, 4], "invok": [2, 4], "pickl": [2, 4, 5], "def": 2, "some_arrai": 2, "mock": [2, 3], "rand": 2, "my_arrai": 2, "pkl": 2, "first": [2, 4, 5], "text": [2, 3, 4, 5], "disk": [2, 4], "miss": 2, "context": 2, "tempor": [2, 3], "without": [2, 4], "outer": 2, "numpi": [2, 3], "current": [2, 3, 4, 5], "state": 2, "random_se": 2, "within": [2, 5], "launch": 2, "close": [2, 4, 5], "start_msg": 2, "end_msg": 2, "sleep": 2, "begin": 2, "correct": [3, 5], "temperatur": [3, 5], "bct": [3, 5], "abstent": 3, "alexandari": [3, 5], "stratifi": [3, 4, 5], "retrain": 3, "afterward": [3, 5], "No": [3, 5], "nbv": [3, 5], "re": [3, 4], "kundaj": 3, "shrikumar": 3, "2020": 3, "novemb": 3, "likelihood": [3, 5], "beat": [3, 5], "intern": [3, 4, 5], "confer": [3, 4], "pp": 3, "222": 3, "232": 3, "pmlr": 3, "baseestim": [3, 5], "calibratorfactori": 3, "n_featur": [3, 5], "manner": [3, 5], "val": [3, 4], "These": [3, 5], "n_compon": 3, "kwarg": [3, 4, 5], "embed": [3, 5], "requir": [3, 4, 5], "quanet": [3, 5], "easili": 3, "sklearn": [3, 4, 5], "decomposit": 3, "truncatedsvd": 3, "while": [3, 4, 5], "linear_model": 3, "logisticregress": [3, 5], "princip": 3, "retain": [3, 5], "logist": [3, 5], "regress": 3, "map": [3, 5], "length": [3, 4], "eventu": [3, 4], "unalt": 3, "emb": 3, "embedding_s": 3, "hidden_s": 3, "256": 3, "repr_siz": 3, "kernel_height": 3, "stride": 3, "pad": [3, 4], "drop_p": 3, "convolut": 3, "vocabulari": [3, 4], "word": [3, 4, 5], "hidden": [3, 5], "document": [3, 4, 5], "kernel": [3, 5], "token": [3, 4], "drop": 3, "dropout": [3, 5], "layer": [3, 5], "batch": 3, "torch": [3, 5], "dataload": 3, "tensor": 3, "n_dimens": [3, 5], "lstm_class_nlay": 3, "long": 3, "short": 3, "memori": 3, "lstm": [3, 5], "net": 3, "lr": [3, 5], "001": [3, 5], "weight_decai": 3, "200": 3, "batch_siz": 3, "64": [3, 5], "batch_size_test": 3, "512": [3, 5], "padding_length": 3, "300": 3, "cuda": [3, 5], "checkpointpath": 3, "checkpoint": [3, 5], "classifier_net": 3, "dat": 3, "weight": [3, 4], "decai": 3, "wait": 3, "cpu": [3, 5], "enabl": 3, "gpu": [3, 5], "store": [3, 4, 5], "vocab_s": 3, "reiniti": 3, "trainer": 3, "learner": [3, 5], "disjoint": 3, "embed_s": 3, "nn": 3, "pad_length": 3, "xavier": 3, "initi": [3, 5], "shuffl": [3, 4], "dynam": [3, 4, 5], "longest": 3, "shorter": 3, "svmperf_bas": [3, 5], "host_fold": 3, "classifiermixin": 3, "svm": [3, 4, 5], "perf": [3, 5], "thorsten": 3, "joachim": [3, 5], "patch": [3, 5], "instal": [3, 5], "further": [3, 4, 5], "detail": [3, 4, 5], "refer": [3, 4], "esuli": [3, 4, 5], "2015": [3, 5], "barranquero": [3, 5], "svm_perf_learn": 3, "svm_perf_classifi": 3, "trade": [3, 5], "off": [3, 5], "margin": [3, 5], "std": 3, "avail": [3, 4, 5], "qacc": 3, "qf1": 3, "qgm": 3, "tmp": 3, "automat": 3, "delet": 3, "multivari": 3, "12": 3, "26": 3, "27": 3, "13": 3, "22": [3, 4], "23": 3, "24": 3, "textual": 4, "train_siz": 4, "6": 4, "conform": 4, "nrepeat": 4, "around": [4, 5], "round": 4, "train_path": 4, "test_path": 4, "loader_func": 4, "loader_kwarg": 4, "read": 4, "must": [4, 5], "loader": 4, "n_train": 4, "n_test": 4, "quick": 4, "kindl": [4, 5], "tfidf": 4, "min_df": [4, 5], "tr": 4, "3821": 4, "te": 4, "21591": 4, "spars": 4, "csr": 4, "csr_matrix": 4, "featur": [4, 5], "4403": 4, "081": 4, "919": 4, "063": 4, "937": 4, "dedic": 4, "attach": 4, "them": [4, 5], "sever": 4, "infer": 4, "linearsvc": 4, "my_collect": 4, "codefram": 4, "both": 4, "frequenc": [4, 5], "actual": [4, 5], "lead": 4, "empti": 4, "sinc": [4, 5], "met": 4, "whose": [4, 5], "train_prop": 4, "randomli": 4, "stratif": 4, "greater": 4, "single_sample_train": 4, "for_model_select": 4, "data_hom": 4, "ifcb": 4, "zenodo": 4, "pleas": 4, "link": 4, "publicli": 4, "whoi": 4, "plankton": 4, "repo": 4, "script": [4, 5], "gonz\u00e1lez": [4, 5], "basic": [4, 5], "precomput": 4, "togeth": 4, "individu": 4, "30": [4, 5], "86": 4, "286": 4, "dump": 4, "leav": 4, "quay_data": 4, "test_gen": 4, "_ifcb": 4, "ifcbtrainsamplesfromdir": 4, "seri": 4, "ifcbtestsampl": 4, "dataset_nam": 4, "test_split": 4, "uci": 4, "p\u00e9rez": [4, 5], "g\u00e1llego": [4, 5], "quevedo": 4, "j": [4, 5], "del": 4, "coz": 4, "2017": [4, 5], "characteriz": 4, "chang": 4, "studi": 4, "fusion": 4, "34": [4, 5], "87": 4, "castano": 4, "2019": [4, 5], "task": 4, "45": 4, "predefin": 4, "fetch_ucilabelledcollect": 4, "access": [4, 5], "uci_dataset": 4, "ml": [4, 5], "repositori": 4, "adopt": 4, "5fcvx2": 4, "x2": 4, "import": [4, 5], "yeast": 4, "archiv": 4, "ic": 4, "edu": 4, "criteria": 4, "1000": [4, 5], "suit": 4, "ucimlrepo": 4, "dry": 4, "bean": 4, "uci_multiclass_dataset": 4, "offici": 4, "provid": [4, 5], "lequa": 4, "competit": 4, "brief": 4, "t1a": 4, "t1b": 4, "t2a": 4, "t2b": 4, "sentiment": 4, "28": 4, "merchandis": 4, "product": 4, "we": 4, "moreo": [4, 5], "sebastiani": [4, 5], "f": [4, 5], "sperduti": 4, "2022": [4, 5], "overview": 4, "clef": 4, "descript": 4, "lequa2022_experi": 4, "py": 4, "folder": [4, 5], "guid": 4, "val_gen": 4, "_lequa2022": 4, "samplesfromdir": 4, "subclass": [4, 5], "review": 4, "recurr": 4, "proceed": [4, 5], "27th": 4, "acm": [4, 5], "knowledg": 4, "manag": 4, "2018": [2, 4, 5], "reviews_sentiment_dataset": 4, "hp": 4, "imdb": 4, "matric": 4, "minimun": 4, "kept": 4, "faster": 4, "subsequ": 4, "twitter": 4, "gao": [4, 5], "w": 4, "tweet": 4, "analysi": 4, "social": 4, "mining6": 4, "19": 4, "2016": [4, 5], "semeval13": 4, "semeval14": 4, "semeval15": 4, "share": 4, "twitter_sentiment_datasets_train": 4, "twitter_sentiment_datasets_test": 4, "gasp": 4, "hcr": 4, "omd": 4, "sander": 4, "semeval16": 4, "sst": 4, "wb": 4, "devel": 4, "style": 4, "id": 4, "would": [4, 5], "countvector": 4, "keyword": [4, 5], "nogap": 4, "regardless": 4, "special": 4, "codifi": 4, "unknown": 4, "surfac": 4, "assert": 4, "gap": 4, "preced": 4, "inplac": [4, 5], "To": 4, "uniqu": 4, "rare": 4, "occur": 4, "unk": 4, "minimum": [4, 5], "org": [4, 5], "stabl": 4, "feature_extract": 4, "html": [4, 5], "subtyp": 4, "spmatrix": 4, "remov": [4, 5], "present": 4, "least": 4, "infrequ": 4, "aka": [4, 5], "z": 4, "sublinear_tf": 4, "part": 4, "scall": 4, "tf": 4, "counter": 4, "tfidfvector": 4, "categor": 4, "toward": [4, 5], "whcih": 4, "had": 4, "encod": 4, "utf": 4, "8": [4, 5], "csv": 4, "feat1": 4, "feat2": 4, "featn": 4, "covari": [4, 5], "express": 4, "col": 4, "row": 4, "class2int": 4, "collet": 4, "fomart": 4, "progress": 4, "sentenc": 4, "classnam": 4, "u1": 4, "springer": [], "articl": [], "1007": [], "s10618": [], "008": [], "0097": [], "invert": 5, "l2": 5, "norm": 5, "ax": 5, "better": 5, "consult": 5, "buns": 5, "On": 5, "multi": 5, "extens": 5, "2nd": 5, "workshop": 5, "applic": 5, "lq": 5, "ecml": 5, "pkdd": 5, "grenobl": 5, "franc": 5, "classif_predict": 5, "y_": 5, "construct": 5, "jmlr": 5, "v20": 5, "18": 5, "456": 5, "abc": 5, "base_quantifi": 5, "median": 5, "parameter": 5, "parllel": 5, "subobject": 5, "well": 5, "nest": 5, "pipelin": 5, "latter": 5, "__": 5, "updat": 5, "reason": 5, "phase": 5, "classification_fit": 5, "maintain": 5, "attribut": 5, "give": 5, "fit_classifi": 5, "predict_on": 5, "outsid": 5, "remaind": 5, "expect": 5, "non": 5, "soft": 5, "num_warmup": 5, "500": 5, "num_sampl": 5, "mcmc_seed": 5, "bayesian": 5, "rather": 5, "diagnos": 5, "degeneraci": 5, "visibl": 5, "confus": 5, "uncertainti": 5, "extra": 5, "bay": 5, "warmup": 5, "mcmc": 5, "sampler": 5, "One": 5, "noth": 5, "here": 5, "cdf": 5, "match": 5, "helling": 5, "sought": 5, "choic": 5, "channel": 5, "proper": 5, "ch": 5, "particular": 5, "di": 5, "dij": 5, "fraction": 5, "th": 5, "tol": 5, "find": 5, "got": 5, "dl": 5, "doi": 5, "1145": 5, "3219819": 5, "3220059": 5, "histogram": 5, "toler": 5, "classif_posterior": 5, "exact_train_prev": 5, "recalib": 5, "maxim": 5, "saeren": 5, "latinn": 5, "decaesteck": 5, "mutual": 5, "recurs": 5, "wai": 5, "until": 5, "converg": 5, "heurist": 5, "propos": 5, "recalibr": 5, "meant": 5, "messag": 5, "observ": 5, "posterior_prob": 5, "0001": 5, "reach": 5, "loop": 5, "ir": 5, "accordingli": 5, "unlabel": 5, "binary_quantifi": 5, "parallel_backend": 5, "prevel": 5, "emploi": 5, "joblib": 5, "help": 5, "elm": 5, "cannot": 5, "temp": 5, "dure": 5, "resp": 5, "simplif": 5, "conceptu": 5, "equival": 5, "explicit": 5, "famili": 5, "structur": 5, "purpos": 5, "svmperf_hom": 5, "properli": 5, "underli": 5, "2021": 5, "_kdei": 5, "common": 5, "ancestor": 5, "kde": 5, "scott": 5, "silverman": 5, "bandwidth": 5, "wrap": 5, "kerneldens": 5, "evalut": 5, "kdei": 5, "cauchi": 5, "schwarz": 5, "author": 5, "mont": 5, "carlo": 5, "approach": 5, "alpha": 5, "delta": 5, "d": 5, "boldsymbol": 5, "q_": 5, "widetild": 5, "u": 5, "p_": 5, "alpha_i": 5, "l": 5, "_i": 5, "p_x": 5, "x_i": 5, "h": 5, "datapoint": 5, "center": 5, "mathrm": 5, "dx": 5, "2dx": 5, "admit": 5, "montecarlo_tri": 5, "disntac": 5, "_f": 5, "trial": 5, "x_1": 5, "ldot": 5, "x_t": 5, "sim_": 5, "iid": 5, "criterion": 5, "mathbb": 5, "_neural": 5, "doc_embedding_s": 5, "stats_siz": 5, "lstm_hidden_s": 5, "lstm_nlayer": 5, "ff_layer": 5, "1024": 5, "bidirect": 5, "qdrop_p": 5, "order_bi": 5, "cell": 5, "dens": 5, "connect": 5, "ff": 5, "sort": 5, "doc_embed": 5, "doc_posterior": 5, "overridden": 5, "although": 5, "recip": 5, "former": 5, "care": 5, "regist": 5, "hook": 5, "n_epoch": 5, "tr_iter_per_poch": 5, "va_iter_per_poch": 5, "checkpointdir": 5, "checkpointnam": 5, "pytorch": 5, "advantag": 5, "cnn": 5, "estim_preval": 5, "anyth": 5, "40": 5, "66": 5, "ground": 5, "truth": 5, "_threshold_optim": 5, "forman": 5, "2006": 5, "2008": 5, "look": 5, "goal": 5, "bring": 5, "stabil": 5, "denomin": 5, "sweep": 5, "closest": 5, "choos": 5, "deliv": 5, "interpret": 5, "complement": 5, "param_mod_sel": 5, "param_model_sel": 5, "red_siz": 5, "min_po": 5, "polici": 5, "av": 5, "max_sample_s": 5, "ptr": 5, "member": 5, "preliminari": 5, "final": 5, "recomput": 5, "static": 5, "compat": 5, "recommend": 5, "gridsearchcv": 5, "base_quantifier_class": 5, "factori": 5, "unifi": 5, "interfac": 5, "logspac": 5, "class_weight": 5, "balanc": 5, "110": 5, "setup": 5, "mimick": 5, "castro": 5, "alaiz": 5, "rodr\u00edguez": 5, "alegr": 5, "2013": 5, "nfeat": 5, "dissimilar": 5, "mlpe": 5, "lazi": 5, "assum": 5, "put": 5, "assumpion": 5, "irrespect": 5, "lower": 5, "estimant": 5, "bootstrap_tri": 5, "bootstrap_rang": 5, "bagging_tri": 5, "bagging_rang": 5, "vectorizer_kwarg": 5, "class_cond_x": 5, "hat_yi": 5, "yj": 5, "yi": 5}, "objects": {"": [[2, 0, 0, "-", "quapy"]], "quapy": [[3, 0, 0, "-", "classification"], [4, 0, 0, "-", "data"], [2, 0, 0, "-", "error"], [2, 0, 0, "-", "evaluation"], [2, 0, 0, "-", "functional"], [5, 0, 0, "-", "method"], [2, 0, 0, "-", "model_selection"], [2, 0, 0, "-", "plot"], [2, 0, 0, "-", "protocol"], [2, 0, 0, "-", "util"]], "quapy.classification": [[3, 0, 0, "-", "calibration"], [3, 0, 0, "-", "methods"], [3, 0, 0, "-", "neural"], [3, 0, 0, "-", "svmperf"]], "quapy.classification.calibration": [[3, 1, 1, "", "BCTSCalibration"], [3, 1, 1, "", "NBVSCalibration"], [3, 1, 1, "", "RecalibratedProbabilisticClassifier"], [3, 1, 1, "", "RecalibratedProbabilisticClassifierBase"], [3, 1, 1, "", "TSCalibration"], [3, 1, 1, "", "VSCalibration"]], "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase": [[3, 2, 1, "", "classes_"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "fit_cv"], [3, 3, 1, "", "fit_tr_val"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"]], "quapy.classification.methods": [[3, 1, 1, "", "LowRankLogisticRegression"]], "quapy.classification.methods.LowRankLogisticRegression": [[3, 3, 1, "", "fit"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"], [3, 3, 1, "", "set_params"], [3, 3, 1, "", "transform"]], "quapy.classification.neural": [[3, 1, 1, "", "CNNnet"], [3, 1, 1, "", "LSTMnet"], [3, 1, 1, "", "NeuralClassifierTrainer"], [3, 1, 1, "", "TextClassifierNet"], [3, 1, 1, "", "TorchDataset"]], "quapy.classification.neural.CNNnet": [[3, 3, 1, "", "document_embedding"], [3, 3, 1, "", "get_params"], [3, 4, 1, "", "training"], [3, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.LSTMnet": [[3, 3, 1, "", "document_embedding"], [3, 3, 1, "", "get_params"], [3, 4, 1, "", "training"], [3, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.NeuralClassifierTrainer": [[3, 2, 1, "", "device"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"], [3, 3, 1, "", "reset_net_params"], [3, 3, 1, "", "set_params"], [3, 3, 1, "", "transform"]], "quapy.classification.neural.TextClassifierNet": [[3, 3, 1, "", "dimensions"], [3, 3, 1, "", "document_embedding"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict_proba"], [3, 4, 1, "", "training"], [3, 2, 1, "", "vocabulary_size"], [3, 3, 1, "", "xavier_uniform"]], "quapy.classification.neural.TorchDataset": [[3, 3, 1, "", "asDataloader"]], "quapy.classification.svmperf": [[3, 1, 1, "", "SVMperf"]], "quapy.classification.svmperf.SVMperf": [[3, 3, 1, "", "decision_function"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "predict"], [3, 4, 1, "", "valid_losses"]], "quapy.data": [[4, 0, 0, "-", "base"], [4, 0, 0, "-", "datasets"], [4, 0, 0, "-", "preprocessing"], [4, 0, 0, "-", "reader"]], "quapy.data.base": [[4, 1, 1, "", "Dataset"], [4, 1, 1, "", "LabelledCollection"]], "quapy.data.base.Dataset": [[4, 3, 1, "", "SplitStratified"], [4, 2, 1, "", "binary"], [4, 2, 1, "", "classes_"], [4, 3, 1, "", "kFCV"], [4, 3, 1, "", "load"], [4, 2, 1, "", "n_classes"], [4, 3, 1, "", "reduce"], [4, 3, 1, "", "stats"], [4, 2, 1, "", "train_test"], [4, 2, 1, "", "vocabulary_size"]], "quapy.data.base.LabelledCollection": [[4, 2, 1, "", "X"], [4, 2, 1, "", "Xp"], [4, 2, 1, "", "Xy"], [4, 2, 1, "", "binary"], [4, 3, 1, "", "counts"], [4, 3, 1, "", "join"], [4, 3, 1, "", "kFCV"], [4, 3, 1, "", "load"], [4, 2, 1, "", "n_classes"], [4, 2, 1, "", "p"], [4, 3, 1, "", "prevalence"], [4, 3, 1, "", "sampling"], [4, 3, 1, "", "sampling_from_index"], [4, 3, 1, "", "sampling_index"], [4, 3, 1, "", "split_random"], [4, 3, 1, "", "split_stratified"], [4, 3, 1, "", "stats"], [4, 3, 1, "", "uniform_sampling"], [4, 3, 1, "", "uniform_sampling_index"], [4, 2, 1, "", "y"]], "quapy.data.datasets": [[4, 5, 1, "", "fetch_IFCB"], [4, 5, 1, "", "fetch_UCIBinaryDataset"], [4, 5, 1, "", "fetch_UCIBinaryLabelledCollection"], [4, 5, 1, "", "fetch_UCIMulticlassDataset"], [4, 5, 1, "", "fetch_UCIMulticlassLabelledCollection"], [4, 5, 1, "", "fetch_lequa2022"], [4, 5, 1, "", "fetch_reviews"], [4, 5, 1, "", "fetch_twitter"], [4, 5, 1, "", "warn"]], "quapy.data.preprocessing": [[4, 1, 1, "", "IndexTransformer"], [4, 5, 1, "", "index"], [4, 5, 1, "", "reduce_columns"], [4, 5, 1, "", "standardize"], [4, 5, 1, "", "text2tfidf"]], "quapy.data.preprocessing.IndexTransformer": [[4, 3, 1, "", "add_word"], [4, 3, 1, "", "fit"], [4, 3, 1, "", "fit_transform"], [4, 3, 1, "", "transform"], [4, 3, 1, "", "vocabulary_size"]], "quapy.data.reader": [[4, 5, 1, "", "binarize"], [4, 5, 1, "", "from_csv"], [4, 5, 1, "", "from_sparse"], [4, 5, 1, "", "from_text"], [4, 5, 1, "", "reindex_labels"]], "quapy.error": [[2, 5, 1, "", "absolute_error"], [2, 5, 1, "", "acc_error"], [2, 5, 1, "", "acce"], [2, 5, 1, "", "ae"], [2, 5, 1, "", "f1_error"], [2, 5, 1, "", "f1e"], [2, 5, 1, "", "from_name"], [2, 5, 1, "", "kld"], [2, 5, 1, "", "mae"], [2, 5, 1, "", "mean_absolute_error"], [2, 5, 1, "", "mean_normalized_absolute_error"], [2, 5, 1, "", "mean_normalized_relative_absolute_error"], [2, 5, 1, "", "mean_relative_absolute_error"], [2, 5, 1, "", "mkld"], [2, 5, 1, "", "mnae"], [2, 5, 1, "", "mnkld"], [2, 5, 1, "", "mnrae"], [2, 5, 1, "", "mrae"], [2, 5, 1, "", "mse"], [2, 5, 1, "", "nae"], [2, 5, 1, "", "nkld"], [2, 5, 1, "", "normalized_absolute_error"], [2, 5, 1, "", "normalized_relative_absolute_error"], [2, 5, 1, "", "nrae"], [2, 5, 1, "", "rae"], [2, 5, 1, "", "relative_absolute_error"], [2, 5, 1, "", "se"], [2, 5, 1, "", "smooth"]], "quapy.evaluation": [[2, 5, 1, "", "evaluate"], [2, 5, 1, "", "evaluate_on_samples"], [2, 5, 1, "", "evaluation_report"], [2, 5, 1, "", "prediction"]], "quapy.functional": [[2, 5, 1, "", "HellingerDistance"], [2, 5, 1, "", "TopsoeDistance"], [2, 5, 1, "", "adjusted_quantification"], [2, 5, 1, "", "argmin_prevalence"], [2, 5, 1, "", "as_binary_prevalence"], [2, 5, 1, "", "check_prevalence_vector"], [2, 5, 1, "", "clip_prevalence"], [2, 5, 1, "", "counts_from_labels"], [2, 5, 1, "", "get_divergence"], [2, 5, 1, "", "get_nprevpoints_approximation"], [2, 5, 1, "", "linear_search"], [2, 5, 1, "", "map_onto_probability_simplex"], [2, 5, 1, "", "normalize_prevalence"], [2, 5, 1, "", "num_prevalence_combinations"], [2, 5, 1, "", "optim_minimize"], [2, 5, 1, "", "prevalence_from_labels"], [2, 5, 1, "", "prevalence_from_probabilities"], [2, 5, 1, "", "prevalence_linspace"], [2, 5, 1, "", "solve_adjustment"], [2, 5, 1, "", "strprev"], [2, 5, 1, "", "uniform_prevalence_sampling"], [2, 5, 1, "", "uniform_simplex_sampling"]], "quapy.method": [[5, 0, 0, "-", "_kdey"], [5, 0, 0, "-", "_neural"], [5, 0, 0, "-", "_threshold_optim"], [5, 0, 0, "-", "aggregative"], [5, 0, 0, "-", "base"], [5, 0, 0, "-", "meta"], [5, 0, 0, "-", "non_aggregative"]], "quapy.method._kdey": [[5, 1, 1, "", "KDEBase"], [5, 1, 1, "", "KDEyCS"], [5, 1, 1, "", "KDEyHD"], [5, 1, 1, "", "KDEyML"]], "quapy.method._kdey.KDEBase": [[5, 4, 1, "", "BANDWIDTH_METHOD"], [5, 3, 1, "", "get_kde_function"], [5, 3, 1, "", "get_mixture_components"], [5, 3, 1, "", "pdf"]], "quapy.method._kdey.KDEyCS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "gram_matrix_mix_sum"]], "quapy.method._kdey.KDEyHD": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method._kdey.KDEyML": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method._neural": [[5, 1, 1, "", "QuaNetModule"], [5, 1, 1, "", "QuaNetTrainer"], [5, 5, 1, "", "mae_loss"]], "quapy.method._neural.QuaNetModule": [[5, 2, 1, "", "device"], [5, 3, 1, "", "forward"], [5, 4, 1, "", "training"]], "quapy.method._neural.QuaNetTrainer": [[5, 2, 1, "", "classes_"], [5, 3, 1, "", "clean_checkpoint"], [5, 3, 1, "", "clean_checkpoint_dir"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method._threshold_optim": [[5, 1, 1, "", "MAX"], [5, 1, 1, "", "MS"], [5, 1, 1, "", "MS2"], [5, 1, 1, "", "T50"], [5, 1, 1, "", "ThresholdOptimization"], [5, 1, 1, "", "X"]], "quapy.method._threshold_optim.MAX": [[5, 3, 1, "", "condition"]], "quapy.method._threshold_optim.MS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "condition"]], "quapy.method._threshold_optim.MS2": [[5, 3, 1, "", "discard"]], "quapy.method._threshold_optim.T50": [[5, 3, 1, "", "condition"]], "quapy.method._threshold_optim.ThresholdOptimization": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregate_with_threshold"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "condition"], [5, 3, 1, "", "discard"]], "quapy.method._threshold_optim.X": [[5, 3, 1, "", "condition"]], "quapy.method.aggregative": [[5, 1, 1, "", "ACC"], [5, 4, 1, "", "AdjustedClassifyAndCount"], [5, 1, 1, "", "AggregativeCrispQuantifier"], [5, 1, 1, "", "AggregativeMedianEstimator"], [5, 1, 1, "", "AggregativeQuantifier"], [5, 1, 1, "", "AggregativeSoftQuantifier"], [5, 1, 1, "", "BayesianCC"], [5, 1, 1, "", "BinaryAggregativeQuantifier"], [5, 1, 1, "", "CC"], [5, 4, 1, "", "ClassifyAndCount"], [5, 1, 1, "", "DMy"], [5, 4, 1, "", "DistributionMatchingY"], [5, 1, 1, "", "DyS"], [5, 1, 1, "", "EMQ"], [5, 4, 1, "", "ExpectationMaximizationQuantifier"], [5, 1, 1, "", "HDy"], [5, 4, 1, "", "HellingerDistanceY"], [5, 1, 1, "", "OneVsAllAggregative"], [5, 1, 1, "", "PACC"], [5, 1, 1, "", "PCC"], [5, 4, 1, "", "ProbabilisticAdjustedClassifyAndCount"], [5, 4, 1, "", "ProbabilisticClassifyAndCount"], [5, 4, 1, "", "SLD"], [5, 1, 1, "", "SMM"], [5, 5, 1, "", "newELM"], [5, 5, 1, "", "newSVMAE"], [5, 5, 1, "", "newSVMKLD"], [5, 5, 1, "", "newSVMQ"], [5, 5, 1, "", "newSVMRAE"]], "quapy.method.aggregative.ACC": [[5, 4, 1, "", "CLIPPING"], [5, 4, 1, "", "METHODS"], [5, 4, 1, "", "SOLVERS"], [5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "getPteCondEstim"], [5, 3, 1, "", "newInvariantRatioEstimation"]], "quapy.method.aggregative.AggregativeMedianEstimator": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.aggregative.AggregativeQuantifier": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 2, 1, "", "classes_"], [5, 2, 1, "", "classifier"], [5, 3, 1, "", "classifier_fit_predict"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 2, 1, "", "val_split"], [5, 4, 1, "", "val_split_"]], "quapy.method.aggregative.BayesianCC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "get_conditional_probability_samples"], [5, 3, 1, "", "get_prevalence_samples"], [5, 3, 1, "", "sample_from_posterior"]], "quapy.method.aggregative.BinaryAggregativeQuantifier": [[5, 3, 1, "", "fit"], [5, 2, 1, "", "neg_label"], [5, 2, 1, "", "pos_label"]], "quapy.method.aggregative.CC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.DMy": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.DyS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.EMQ": [[5, 3, 1, "", "EM"], [5, 3, 1, "", "EMQ_BCTS"], [5, 4, 1, "", "EPSILON"], [5, 4, 1, "", "MAX_ITER"], [5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "predict_proba"]], "quapy.method.aggregative.HDy": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.OneVsAllAggregative": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "classify"]], "quapy.method.aggregative.PACC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "getPteCondEstim"]], "quapy.method.aggregative.PCC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.SMM": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.base": [[5, 1, 1, "", "BaseQuantifier"], [5, 1, 1, "", "BinaryQuantifier"], [5, 1, 1, "", "OneVsAll"], [5, 1, 1, "", "OneVsAllGeneric"], [5, 5, 1, "", "newOneVsAll"]], "quapy.method.base.BaseQuantifier": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.base.OneVsAllGeneric": [[5, 2, 1, "", "classes_"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.meta": [[5, 5, 1, "", "EACC"], [5, 5, 1, "", "ECC"], [5, 5, 1, "", "EEMQ"], [5, 5, 1, "", "EHDy"], [5, 5, 1, "", "EPACC"], [5, 1, 1, "", "Ensemble"], [5, 1, 1, "", "MedianEstimator"], [5, 1, 1, "", "MedianEstimator2"], [5, 5, 1, "", "ensembleFactory"], [5, 5, 1, "", "get_probability_distribution"]], "quapy.method.meta.Ensemble": [[5, 4, 1, "", "VALID_POLICIES"], [5, 2, 1, "", "aggregative"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 2, 1, "", "probabilistic"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator2": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.non_aggregative": [[5, 1, 1, "", "DMx"], [5, 4, 1, "", "DistributionMatchingX"], [5, 1, 1, "", "MaximumLikelihoodPrevalenceEstimation"], [5, 1, 1, "", "ReadMe"]], "quapy.method.non_aggregative.DMx": [[5, 3, 1, "", "HDx"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.non_aggregative.ReadMe": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "std_constrained_linear_ls"]], "quapy.model_selection": [[2, 1, 1, "", "ConfigStatus"], [2, 1, 1, "", "GridSearchQ"], [2, 1, 1, "", "Status"], [2, 5, 1, "", "cross_val_predict"], [2, 5, 1, "", "expand_grid"], [2, 5, 1, "", "group_params"]], "quapy.model_selection.ConfigStatus": [[2, 3, 1, "", "failed"], [2, 3, 1, "", "success"]], "quapy.model_selection.GridSearchQ": [[2, 3, 1, "", "best_model"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "quantify"], [2, 3, 1, "", "set_params"]], "quapy.model_selection.Status": [[2, 4, 1, "", "ERROR"], [2, 4, 1, "", "INVALID"], [2, 4, 1, "", "SUCCESS"], [2, 4, 1, "", "TIMEOUT"]], "quapy.plot": [[2, 5, 1, "", "binary_bias_bins"], [2, 5, 1, "", "binary_bias_global"], [2, 5, 1, "", "binary_diagonal"], [2, 5, 1, "", "brokenbar_supremacy_by_drift"], [2, 5, 1, "", "error_by_drift"]], "quapy.protocol": [[2, 1, 1, "", "APP"], [2, 1, 1, "", "AbstractProtocol"], [2, 1, 1, "", "AbstractStochasticSeededProtocol"], [2, 4, 1, "", "ArtificialPrevalenceProtocol"], [2, 1, 1, "", "DomainMixer"], [2, 1, 1, "", "IterateProtocol"], [2, 1, 1, "", "NPP"], [2, 4, 1, "", "NaturalPrevalenceProtocol"], [2, 1, 1, "", "OnLabelledCollectionProtocol"], [2, 1, 1, "", "UPP"], [2, 4, 1, "", "UniformPrevalenceProtocol"]], "quapy.protocol.APP": [[2, 3, 1, "", "prevalence_grid"], [2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.AbstractProtocol": [[2, 3, 1, "", "total"]], "quapy.protocol.AbstractStochasticSeededProtocol": [[2, 3, 1, "", "collator"], [2, 2, 1, "", "random_state"], [2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"]], "quapy.protocol.DomainMixer": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.IterateProtocol": [[2, 3, 1, "", "total"]], "quapy.protocol.NPP": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.OnLabelledCollectionProtocol": [[2, 4, 1, "", "RETURN_TYPES"], [2, 3, 1, "", "get_collator"], [2, 3, 1, "", "get_labelled_collection"], [2, 3, 1, "", "on_preclassified_instances"]], "quapy.protocol.UPP": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.util": [[2, 1, 1, "", "EarlyStop"], [2, 5, 1, "", "create_if_not_exist"], [2, 5, 1, "", "create_parent_dir"], [2, 5, 1, "", "download_file"], [2, 5, 1, "", "download_file_if_not_exists"], [2, 5, 1, "", "get_quapy_home"], [2, 5, 1, "", "map_parallel"], [2, 5, 1, "", "parallel"], [2, 5, 1, "", "parallel_unpack"], [2, 5, 1, "", "pickled_resource"], [2, 5, 1, "", "save_text_file"], [2, 5, 1, "", "temp_seed"], [2, 5, 1, "", "timeout"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"welcom": 0, "quapi": [0, 1, 2, 3, 4, 5], "": 0, "document": 0, "instal": 0, "github": 0, "content": [0, 2, 3, 4, 5], "indic": 0, "tabl": 0, "packag": [2, 3, 4, 5], "subpackag": 2, "submodul": [2, 3, 4, 5], "error": 2, "modul": [2, 3, 4, 5], "evalu": 2, "function": 2, "model_select": 2, "plot": 2, "protocol": 2, "util": 2, "classif": 3, "calibr": 3, "method": [3, 5], "neural": 3, "svmperf": 3, "data": 4, "base": [4, 5], "dataset": 4, "preprocess": 4, "reader": 4, "aggreg": 5, "meta": 5, "non_aggreg": 5}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Welcome to QuaPy\u2019s documentation!": [[0, "welcome-to-quapy-s-documentation"]], "Installation": [[0, "installation"]], "GitHub": [[0, "github"]], "Contents": [[0, "contents"]], "Indices and tables": [[0, "indices-and-tables"]], "quapy": [[1, "quapy"]], "Submodules": [[3, "submodules"], [4, "submodules"], [2, "submodules"], [5, "submodules"]], "Module contents": [[3, "module-quapy.classification"], [4, "module-quapy.data"], [2, "module-quapy"], [5, "module-quapy.method"]], "quapy.classification package": [[3, "quapy-classification-package"]], "quapy.classification.calibration module": [[3, "module-quapy.classification.calibration"]], "quapy.classification.methods module": [[3, "module-quapy.classification.methods"]], "quapy.classification.neural module": [[3, "module-quapy.classification.neural"]], "quapy.classification.svmperf module": [[3, "module-quapy.classification.svmperf"]], "quapy.data package": [[4, "quapy-data-package"]], "quapy.data.base module": [[4, "module-quapy.data.base"]], "quapy.data.datasets module": [[4, "module-quapy.data.datasets"]], "quapy.data.preprocessing module": [[4, "module-quapy.data.preprocessing"]], "quapy.data.reader module": [[4, "module-quapy.data.reader"]], "quapy package": [[2, "quapy-package"]], "Subpackages": [[2, "subpackages"]], "quapy.error module": [[2, "module-quapy.error"]], "quapy.evaluation module": [[2, "module-quapy.evaluation"]], "quapy.functional module": [[2, "module-quapy.functional"]], "quapy.model_selection module": [[2, "module-quapy.model_selection"]], "quapy.plot module": [[2, "module-quapy.plot"]], "quapy.protocol module": [[2, "module-quapy.protocol"]], "quapy.util module": [[2, "module-quapy.util"]], "quapy.method package": [[5, "quapy-method-package"]], "quapy.method.aggregative module": [[5, "module-quapy.method.aggregative"]], "quapy.method.base module": [[5, "module-quapy.method.base"]], "quapy.method.meta module": [[5, "module-quapy.method.meta"]], "quapy.method.non_aggregative module": [[5, "module-quapy.method.non_aggregative"]]}, "indexentries": {"app (class in quapy.protocol)": [[2, "quapy.protocol.APP"]], "abstractprotocol (class in quapy.protocol)": [[2, "quapy.protocol.AbstractProtocol"]], "abstractstochasticseededprotocol (class in quapy.protocol)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol"]], "artificialprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.ArtificialPrevalenceProtocol"]], "configstatus (class in quapy.model_selection)": [[2, "quapy.model_selection.ConfigStatus"]], "domainmixer (class in quapy.protocol)": [[2, "quapy.protocol.DomainMixer"]], "error (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.ERROR"]], "earlystop (class in quapy.util)": [[2, "quapy.util.EarlyStop"]], "gridsearchq (class in quapy.model_selection)": [[2, "quapy.model_selection.GridSearchQ"]], "hellingerdistance() (in module quapy.functional)": [[2, "quapy.functional.HellingerDistance"]], "invalid (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.INVALID"]], "iterateprotocol (class in quapy.protocol)": [[2, "quapy.protocol.IterateProtocol"]], "npp (class in quapy.protocol)": [[2, "quapy.protocol.NPP"]], "naturalprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.NaturalPrevalenceProtocol"]], "onlabelledcollectionprotocol (class in quapy.protocol)": [[2, "quapy.protocol.OnLabelledCollectionProtocol"]], "return_types (quapy.protocol.onlabelledcollectionprotocol attribute)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.RETURN_TYPES"]], "success (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.SUCCESS"]], "status (class in quapy.model_selection)": [[2, "quapy.model_selection.Status"]], "timeout (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.TIMEOUT"]], "topsoedistance() (in module quapy.functional)": [[2, "quapy.functional.TopsoeDistance"]], "upp (class in quapy.protocol)": [[2, "quapy.protocol.UPP"]], "uniformprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.UniformPrevalenceProtocol"]], "absolute_error() (in module quapy.error)": [[2, "quapy.error.absolute_error"]], "acc_error() (in module quapy.error)": [[2, "quapy.error.acc_error"]], "acce() (in module quapy.error)": [[2, "quapy.error.acce"]], "adjusted_quantification() (in module quapy.functional)": [[2, "quapy.functional.adjusted_quantification"]], "ae() (in module quapy.error)": [[2, "quapy.error.ae"]], "argmin_prevalence() (in module quapy.functional)": [[2, "quapy.functional.argmin_prevalence"]], "as_binary_prevalence() (in module quapy.functional)": [[2, "quapy.functional.as_binary_prevalence"]], "best_model() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.best_model"]], "binary_bias_bins() (in module quapy.plot)": [[2, "quapy.plot.binary_bias_bins"]], "binary_bias_global() (in module quapy.plot)": [[2, "quapy.plot.binary_bias_global"]], "binary_diagonal() (in module quapy.plot)": [[2, "quapy.plot.binary_diagonal"]], "brokenbar_supremacy_by_drift() (in module quapy.plot)": [[2, "quapy.plot.brokenbar_supremacy_by_drift"]], "check_prevalence_vector() (in module quapy.functional)": [[2, "quapy.functional.check_prevalence_vector"]], "clip_prevalence() (in module quapy.functional)": [[2, "quapy.functional.clip_prevalence"]], "collator() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.collator"]], "counts_from_labels() (in module quapy.functional)": [[2, "quapy.functional.counts_from_labels"]], "create_if_not_exist() (in module quapy.util)": [[2, "quapy.util.create_if_not_exist"]], "create_parent_dir() (in module quapy.util)": [[2, "quapy.util.create_parent_dir"]], "cross_val_predict() (in module quapy.model_selection)": [[2, "quapy.model_selection.cross_val_predict"]], "download_file() (in module quapy.util)": [[2, "quapy.util.download_file"]], "download_file_if_not_exists() (in module quapy.util)": [[2, "quapy.util.download_file_if_not_exists"]], "error_by_drift() (in module quapy.plot)": [[2, "quapy.plot.error_by_drift"]], "evaluate() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluate"]], "evaluate_on_samples() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluate_on_samples"]], "evaluation_report() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluation_report"]], "expand_grid() (in module quapy.model_selection)": [[2, "quapy.model_selection.expand_grid"]], "f1_error() (in module quapy.error)": [[2, "quapy.error.f1_error"]], "f1e() (in module quapy.error)": [[2, "quapy.error.f1e"]], "failed() (quapy.model_selection.configstatus method)": [[2, "quapy.model_selection.ConfigStatus.failed"]], "fit() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.fit"]], "from_name() (in module quapy.error)": [[2, "quapy.error.from_name"]], "get_collator() (quapy.protocol.onlabelledcollectionprotocol class method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.get_collator"]], "get_divergence() (in module quapy.functional)": [[2, "quapy.functional.get_divergence"]], "get_labelled_collection() (quapy.protocol.onlabelledcollectionprotocol method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.get_labelled_collection"]], "get_nprevpoints_approximation() (in module quapy.functional)": [[2, "quapy.functional.get_nprevpoints_approximation"]], "get_params() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.get_params"]], "get_quapy_home() (in module quapy.util)": [[2, "quapy.util.get_quapy_home"]], "group_params() (in module quapy.model_selection)": [[2, "quapy.model_selection.group_params"]], "kld() (in module quapy.error)": [[2, "quapy.error.kld"]], "linear_search() (in module quapy.functional)": [[2, "quapy.functional.linear_search"]], "mae() (in module quapy.error)": [[2, "quapy.error.mae"]], "map_onto_probability_simplex() (in module quapy.functional)": [[2, "quapy.functional.map_onto_probability_simplex"]], "map_parallel() (in module quapy.util)": [[2, "quapy.util.map_parallel"]], "mean_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_absolute_error"]], "mean_normalized_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_normalized_absolute_error"]], "mean_normalized_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_normalized_relative_absolute_error"]], "mean_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_relative_absolute_error"]], "mkld() (in module quapy.error)": [[2, "quapy.error.mkld"]], "mnae() (in module quapy.error)": [[2, "quapy.error.mnae"]], "mnkld() (in module quapy.error)": [[2, "quapy.error.mnkld"]], "mnrae() (in module quapy.error)": [[2, "quapy.error.mnrae"]], "module": [[2, "module-quapy"], [2, "module-quapy.error"], [2, "module-quapy.evaluation"], [2, "module-quapy.functional"], [2, "module-quapy.model_selection"], [2, "module-quapy.plot"], [2, "module-quapy.protocol"], [2, "module-quapy.util"], [5, "module-quapy.method"], [5, "module-quapy.method._kdey"], [5, "module-quapy.method._neural"], [5, "module-quapy.method._threshold_optim"], [5, "module-quapy.method.aggregative"], [5, "module-quapy.method.base"], [5, "module-quapy.method.meta"], [5, "module-quapy.method.non_aggregative"]], "mrae() (in module quapy.error)": [[2, "quapy.error.mrae"]], "mse() (in module quapy.error)": [[2, "quapy.error.mse"]], "nae() (in module quapy.error)": [[2, "quapy.error.nae"]], "nkld() (in module quapy.error)": [[2, "quapy.error.nkld"]], "normalize_prevalence() (in module quapy.functional)": [[2, "quapy.functional.normalize_prevalence"]], "normalized_absolute_error() (in module quapy.error)": [[2, "quapy.error.normalized_absolute_error"]], "normalized_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.normalized_relative_absolute_error"]], "nrae() (in module quapy.error)": [[2, "quapy.error.nrae"]], "num_prevalence_combinations() (in module quapy.functional)": [[2, "quapy.functional.num_prevalence_combinations"]], "on_preclassified_instances() (quapy.protocol.onlabelledcollectionprotocol method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.on_preclassified_instances"]], "optim_minimize() (in module quapy.functional)": [[2, "quapy.functional.optim_minimize"]], "parallel() (in module quapy.util)": [[2, "quapy.util.parallel"]], "parallel_unpack() (in module quapy.util)": [[2, "quapy.util.parallel_unpack"]], "pickled_resource() (in module quapy.util)": [[2, "quapy.util.pickled_resource"]], "prediction() (in module quapy.evaluation)": [[2, "quapy.evaluation.prediction"]], "prevalence_from_labels() (in module quapy.functional)": [[2, "quapy.functional.prevalence_from_labels"]], "prevalence_from_probabilities() (in module quapy.functional)": [[2, "quapy.functional.prevalence_from_probabilities"]], "prevalence_grid() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.prevalence_grid"]], "prevalence_linspace() (in module quapy.functional)": [[2, "quapy.functional.prevalence_linspace"]], "quantify() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.quantify"]], "quapy": [[2, "module-quapy"]], "quapy.error": [[2, "module-quapy.error"]], "quapy.evaluation": [[2, "module-quapy.evaluation"]], "quapy.functional": [[2, "module-quapy.functional"]], "quapy.model_selection": [[2, "module-quapy.model_selection"]], "quapy.plot": [[2, "module-quapy.plot"]], "quapy.protocol": [[2, "module-quapy.protocol"]], "quapy.util": [[2, "module-quapy.util"]], "rae() (in module quapy.error)": [[2, "quapy.error.rae"]], "random_state (quapy.protocol.abstractstochasticseededprotocol property)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.random_state"]], "relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.relative_absolute_error"]], "sample() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.sample"]], "sample() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.sample"]], "sample() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.sample"]], "sample() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.sample"]], "sample() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.sample"]], "samples_parameters() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.samples_parameters"]], "samples_parameters() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.samples_parameters"]], "samples_parameters() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.samples_parameters"]], "samples_parameters() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.samples_parameters"]], "samples_parameters() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.samples_parameters"]], "save_text_file() (in module quapy.util)": [[2, "quapy.util.save_text_file"]], "se() (in module quapy.error)": [[2, "quapy.error.se"]], "set_params() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.set_params"]], "smooth() (in module quapy.error)": [[2, "quapy.error.smooth"]], "solve_adjustment() (in module quapy.functional)": [[2, "quapy.functional.solve_adjustment"]], "strprev() (in module quapy.functional)": [[2, "quapy.functional.strprev"]], "success() (quapy.model_selection.configstatus method)": [[2, "quapy.model_selection.ConfigStatus.success"]], "temp_seed() (in module quapy.util)": [[2, "quapy.util.temp_seed"]], "timeout() (in module quapy.util)": [[2, "quapy.util.timeout"]], "total() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.total"]], "total() (quapy.protocol.abstractprotocol method)": [[2, "quapy.protocol.AbstractProtocol.total"]], "total() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.total"]], "total() (quapy.protocol.iterateprotocol method)": [[2, "quapy.protocol.IterateProtocol.total"]], "total() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.total"]], "total() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.total"]], "uniform_prevalence_sampling() (in module quapy.functional)": [[2, "quapy.functional.uniform_prevalence_sampling"]], "uniform_simplex_sampling() (in module quapy.functional)": [[2, "quapy.functional.uniform_simplex_sampling"]], "acc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.ACC"]], "adjustedclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.AdjustedClassifyAndCount"]], "aggregativecrispquantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeCrispQuantifier"]], "aggregativemedianestimator (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator"]], "aggregativequantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeQuantifier"]], "aggregativesoftquantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeSoftQuantifier"]], "bandwidth_method (quapy.method._kdey.kdebase attribute)": [[5, "quapy.method._kdey.KDEBase.BANDWIDTH_METHOD"]], "basequantifier (class in quapy.method.base)": [[5, "quapy.method.base.BaseQuantifier"]], "bayesiancc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.BayesianCC"]], "binaryaggregativequantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier"]], "binaryquantifier (class in quapy.method.base)": [[5, "quapy.method.base.BinaryQuantifier"]], "cc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.CC"]], "clipping (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.CLIPPING"]], "classifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ClassifyAndCount"]], "dmx (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.DMx"]], "dmy (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.DMy"]], "distributionmatchingx (in module quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.DistributionMatchingX"]], "distributionmatchingy (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.DistributionMatchingY"]], "dys (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.DyS"]], "eacc() (in module quapy.method.meta)": [[5, "quapy.method.meta.EACC"]], "ecc() (in module quapy.method.meta)": [[5, "quapy.method.meta.ECC"]], "eemq() (in module quapy.method.meta)": [[5, "quapy.method.meta.EEMQ"]], "ehdy() (in module quapy.method.meta)": [[5, "quapy.method.meta.EHDy"]], "em() (quapy.method.aggregative.emq class method)": [[5, "quapy.method.aggregative.EMQ.EM"]], "emq (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.EMQ"]], "emq_bcts() (quapy.method.aggregative.emq class method)": [[5, "quapy.method.aggregative.EMQ.EMQ_BCTS"]], "epacc() (in module quapy.method.meta)": [[5, "quapy.method.meta.EPACC"]], "epsilon (quapy.method.aggregative.emq attribute)": [[5, "quapy.method.aggregative.EMQ.EPSILON"]], "ensemble (class in quapy.method.meta)": [[5, "quapy.method.meta.Ensemble"]], "expectationmaximizationquantifier (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ExpectationMaximizationQuantifier"]], "hdx() (quapy.method.non_aggregative.dmx class method)": [[5, "quapy.method.non_aggregative.DMx.HDx"]], "hdy (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.HDy"]], "hellingerdistancey (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.HellingerDistanceY"]], "kdebase (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEBase"]], "kdeycs (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyCS"]], "kdeyhd (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyHD"]], "kdeyml (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyML"]], "max (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MAX"]], "max_iter (quapy.method.aggregative.emq attribute)": [[5, "quapy.method.aggregative.EMQ.MAX_ITER"]], "methods (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.METHODS"]], "ms (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MS"]], "ms2 (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MS2"]], "maximumlikelihoodprevalenceestimation (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation"]], "medianestimator (class in quapy.method.meta)": [[5, "quapy.method.meta.MedianEstimator"]], "medianestimator2 (class in quapy.method.meta)": [[5, "quapy.method.meta.MedianEstimator2"]], "onevsall (class in quapy.method.base)": [[5, "quapy.method.base.OneVsAll"]], "onevsallaggregative (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.OneVsAllAggregative"]], "onevsallgeneric (class in quapy.method.base)": [[5, "quapy.method.base.OneVsAllGeneric"]], "pacc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.PACC"]], "pcc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.PCC"]], "probabilisticadjustedclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ProbabilisticAdjustedClassifyAndCount"]], "probabilisticclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ProbabilisticClassifyAndCount"]], "quanetmodule (class in quapy.method._neural)": [[5, "quapy.method._neural.QuaNetModule"]], "quanettrainer (class in quapy.method._neural)": [[5, "quapy.method._neural.QuaNetTrainer"]], "readme (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.ReadMe"]], "sld (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.SLD"]], "smm (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.SMM"]], "solvers (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.SOLVERS"]], "t50 (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.T50"]], "thresholdoptimization (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.ThresholdOptimization"]], "valid_policies (quapy.method.meta.ensemble attribute)": [[5, "quapy.method.meta.Ensemble.VALID_POLICIES"]], "x (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.X"]], "aggregate() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.aggregate"]], "aggregate() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.aggregate"]], "aggregate() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.aggregate"]], "aggregate() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.aggregate"]], "aggregate() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregate"]], "aggregate() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.aggregate"]], "aggregate() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.aggregate"]], "aggregate() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.aggregate"]], "aggregate() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.aggregate"]], "aggregate() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.aggregate"]], "aggregate() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.aggregate"]], "aggregate() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.aggregate"]], "aggregate() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.aggregate"]], "aggregate() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.aggregate"]], "aggregate() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.aggregate"]], "aggregate() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.aggregate"]], "aggregate() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.aggregate"]], "aggregate_with_threshold() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregate_with_threshold"]], "aggregation_fit() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.aggregation_fit"]], "aggregative (quapy.method.meta.ensemble property)": [[5, "quapy.method.meta.Ensemble.aggregative"]], "classes_ (quapy.method._neural.quanettrainer property)": [[5, "quapy.method._neural.QuaNetTrainer.classes_"]], "classes_ (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classes_"]], "classes_ (quapy.method.base.onevsallgeneric property)": [[5, "quapy.method.base.OneVsAllGeneric.classes_"]], "classifier (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classifier"]], "classifier_fit_predict() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classifier_fit_predict"]], "classify() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classify"]], "classify() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.classify"]], "classify() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.classify"]], "clean_checkpoint() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.clean_checkpoint"]], "clean_checkpoint_dir() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.clean_checkpoint_dir"]], "condition() (quapy.method._threshold_optim.max method)": [[5, "quapy.method._threshold_optim.MAX.condition"]], "condition() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.condition"]], "condition() (quapy.method._threshold_optim.t50 method)": [[5, "quapy.method._threshold_optim.T50.condition"]], "condition() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.condition"]], "condition() (quapy.method._threshold_optim.x method)": [[5, "quapy.method._threshold_optim.X.condition"]], "device (quapy.method._neural.quanetmodule property)": [[5, "quapy.method._neural.QuaNetModule.device"]], "discard() (quapy.method._threshold_optim.ms2 method)": [[5, "quapy.method._threshold_optim.MS2.discard"]], "discard() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.discard"]], "ensemblefactory() (in module quapy.method.meta)": [[5, "quapy.method.meta.ensembleFactory"]], "fit() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.fit"]], "fit() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.fit"]], "fit() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.fit"]], "fit() (quapy.method.aggregative.binaryaggregativequantifier method)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.fit"]], "fit() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.fit"]], "fit() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.fit"]], "fit() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.fit"]], "fit() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.fit"]], "fit() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.fit"]], "fit() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.fit"]], "fit() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.fit"]], "fit() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.fit"]], "forward() (quapy.method._neural.quanetmodule method)": [[5, "quapy.method._neural.QuaNetModule.forward"]], "getptecondestim() (quapy.method.aggregative.acc class method)": [[5, "quapy.method.aggregative.ACC.getPteCondEstim"]], "getptecondestim() (quapy.method.aggregative.pacc class method)": [[5, "quapy.method.aggregative.PACC.getPteCondEstim"]], "get_conditional_probability_samples() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.get_conditional_probability_samples"]], "get_kde_function() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.get_kde_function"]], "get_mixture_components() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.get_mixture_components"]], "get_params() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.get_params"]], "get_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.get_params"]], "get_params() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.get_params"]], "get_params() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.get_params"]], "get_params() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.get_params"]], "get_prevalence_samples() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.get_prevalence_samples"]], "get_probability_distribution() (in module quapy.method.meta)": [[5, "quapy.method.meta.get_probability_distribution"]], "gram_matrix_mix_sum() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.gram_matrix_mix_sum"]], "mae_loss() (in module quapy.method._neural)": [[5, "quapy.method._neural.mae_loss"]], "neg_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.neg_label"]], "newelm() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newELM"]], "newinvariantratioestimation() (quapy.method.aggregative.acc class method)": [[5, "quapy.method.aggregative.ACC.newInvariantRatioEstimation"]], "newonevsall() (in module quapy.method.base)": [[5, "quapy.method.base.newOneVsAll"]], "newsvmae() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMAE"]], "newsvmkld() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMKLD"]], "newsvmq() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMQ"]], "newsvmrae() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMRAE"]], "pdf() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.pdf"]], "pos_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.pos_label"]], "predict_proba() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.predict_proba"]], "probabilistic (quapy.method.meta.ensemble property)": [[5, "quapy.method.meta.Ensemble.probabilistic"]], "quantify() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.quantify"]], "quantify() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.quantify"]], "quantify() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.quantify"]], "quantify() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.quantify"]], "quantify() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.quantify"]], "quantify() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.quantify"]], "quantify() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.quantify"]], "quantify() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.quantify"]], "quantify() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.quantify"]], "quantify() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.quantify"]], "quantify() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.quantify"]], "quapy.method": [[5, "module-quapy.method"]], "quapy.method._kdey": [[5, "module-quapy.method._kdey"]], "quapy.method._neural": [[5, "module-quapy.method._neural"]], "quapy.method._threshold_optim": [[5, "module-quapy.method._threshold_optim"]], "quapy.method.aggregative": [[5, "module-quapy.method.aggregative"]], "quapy.method.base": [[5, "module-quapy.method.base"]], "quapy.method.meta": [[5, "module-quapy.method.meta"]], "quapy.method.non_aggregative": [[5, "module-quapy.method.non_aggregative"]], "sample_from_posterior() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.sample_from_posterior"]], "set_params() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.set_params"]], "set_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.set_params"]], "set_params() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.set_params"]], "set_params() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.set_params"]], "set_params() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.set_params"]], "std_constrained_linear_ls() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.std_constrained_linear_ls"]], "training (quapy.method._neural.quanetmodule attribute)": [[5, "quapy.method._neural.QuaNetModule.training"]], "val_split (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.val_split"]], "val_split_ (quapy.method.aggregative.aggregativequantifier attribute)": [[5, "quapy.method.aggregative.AggregativeQuantifier.val_split_"]]}})