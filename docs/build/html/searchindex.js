Search.setIndex({"docnames": ["index", "modules", "quapy", "quapy.classification", "quapy.data", "quapy.method", "wiki/Datasets", "wiki/Evaluation", "wiki/ExplicitLossMinimization", "wiki/Home", "wiki/Methods", "wiki/Model-Selection", "wiki/Plotting", "wiki/Protocols"], "filenames": ["index.rst", "modules.rst", "quapy.rst", "quapy.classification.rst", "quapy.data.rst", "quapy.method.rst", "wiki/Datasets.rst", "wiki/Evaluation.rst", "wiki/ExplicitLossMinimization.rst", "wiki/Home.rst", "wiki/Methods.rst", "wiki/Model-Selection.rst", "wiki/Plotting.rst", "wiki/Protocols.rst"], "titles": ["Welcome to QuaPy\u2019s documentation!", "quapy", "quapy package", "quapy.classification package", "quapy.data package", "quapy.method package", "Datasets", "Evaluation", "Explicit Loss Minimization", "&lt;no title&gt;", "Quantification Methods", "Model Selection", "Plotting", "Protocols"], "terms": {"i": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13], "python": [0, 4, 6], "base": [0, 1, 2, 3, 6, 10], "open": [0, 2, 4, 6], "sourc": [0, 2, 3, 4, 5, 8, 10], "framework": [0, 5, 10], "quantif": [0, 2, 3, 4, 5, 6, 7, 8, 13], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "contain": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13], "api": [0, 5, 6, 10], "modul": [0, 1, 6, 7, 10, 12, 13], "includ": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13], "pip": [0, 5, 10], "host": [0, 6], "http": [0, 2, 4, 5, 6, 10], "com": [0, 2, 5, 6, 10], "hlt": 0, "isti": 0, "packag": [0, 1, 6, 8, 10], "subpackag": [0, 1], "classif": [0, 1, 2, 4, 5, 6, 7, 10], "submodul": [0, 1], "calibr": [0, 1, 2, 10], "bctscalibr": [0, 2, 3], "nbvscalibr": [0, 2, 3], "recalibratedprobabilisticclassifi": [0, 2, 3], "recalibratedprobabilisticclassifierbas": [0, 2, 3], "classes_": [0, 2, 3, 4, 5], "fit": [0, 1, 2, 3, 4, 5, 10, 11, 12, 13], "fit_cv": [0, 2, 3], "fit_tr_val": [0, 2, 3], "predict": [0, 1, 2, 3, 5, 7, 10, 12], "predict_proba": [0, 2, 3, 5, 10], "tscalibr": [0, 2, 3], "vscalibr": [0, 2, 3], "method": [0, 1, 2, 6, 7, 8, 9, 11, 12, 13], "lowranklogisticregress": [0, 2, 3], "get_param": [0, 1, 2, 3, 5, 10], "set_param": [0, 1, 2, 3, 5, 10], "transform": [0, 2, 3, 4, 5, 6], "neural": [0, 1, 2, 4, 5, 6], "cnnnet": [0, 2, 3, 5, 10], "document_embed": [0, 2, 3], "train": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "vocabulary_s": [0, 2, 3, 4, 5, 10], "lstmnet": [0, 2, 3], "neuralclassifiertrain": [0, 2, 3, 5, 10], "devic": [0, 2, 3, 5, 6, 10, 12], "reset_net_param": [0, 2, 3], "textclassifiernet": [0, 2, 3], "dimens": [0, 2, 3, 4, 5], "forward": [0, 2, 3, 5], "xavier_uniform": [0, 2, 3], "torchdataset": [0, 2, 3], "asdataload": [0, 2, 3], "svmperf": [0, 1, 2, 5, 8, 9, 10], "decision_funct": [0, 2, 3, 5], "valid_loss": [0, 2, 3, 5, 10], "data": [0, 1, 2, 3, 5, 10, 12], "dataset": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13], "splitstratifi": [0, 2, 4], "binari": [0, 2, 3, 4, 5, 10, 12], "kfcv": [0, 2, 3, 4, 6], "load": [0, 2, 4, 5, 6, 10, 13], "n_class": [0, 2, 3, 4, 5, 10, 13], "reduc": [0, 2, 4, 6, 7], "stat": [0, 2, 4], "train_test": [0, 2, 4, 10, 11, 12, 13], "labelledcollect": [0, 2, 4, 5, 6, 10, 13], "x": [0, 2, 3, 4, 5, 7, 10, 12], "xp": [0, 2, 4], "xy": [0, 2, 4], "count": [0, 2, 4, 5, 11, 12], "join": [0, 2, 4], "p": [0, 2, 3, 4, 5, 6, 10], "preval": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "sampl": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12], "sampling_from_index": [0, 2, 4, 6], "sampling_index": [0, 2, 4, 6], "split_random": [0, 2, 4], "split_stratifi": [0, 2, 4, 6, 11, 13], "uniform_sampl": [0, 2, 4], "uniform_sampling_index": [0, 2, 4], "y": [0, 2, 3, 4, 5, 12], "fetch_ifcb": [0, 2, 4, 6], "fetch_ucibinarydataset": [0, 2, 4, 6, 10], "fetch_ucibinarylabelledcollect": [0, 2, 4, 6], "fetch_ucimulticlassdataset": [0, 2, 4, 6], "fetch_ucimulticlasslabelledcollect": [0, 2, 4, 6], "fetch_lequa2022": [0, 2, 4, 6], "fetch_review": [0, 2, 4, 5, 6, 10, 11, 12, 13], "fetch_twitt": [0, 2, 4, 6, 10], "warn": [0, 2, 4, 5], "preprocess": [0, 1, 2, 5, 6, 10], "indextransform": [0, 2, 4], "add_word": [0, 2, 4], "fit_transform": [0, 2, 4, 5], "index": [0, 2, 3, 4, 5, 6, 10], "reduce_column": [0, 2, 4, 6], "standard": [0, 2, 3, 4, 5, 6, 10, 12, 13], "text2tfidf": [0, 2, 4, 6, 10], "reader": [0, 1, 2], "binar": [0, 2, 4], "from_csv": [0, 2, 4], "from_spars": [0, 2, 4], "from_text": [0, 2, 4], "reindex_label": [0, 2, 4], "aggreg": [0, 1, 2, 7, 11, 12, 13], "acc": [0, 1, 2, 5, 7, 10, 12, 13], "clip": [0, 1, 2, 5, 10], "solver": [0, 2, 5, 10], "aggregation_fit": [0, 2, 5, 10], "getptecondestim": [0, 2, 5], "newinvariantratioestim": [0, 2, 5], "adjustedclassifyandcount": [0, 2, 5], "aggregativecrispquantifi": [0, 2, 5, 10], "aggregativemedianestim": [0, 2, 5], "quantifi": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13], "aggregativequantifi": [0, 2, 5, 7, 10], "classifi": [0, 2, 3, 5, 6, 11, 12], "classifier_fit_predict": [0, 2, 5, 10], "val_split": [0, 2, 3, 5, 10], "val_split_": [0, 2, 5], "aggregativesoftquantifi": [0, 2, 5, 10], "bayesiancc": [0, 2, 5], "get_conditional_probability_sampl": [0, 2, 5], "get_prevalence_sampl": [0, 2, 5, 10], "sample_from_posterior": [0, 2, 5], "binaryaggregativequantifi": [0, 2, 5], "neg_label": [0, 2, 5], "pos_label": [0, 2, 5], "cc": [0, 2, 5, 10, 12], "classifyandcount": [0, 2, 5, 10], "dmy": [0, 2, 5, 10, 11], "distributionmatchingi": [0, 2, 5], "dy": [0, 2, 5, 10], "emq": [0, 2, 5, 12], "em": [0, 2, 5], "emq_bct": [0, 2, 5], "epsilon": [0, 2, 5, 7], "max_it": [0, 2, 5], "expectationmaximizationquantifi": [0, 2, 5, 10], "hdy": [0, 2, 5], "hellingerdistancei": [0, 2, 5, 10], "onevsallaggreg": [0, 2, 5, 10], "pacc": [0, 2, 5, 10, 12], "pcc": [0, 2, 5, 10, 12], "probabilisticadjustedclassifyandcount": [0, 2, 5], "probabilisticclassifyandcount": [0, 2, 5], "sld": [0, 2, 5, 10], "smm": [0, 2, 5, 10], "newelm": [0, 2, 5], "newsvma": [0, 2, 5, 10], "newsvmkld": [0, 2, 5, 10], "newsvmq": [0, 2, 5, 10], "newsvmra": [0, 2, 5, 10], "kdebas": [0, 2, 5], "bandwidth_method": [0, 2, 5], "get_kde_funct": [0, 2, 5], "get_mixture_compon": [0, 2, 5], "pdf": [0, 2, 5, 12], "kdeyc": [0, 2, 5], "gram_matrix_mix_sum": [0, 2, 5], "kdeyhd": [0, 2, 5], "kdeyml": [0, 2, 5], "quanetmodul": [0, 2, 5], "quanettrain": [0, 2, 5], "clean_checkpoint": [0, 2, 5], "clean_checkpoint_dir": [0, 2, 5], "mae_loss": [0, 2, 5], "max": [0, 2, 5, 6, 10], "condit": [0, 2, 5, 10, 13], "m": [0, 2, 5, 10], "ms2": [0, 2, 5, 10], "discard": [0, 2, 4, 5], "t50": [0, 2, 5, 10], "thresholdoptim": [0, 2, 5], "aggregate_with_threshold": [0, 2, 5], "basequantifi": [0, 2, 5, 10], "binaryquantifi": [0, 2, 5], "onevsal": [0, 2, 5, 10], "onevsallgener": [0, 2, 5, 10], "newonevsal": [0, 2, 5, 10], "meta": [0, 1, 2], "eacc": [0, 2, 5], "ecc": [0, 2, 5], "eemq": [0, 2, 5], "ehdi": [0, 2, 5], "epacc": [0, 2, 5], "ensembl": [0, 2, 4, 5, 6], "valid_polici": [0, 2, 5], "probabilist": [0, 2, 3, 5, 10], "medianestim": [0, 2, 5], "medianestimator2": [0, 2, 5], "ensemblefactori": [0, 2, 5], "get_probability_distribut": [0, 2, 5], "non_aggreg": [0, 1, 2], "dmx": [0, 2, 5], "hdx": [0, 2, 5], "distributionmatchingx": [0, 2, 5], "maximumlikelihoodprevalenceestim": [0, 2, 5], "readm": [0, 2, 5], "std_constrained_linear_l": [0, 2, 5], "error": [0, 1, 3, 5, 6, 10, 11], "absolute_error": [0, 1, 2], "acc_error": [0, 1, 2], "ae": [0, 1, 2, 8, 10, 12], "f1_error": [0, 1, 2], "f1e": [0, 1, 2, 7], "from_nam": [0, 1, 2, 7], "kld": [0, 1, 2, 3, 5, 8, 10], "mae": [0, 1, 2, 3, 5, 7, 11, 13], "mean_absolute_error": [0, 1, 2], "mean_normalized_absolute_error": [0, 1, 2], "mean_normalized_relative_absolute_error": [0, 1, 2], "mean_relative_absolute_error": [0, 1, 2], "mkld": [0, 1, 2, 5, 7], "mnae": [0, 1, 2, 5], "mnkld": [0, 1, 2, 5, 7], "mnrae": [0, 1, 2, 5], "mrae": [0, 1, 2, 3, 5, 7], "mse": [0, 1, 2, 5, 7, 10], "nae": [0, 1, 2], "nkld": [0, 1, 2, 3, 5, 8, 10], "normalized_absolute_error": [0, 1, 2], "normalized_relative_absolute_error": [0, 1, 2], "nrae": [0, 1, 2], "rae": [0, 1, 2, 7, 8, 10], "relative_absolute_error": [0, 1, 2], "se": [0, 1, 2], "smooth": [0, 1, 2, 5, 7, 10], "evalu": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13], "evaluate_on_sampl": [0, 1, 2], "evaluation_report": [0, 1, 2, 7], "function": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13], "hellingerdist": [0, 1, 2], "topsoedist": [0, 1, 2], "adjusted_quantif": [], "argmin_preval": [0, 1, 2], "as_binary_preval": [0, 1, 2], "check_prevalence_vector": [0, 1, 2], "clip_preval": [], "counts_from_label": [0, 1, 2], "get_diverg": [0, 1, 2], "get_nprevpoints_approxim": [0, 1, 2, 13], "linear_search": [0, 1, 2], "map_onto_probability_simplex": [], "normalize_preval": [0, 1, 2], "num_prevalence_combin": [0, 1, 2, 13], "optim_minim": [0, 1, 2, 5], "prevalence_from_label": [0, 1, 2], "prevalence_from_prob": [0, 1, 2], "prevalence_linspac": [0, 1, 2], "solve_adjust": [0, 1, 2], "strprev": [0, 1, 2, 6, 7], "uniform_prevalence_sampl": [0, 1, 2], "uniform_simplex_sampl": [0, 1, 2], "model_select": [0, 1, 5, 11, 13], "configstatu": [0, 1, 2], "fail": [0, 1, 2], "success": [0, 1, 2, 6], "gridsearchq": [0, 1, 2, 5, 11, 13], "best_model": [0, 1, 2], "statu": [0, 1, 2], "invalid": [0, 1, 2], "timeout": [0, 1, 2], "cross_val_predict": [0, 1, 2], "expand_grid": [0, 1, 2], "group_param": [0, 1, 2], "plot": [0, 1, 9], "binary_bias_bin": [0, 1, 2, 12], "binary_bias_glob": [0, 1, 2, 12], "binary_diagon": [0, 1, 2, 12], "brokenbar_supremacy_by_drift": [0, 1, 2], "error_by_drift": [0, 1, 2, 12], "protocol": [0, 1, 4, 5, 6, 9, 10, 11, 12], "app": [0, 1, 2, 5, 11, 12, 13], "prevalence_grid": [0, 1, 2], "samples_paramet": [0, 1, 2], "total": [0, 1, 2, 6, 13], "abstractprotocol": [0, 1, 2, 4, 13], "abstractstochasticseededprotocol": [0, 1, 2, 13], "collat": [0, 1, 2], "random_st": [0, 1, 2, 4, 5, 12, 13], "artificialprevalenceprotocol": [0, 1, 2], "domainmix": [0, 1, 2], "iterateprotocol": [0, 1, 2], "npp": [0, 1, 2, 13], "naturalprevalenceprotocol": [0, 1, 2], "onlabelledcollectionprotocol": [0, 1, 2, 7, 13], "return_typ": [0, 1, 2, 13], "get_col": [0, 1, 2], "get_labelled_collect": [0, 1, 2], "on_preclassified_inst": [0, 1, 2], "upp": [0, 1, 2], "uniformprevalenceprotocol": [0, 1, 2], "util": [0, 1, 3, 4], "earlystop": [0, 1, 2], "create_if_not_exist": [0, 1, 2], "create_parent_dir": [0, 1, 2], "download_fil": [0, 1, 2], "download_file_if_not_exist": [0, 1, 2], "get_quapy_hom": [0, 1, 2], "map_parallel": [0, 1, 2], "parallel": [0, 1, 2, 3, 4, 5, 10, 11], "parallel_unpack": [0, 1, 2], "pickled_resourc": [0, 1, 2], "save_text_fil": [0, 1, 2], "temp_se": [0, 1, 2], "search": [0, 2, 5, 11], "page": [0, 6], "content": 1, "implement": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "measur": [2, 5, 8, 10, 11, 12], "us": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "prev": [2, 4, 6, 7, 13], "prevs_hat": [2, 7], "comput": [2, 5, 7, 10, 12, 13], "absolut": [2, 5, 7, 10, 12], "between": [2, 3, 5, 12], "two": [2, 4, 5, 6, 10, 12, 13], "vector": [2, 3, 4, 5, 6, 10, 13], "hat": [2, 5], "frac": [2, 5], "1": [2, 3, 4, 5, 6, 7, 11, 12, 13], "mathcal": [2, 5], "sum_": [2, 5], "where": [2, 3, 4, 5, 10, 12], "ar": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "class": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "interest": [2, 7, 12, 13], "paramet": [2, 3, 4, 5, 7, 10, 11, 13], "arrai": [2, 3, 4, 5, 10, 12], "like": [2, 3, 4, 5, 6, 7, 10, 12, 13], "shape": [2, 3, 4, 5, 12], "true": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "valu": [2, 3, 4, 5, 6, 7, 10, 11, 13], "return": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "y_true": 2, "y_pred": 2, "term": [2, 3, 4, 5, 6, 10, 11, 12], "accuraci": [2, 5, 6, 7, 12], "The": [2, 3, 4, 5, 6, 7, 8, 11, 12, 13], "tp": 2, "tn": 2, "fp": 2, "fn": 2, "stand": [2, 5, 10], "posit": [2, 4, 5, 6, 10, 12], "fals": [2, 3, 4, 5, 6, 7, 10, 12], "neg": [2, 5, 6, 12], "respect": [2, 5, 6, 7, 12], "label": [2, 3, 4, 5, 6, 10, 11, 12, 13], "f1": [2, 3], "simpli": [2, 5, 7, 8, 10, 11, 12], "macro": 2, "f_1": 2, "e": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "harmon": 2, "mean": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "precis": [2, 6], "recal": 2, "defin": [2, 3, 4, 5, 6, 10, 13], "2tp": 2, "averag": [2, 4, 5, 6, 7, 10], "each": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "categori": 2, "independ": [2, 5], "err_nam": 2, "get": [2, 3, 4, 5, 6, 12, 13], "an": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13], "from": [2, 3, 4, 5, 6, 7, 10, 11, 12], "its": [2, 3, 5, 10, 11, 13], "name": [2, 3, 4, 5, 10, 12], "g": [2, 4, 5, 6, 7, 10, 11, 13], "string": [2, 4, 5, 7], "callabl": [2, 4, 5, 6], "request": [2, 4, 5, 6, 11], "ep": [2, 7], "none": [2, 3, 4, 5, 7, 10, 11, 13], "kullback": [2, 5, 10], "leibler": [2, 5, 10], "diverg": [2, 5, 10], "distribut": [2, 4, 5, 6, 7, 10, 12, 13], "d_": 2, "kl": 2, "log": [2, 4, 5], "factor": 2, "see": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13], "case": [2, 3, 4, 5, 6, 7, 10, 12, 13], "which": [2, 3, 4, 5, 6, 7, 10, 11, 12], "zero": [2, 6], "typic": [2, 3, 4, 5, 7, 10, 11, 12, 13], "set": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "2t": [2, 7], "t": [2, 3, 5, 6, 7], "size": [2, 3, 4, 5, 6, 7, 10], "If": [2, 4, 5, 10, 12], "taken": [2, 3, 4, 5, 10], "environ": [2, 5, 7, 10, 11, 12, 13], "variabl": [2, 4, 7, 10, 12], "sample_s": [2, 5, 6, 7, 10, 11, 12, 13], "ha": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "thu": [2, 3, 5, 6, 7, 10, 11, 12], "beforehand": 2, "across": [2, 5, 6, 7, 12], "pair": [2, 6], "n_sampl": [2, 3], "normal": [0, 2, 4, 5, 6, 10], "rel": [2, 4, 5, 7, 10], "squar": [2, 5, 10], "z_": 2, "2": [2, 4, 5, 6, 7, 10, 11, 12, 13], "min_": [2, 5], "math": [2, 5, 10], "2frac": 2, "underlin": 2, "displaystyl": 2, "model": [0, 2, 3, 4, 5, 6, 7, 9, 12, 13], "error_metr": [2, 7, 11, 13], "union": [2, 4, 5], "str": [2, 4, 5, 6], "aggr_speedup": [2, 7], "bool": [2, 3, 5], "auto": [2, 7], "verbos": [2, 3, 4, 5, 6, 11], "accord": [2, 3, 4, 5, 11], "specif": [2, 5, 7, 10, 11, 13], "gener": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "one": [2, 4, 5, 6, 7, 8, 10, 11, 12, 13], "metric": [2, 5, 10, 11], "instanc": [2, 3, 4, 5, 6, 7, 10, 12, 13], "object": [2, 3, 4, 5, 6, 13], "also": [2, 3, 5, 6, 7, 8, 10, 11, 12, 13], "speed": [2, 5, 7, 10], "up": [2, 3, 5, 7, 10], "can": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13], "run": [2, 4, 5, 6, 8, 10, 12], "charg": [2, 4, 6], "repres": [2, 4, 5, 10, 12], "": [2, 3, 4, 5, 6, 7, 10, 11, 12], "qp": [2, 4, 5, 6, 7, 10, 11, 12, 13], "itself": [2, 5, 10], "whether": [2, 3, 4, 5], "appli": [2, 3, 4, 5, 7, 8, 10, 11, 12], "forc": [2, 7], "even": 2, "number": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "origin": [2, 4, 5, 6, 7, 10, 13], "collect": [2, 3, 4, 5, 6, 13], "act": 2, "larger": [2, 5], "than": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "default": [2, 3, 4, 5, 10, 13], "let": [2, 5, 7, 10, 11], "decid": [2, 4, 13], "conveni": [2, 7, 10, 13], "deactiv": [2, 7], "boolean": [2, 4, 5], "show": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13], "inform": [0, 2, 3, 4, 5, 6, 10, 11, 13], "stdout": 2, "score": [2, 3, 4, 5, 6, 10, 11], "singl": [2, 5, 6, 7, 10, 13], "float": [2, 3, 4, 5, 6, 10], "iter": [2, 4, 5, 6], "given": [2, 3, 4, 5, 7, 10, 11, 13], "list": [2, 3, 4, 5, 6, 12], "report": [2, 5, 7], "panda": [2, 7], "datafram": [2, 7], "more": [2, 4, 5, 6, 7, 8, 10, 12, 13], "column": [2, 4, 6, 7], "estim": [2, 3, 4, 5, 6, 7, 12], "mani": [2, 5, 6, 7, 10, 11, 12, 13], "have": [2, 4, 5, 6, 7, 10, 11, 12, 13], "been": [2, 3, 4, 5, 6, 10, 11, 12, 13], "indic": [2, 3, 4, 5, 6, 7, 10, 12, 13], "displai": [2, 3, 6, 7, 12, 13], "everi": [2, 5, 6, 7, 10, 11, 13], "via": [2, 3, 5, 10, 13], "central": 2, "all": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13], "process": [2, 4, 7, 10, 11], "endow": 2, "optim": [2, 3, 5, 7, 8, 11], "larg": 2, "onli": [2, 3, 4, 5, 6, 7, 10, 12], "come": [2, 4, 5, 6, 7, 10, 13], "down": [2, 4, 5, 7, 12, 13], "onc": [2, 4, 6, 7, 10, 11, 12, 13], "over": [2, 5, 10, 11], "instead": [2, 4, 5, 6, 7, 10, 13], "raw": [2, 4, 6], "so": [2, 3, 4, 5, 6, 10, 12, 13], "never": [2, 13], "call": [2, 4, 5, 6, 7, 10, 12, 13], "again": [2, 12], "behaviour": [2, 7, 10, 13], "obtain": [2, 3, 5, 13], "carri": [2, 4, 5, 6, 7, 10], "out": [2, 3, 4, 5, 6, 7, 10, 11, 12], "overal": 2, "need": [2, 4, 5, 6, 10, 13], "exce": 2, "undertaken": 2, "issu": [2, 5], "tupl": [2, 4, 5, 13], "true_prev": [2, 7, 12], "estim_prev": [2, 7, 12], "element": [2, 4, 5, 10], "ndarrai": [2, 4, 5, 7, 10], "q": [2, 3, 5, 6, 8, 10], "hellingh": 2, "distanc": [2, 5], "hd": [2, 5, 10], "discret": [2, 5], "k": [2, 3, 4, 5, 10], "bin": [2, 5, 11, 12], "sqrt": [2, 5], "p_i": 2, "q_i": 2, "real": [2, 3, 4, 5], "1e": [2, 3, 5], "20": [2, 5, 7, 10, 12], "topso": [2, 5], "left": [2, 4, 5], "right": [2, 4, 5, 11], "prevalence_estim": 2, "_supportsarrai": 2, "dtype": [2, 4, 7], "_nestedsequ": 2, "int": [2, 4, 5, 6, 12], "complex": 2, "byte": 2, "tpr": [2, 5], "fpr": [2, 5], "adjust": [2, 5, 10], "rate": [2, 3, 5, 10], "might": [2, 4, 7], "rang": [2, 5, 10, 11, 12, 13], "0": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "loss": [0, 2, 3, 5], "liter": [2, 5], "ternary_search": [0, 1, 2], "minim": [0, 2, 5], "strategi": [2, 10, 11], "possibl": [2, 5, 7, 10, 13], "scipi": [2, 4, 5], "linear": [2, 5, 10, 12], "problem": [2, 4, 5, 6, 10, 12], "space": [2, 3, 5, 11], "01": [2, 3, 5, 10, 11], "02": 2, "ternari": [2, 5], "yet": [2, 13], "np": [2, 4, 5, 7, 10, 11, 12, 13], "positive_preval": 2, "clip_if_necessari": 2, "helper": 2, "order": [2, 4, 5, 6, 10, 11, 12, 13], "guarante": [2, 4, 5, 10, 13], "result": [2, 5, 7, 8, 10, 12], "valid": [2, 3, 4, 5, 6, 10, 11, 12, 13], "check": [2, 5, 10], "rais": [2, 5, 10], "raise_except": 2, "toleranz": [], "08": 2, "sum": [2, 5], "otherwis": [2, 4, 5, 6, 10], "project": [2, 5, 10], "proport": [2, 3, 4, 5, 10], "probabl": [2, 3, 5, 6, 7, 10, 11, 12, 13], "perform": [2, 3, 5, 6, 7, 10, 11, 12, 13], "thei": [2, 5, 6, 10], "onto": [2, 5], "simplex": [2, 5, 10], "n_instanc": [2, 3, 5], "correctli": 2, "when": [2, 3, 4, 5, 6, 7, 10, 12, 13], "some": [2, 4, 5, 6, 7, 10, 12, 13], "exampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13], "len": 2, "occurr": 4, "receiv": [2, 6, 10, 12], "argument": [2, 4, 5, 6, 7, 10, 12, 13], "That": [2, 7, 11], "alreadi": [2, 4, 7, 10], "tri": [2, 5], "instanti": [2, 3, 5, 6, 7, 10, 11, 13], "correspond": [2, 4, 5, 6, 7, 12], "combinations_budget": 2, "n_repeat": [2, 13], "largest": 2, "equidist": 2, "point": [2, 4, 5, 10, 13], "combin": [2, 5, 10, 11, 13], "dimension": [2, 3, 4, 5], "do": [2, 3, 4, 5, 6, 7, 10, 11], "integ": [2, 3, 4, 5, 10], "maximum": [2, 3, 4, 5, 6, 10, 13], "allow": [2, 3, 4, 5, 6, 8, 10, 12, 13], "repetit": 2, "less": [2, 4, 5], "best": [2, 3, 5, 11], "explor": [2, 10, 11], "step": [2, 5, 10, 12], "ineffici": 2, "ad": [2, 5, 13], "complet": [2, 5, 10, 12], "earli": [2, 3, 5], "literatur": [2, 6, 7, 11, 13], "A": [2, 3, 4, 5, 6, 7, 10], "most": [2, 4, 5, 6, 7, 10, 12, 13], "power": 2, "altern": [2, 5, 7, 11], "found": [2, 3, 4, 5, 6, 10], "unnormalized_arr": 2, "code": [2, 3, 6, 7, 8, 10, 11, 12, 13], "adapt": [2, 3], "mathieu": [2, 5, 10], "blondel": [2, 5, 10], "bsd": 2, "licens": 2, "accompani": 2, "paper": [2, 3, 5, 6, 10], "akinori": 2, "fujino": 2, "naonori": 2, "ueda": 2, "scale": [2, 3, 5, 10], "multiclass": [2, 4, 5, 10, 13], "support": [2, 4, 5, 10], "machin": [2, 3, 7, 10, 11], "euclidean": [2, 5], "icpr": 2, "2014": 2, "url": 2, "n": [2, 3, 5, 6, 13], "v": [2, 3, 5, 10], "matrix": [2, 5, 10, 12], "consist": [2, 3, 4, 5, 6, 11, 12, 13], "l1": [2, 5, 10], "convert": [2, 3, 4, 5, 10], "n_prevpoint": [2, 13], "equal": [2, 5, 13], "distant": [2, 13], "calcul": [2, 5], "binom": 2, "c": [2, 3, 4, 5, 10, 11], "time": [2, 4, 5, 6, 7, 10, 13], "r": [2, 4, 5, 6, 10], "mass": 2, "block": [2, 6], "alloc": [2, 3], "solut": [2, 5, 10], "star": 2, "bar": 2, "For": [2, 4, 5, 6, 7, 11, 12, 13], "5": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "25": [2, 3, 5, 10, 12], "75": [2, 5, 11, 12, 13], "50": [2, 5, 6, 12], "yield": [2, 4, 5, 12, 13], "smallest": 2, "lost": 2, "constrain": [2, 4, 12, 13], "slsqp": 2, "routin": [2, 4, 5, 10], "posterior": [2, 3, 5, 10], "crisp": [2, 5, 7, 10], "decis": [2, 3, 5], "take": [2, 4, 5, 6, 10, 12, 13], "argmax": 2, "grid_point": 2, "21": [2, 10, 12, 13], "repeat": [2, 12, 13], "smooth_limits_epsilon": 2, "produc": [2, 6, 7, 12, 13], "uniformli": [2, 13], "separ": [2, 4], "By": [2, 10], "05": [2, 5, 12], "limit": [2, 5, 12, 13], "10": [2, 3, 5, 6, 11, 12, 13], "15": [2, 4, 10], "90": [2, 12], "95": 2, "99": 2, "interv": [2, 12, 13], "quantiti": [2, 10], "add": [2, 4, 5, 10, 11], "subtract": [2, 4, 6], "p_c_cond_i": [], "p_c": 5, "invers": [2, 5, 10], "invari": [2, 5, 10], "ratio": [2, 5, 10], "exact": [2, 4, 5, 6, 10, 13], "solv": [2, 5, 10, 11], "equat": [2, 5, 10], "misclassif": 5, "entri": [2, 5, 6, 7], "being": [2, 5, 7, 11, 13], "belong": [2, 5, 10, 11], "end": [2, 5, 11], "option": [2, 4, 5, 6, 10, 12], "mai": [2, 10], "exist": [2, 10, 13], "degener": [2, 10], "vaz": [2, 5, 10], "et": [2, 3, 4, 5, 6, 8, 10], "al": [2, 3, 4, 5, 6, 8, 10], "replac": [2, 4, 5, 6, 10], "last": [2, 3, 4, 5, 10, 12, 13], "system": [2, 5, 7, 10, 11], "rank": [2, 3, 5, 10], "strictli": [2, 5], "full": [2, 4, 5, 13], "deprec": [2, 5, 13], "alwai": [2, 5, 10, 12], "prec": [2, 6], "3": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "represent": [2, 3, 5, 6, 10], "33": [2, 6, 12], "67": [2, 12], "kraemer": [2, 13], "algorithm": [2, 5, 6, 13], "random": [2, 4, 5, 10, 12, 13], "unit": [2, 5, 6], "post": 2, "stackexchang": 2, "question": 2, "3227": 2, "uniform": [2, 4, 5], "_": [2, 4, 5, 6, 12], "param": [2, 3, 5, 11], "msg": 2, "param_grid": [2, 5, 11, 13], "dict": [2, 4, 5], "type": [2, 4, 5, 6, 10], "refit": [2, 11], "n_job": [2, 3, 4, 5, 10, 11, 13], "raise_error": 2, "grid": [2, 5, 11, 13], "target": [2, 3, 5, 10, 12], "orient": [2, 5, 8, 10], "hyperparamet": [2, 5, 10, 13], "dictionari": [2, 3, 4, 5], "kei": [2, 4], "ones": [2, 4, 5, 7, 12], "those": [2, 3, 5, 7, 10, 11, 12], "quantification_error": 2, "whole": [2, 3, 6, 10, 11], "chosen": [2, 7, 11], "ignor": [2, 4, 5, 6], "gen": 2, "establish": 2, "timer": 2, "second": [2, 4, 5, 6, 7, 10, 12], "configur": [2, 5, 11], "test": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "whenev": [2, 12], "longer": [2, 5], "timeouterror": 2, "except": [2, 5, 10], "bound": [2, 5], "ani": [2, 3, 4, 5, 6, 10, 11, 12, 13], "mark": [2, 11], "goe": [2, 11], "howev": [2, 6, 11, 12], "valueerror": 2, "through": [2, 5, 10], "after": [2, 5, 10], "hyper": [2, 3, 5, 11], "learn": [2, 3, 4, 5, 7, 10, 11], "select": [0, 2, 4, 5, 6, 7, 9, 10, 13], "self": [2, 3, 4, 5, 10, 11], "deep": [2, 5, 10], "unus": [2, 3, 10], "contanin": 2, "enum": 2, "enumer": 2, "4": [2, 4, 6, 7, 10, 11, 12, 13], "nfold": [2, 4, 6], "akin": [2, 5], "scikit": [2, 3, 4, 5, 10, 11], "fold": [2, 4, 5, 10], "cross": [2, 3, 4, 5, 10], "seed": [2, 4, 5, 13], "reproduc": [2, 4], "expand": 2, "100": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "b": [2, 4, 5, 6, 10], "print": [2, 3, 4, 6, 7, 10, 11, 13], "assign": [2, 4, 10], "partit": [2, 3, 6], "anoth": [2, 5, 6, 7, 12, 13], "que": 2, "method_nam": [2, 5, 12], "pos_class": [2, 4], "titl": 2, "nbin": [2, 5, 11, 12], "colormap": 2, "matplotlib": 2, "color": [2, 12], "listedcolormap": 2, "vertical_xtick": 2, "legend": 2, "savepath": [2, 12], "box": [2, 10, 12], "local": 2, "bia": [2, 3, 5, 10], "sign": 2, "minu": 2, "differ": [0, 2, 4, 5, 6, 10, 11, 12, 13], "classs": 2, "experi": [2, 4, 6, 10, 12], "compon": [2, 3, 5], "cm": 2, "tab10": 2, "secondari": 2, "path": [2, 3, 4, 5, 6, 10, 12], "save": [2, 4, 10, 12], "shown": [2, 12], "global": 2, "show_std": [2, 12], "train_prev": [2, 12], "method_ord": 2, "diagon": 2, "along": [2, 5, 6, 7, 10], "axi": [2, 5, 12], "describ": [2, 5, 10], "henc": [2, 4, 5], "It": [2, 4, 5, 6, 7, 10, 11, 12], "though": [2, 10], "other": [2, 4, 5, 6, 7, 10, 12], "prefer": [2, 5, 7, 13], "deviat": [2, 4, 6, 12, 13], "band": [2, 12], "inconveni": 2, "compar": [2, 12], "high": [2, 5, 12], "leyend": 2, "hightlight": 2, "conduct": [2, 6], "same": [2, 4, 5, 6, 10, 11, 12, 13], "impos": [2, 11], "associ": 2, "tr_prev": [2, 5, 12], "n_bin": [2, 5, 12], "isomer": 2, "x_error": 2, "y_error": 2, "ttest_alpha": 2, "005": 2, "tail_density_threshold": 2, "top": [2, 5, 10], "region": 2, "shift": [2, 3, 5, 7, 10, 11, 13], "form": [2, 4, 5, 6, 10], "broken": [2, 12], "chart": 2, "either": [2, 5, 7, 10], "follow": [2, 4, 5, 6, 7, 10, 11, 12, 13], "hold": [2, 5], "ii": 2, "statist": [2, 5, 6, 13], "significantli": 2, "side": 2, "confid": [2, 10], "made": [2, 4, 5, 6, 8], "isometr": [2, 12], "percentil": 2, "divid": 2, "amount": [2, 5, 7, 10, 13], "abov": [2, 6, 8, 10, 12], "consid": [2, 3, 4, 5, 10, 12, 13], "involv": [2, 12], "similar": [2, 5], "threshold": [2, 5], "densiti": [2, 5], "below": [2, 4, 6, 10, 12], "tail": 2, "avoid": [2, 10], "outlier": 2, "error_nam": [2, 12], "show_dens": 2, "show_legend": 2, "logscal": 2, "vline": 2, "especi": 2, "cumberson": 2, "gain": 2, "understand": 2, "about": [2, 4, 5, 6, 10, 12], "how": [2, 4, 5, 6, 10, 11, 12], "fare": 2, "prior": [2, 5, 7, 10, 11, 12, 13], "spectrum": [2, 12, 13], "low": [2, 3, 11, 12], "regim": 2, "highlight": 2, "vertic": 2, "dot": [2, 12], "line": [2, 10], "n_preval": [2, 13], "sanity_check": 2, "10000": [2, 5], "sample_prev": [2, 13], "artifici": [2, 10, 11, 12], "drawn": [2, 4, 6, 13], "extract": [2, 4, 5], "copi": [2, 4], "replic": [2, 13], "sequenc": [2, 13], "user": [2, 6, 12, 13], "skip": 2, "labelled_collect": [2, 13], "exhaust": 2, "depend": [2, 5, 6, 10, 11, 12], "11": [2, 6, 13], "9": [2, 6, 12], "implicit": 2, "return_constrained_dim": 2, "rest": [2, 3, 4], "note": [2, 4, 5, 7, 10, 12, 13], "quit": 2, "obvious": 2, "doe": [2, 5, 6, 8, 10], "determinist": 2, "anywher": 2, "multipli": 2, "realiz": [2, 5], "necessari": [2, 5], "abstract": [2, 3, 4, 5, 10], "parent": 2, "known": [2, 5, 6, 10, 11], "procedur": [2, 7, 10], "enforc": 2, "fulli": [2, 6], "In": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13], "make": [2, 5, 6, 8, 10], "extend": [2, 5, 8, 10], "input": [2, 3, 4, 5, 10, 12], "arg": [2, 3, 4, 5], "prepar": 2, "accommod": [2, 6], "desir": [2, 4, 6, 7, 10, 13], "output": [2, 3, 4, 5, 6, 7, 10, 11, 13], "format": [2, 4, 5, 6, 12], "befor": [2, 3, 4, 5], "inherit": [2, 10, 13], "custom": [2, 4, 10, 13], "addit": [2, 10], "adher": 2, "properti": [2, 3, 4, 5, 10], "determin": [2, 11, 12, 13], "serv": [2, 4, 10], "alia": [2, 4, 5, 10], "domaina": 2, "domainb": 2, "mixture_point": 2, "mixtur": [2, 5, 10], "domain": 2, "control": [2, 5, 13], "preserv": [2, 4, 12], "draw": [2, 5], "specifi": [2, 3, 4, 5, 6, 10, 12, 13], "should": [2, 3, 4, 5, 6, 10, 11, 12], "zip": [2, 6, 12], "veri": [2, 6, 10, 12], "simpl": [2, 5, 6, 10, 12], "previous": [2, 5], "natur": 2, "therefor": 2, "approxim": [2, 3, 5, 10, 12], "classmethod": [2, 4, 5, 6], "pre_classif": 2, "in_plac": 2, "modifi": [2, 10], "version": [2, 3, 8], "pre": [2, 6, 10], "advanc": [2, 6, 11, 13], "hard": [2, 3, 5, 10], "modif": 2, "place": [2, 4], "new": [2, 4, 6, 13], "variant": [2, 5, 12], "reli": [2, 5, 10, 13], "cover": [2, 3, 13], "entir": [2, 6, 7, 10, 11, 12, 13], "sens": 2, "unlik": [2, 7], "endeavour": 2, "intract": 2, "patienc": [2, 3, 5], "lower_is_bett": 2, "stop": [2, 3, 5], "network": [2, 3, 4, 5, 6], "epoch": [2, 3, 5], "7": [2, 3, 5, 6, 10, 11, 12, 13], "improv": [2, 3, 5, 10], "best_epoch": 2, "best_scor": 2, "consecut": [2, 3, 4, 5], "monitor": 2, "obtaind": 2, "held": [2, 3, 5, 10, 11], "split": [2, 3, 4, 5, 6, 10, 12], "wors": [2, 12], "far": [2, 3, 4], "flag": 2, "keep": [2, 4], "track": 2, "seen": [2, 5, 12], "wa": [2, 4, 5, 6, 10, 12, 13], "o": [2, 6], "makedir": 2, "exist_ok": 2, "dir": [2, 5], "subdir": 2, "anotherdir": 2, "creat": [2, 5, 6], "file": [2, 3, 4, 5, 6, 12], "txt": 2, "archive_filenam": 2, "download": [2, 4, 6, 8, 10], "destin": 2, "filenam": 2, "dowload": 2, "home": [2, 4], "directori": [2, 3, 4, 5, 8], "perman": 2, "quapy_data": [2, 6], "func": 2, "slice": 2, "item": [2, 5], "work": [2, 4, 5, 10, 12, 13], "pass": [2, 3, 5, 6, 7, 12], "worker": [2, 3, 4, 5], "asarrai": [2, 7], "backend": [2, 5], "loki": [2, 5], "wrapper": [2, 3, 4, 5], "multiprocess": [2, 5], "delai": 2, "args_i": 2, "silent": [2, 5], "child": 2, "ensur": [2, 5], "numer": [2, 4, 5, 6, 7, 10], "handl": [2, 6], "open_arg": 2, "pickle_path": 2, "generation_func": 2, "fast": [2, 4, 6], "reus": [2, 4, 6, 10], "resourc": 2, "next": [2, 3, 4, 11], "invok": [2, 4, 6, 10, 13], "pickl": [2, 4, 5, 10], "def": [2, 6, 7, 10, 12], "some_arrai": 2, "mock": [2, 3], "rand": 2, "my_arrai": 2, "pkl": 2, "first": [2, 4, 5, 6, 7, 8, 10, 12], "text": [2, 3, 4, 5, 6, 10], "disk": [2, 4], "miss": 2, "context": 2, "tempor": [2, 3], "without": [2, 10], "outer": 2, "numpi": [2, 3, 5, 11, 13], "current": [2, 3, 4, 5, 10], "state": [2, 5], "random_se": 2, "within": [2, 5], "launch": 2, "close": [2, 4, 5, 10, 13], "start_msg": 2, "end_msg": 2, "sleep": 2, "begin": 2, "correct": [3, 5, 10], "temperatur": [3, 5, 10], "bct": [3, 5], "abstent": 3, "alexandari": [3, 5, 10], "stratifi": [3, 4, 5, 6, 10], "retrain": [3, 11], "afterward": [3, 5], "No": [3, 5], "nbv": [3, 5], "re": [3, 4, 10, 11], "kundaj": 3, "shrikumar": 3, "2020": [3, 10], "novemb": 3, "likelihood": [3, 5, 10], "beat": [3, 5], "intern": [3, 4, 5, 6, 7, 10], "confer": [3, 4, 6, 10], "pp": [3, 6, 10, 11], "222": [3, 6], "232": 3, "pmlr": 3, "baseestim": [3, 5, 10], "calibratorfactori": 3, "n_featur": [3, 5], "manner": [3, 5, 6], "val": [3, 4, 6, 13], "These": [3, 5, 6, 7, 8, 10, 13], "n_compon": 3, "kwarg": [3, 4, 5], "embed": [3, 5, 10], "requir": [3, 4, 5, 6, 7, 8, 10, 13], "quanet": [3, 5], "easili": [3, 6, 12], "sklearn": [3, 4, 5, 10, 11, 12, 13], "decomposit": 3, "truncatedsvd": 3, "while": [3, 4, 5, 6, 10, 12], "linear_model": [3, 5, 10, 11, 13], "logisticregress": [3, 5, 10, 11, 13], "princip": 3, "retain": [3, 5, 6, 10], "logist": [3, 5, 10], "regress": [3, 5], "map": [2, 3, 5, 7], "length": [3, 4], "eventu": [3, 4], "unalt": 3, "emb": 3, "embedding_s": 3, "hidden_s": 3, "256": [3, 6], "repr_siz": 3, "kernel_height": 3, "stride": 3, "pad": [3, 4], "drop_p": 3, "convolut": 3, "vocabulari": [3, 4], "word": [2, 3, 4, 5, 7, 10], "hidden": [3, 5, 12], "document": [3, 4, 5, 6, 10, 12], "kernel": [0, 2, 3, 5], "token": [3, 4, 6], "drop": 3, "dropout": [3, 5], "layer": [3, 5, 10], "batch": 3, "torch": [3, 5, 10], "dataload": 3, "tensor": 3, "n_dimens": [3, 5], "lstm_class_nlay": 3, "long": [3, 11], "short": 3, "memori": 3, "lstm": [3, 5, 10], "net": 3, "lr": [3, 5, 10], "001": [3, 5, 11], "weight_decai": 3, "200": [3, 6, 7], "batch_siz": 3, "64": [3, 5, 11], "batch_size_test": 3, "512": [3, 5, 6], "padding_length": 3, "300": [3, 6, 7], "cuda": [3, 5, 10], "checkpointpath": 3, "checkpoint": [3, 5], "classifier_net": 3, "dat": [3, 6], "weight": [3, 4, 5], "decai": 3, "wait": 3, "cpu": [3, 5], "enabl": 3, "gpu": [3, 5], "store": [3, 4, 5, 6], "vocab_s": 3, "reiniti": 3, "trainer": 3, "learner": [3, 5, 10, 11], "disjoint": 3, "embed_s": 3, "nn": 3, "pad_length": 3, "xavier": 3, "initi": [3, 5, 6], "shuffl": [3, 4], "dynam": [3, 4, 5, 10], "longest": 3, "shorter": 3, "svmperf_bas": [3, 5], "host_fold": 3, "classifiermixin": [3, 5], "svm": [3, 4, 5, 8, 10, 12], "perf": [3, 5, 8], "thorsten": 3, "joachim": [3, 5, 10], "patch": [3, 5, 8, 10], "instal": [3, 5, 6, 10], "further": [3, 4, 5, 6, 10], "detail": [3, 4, 5, 6, 7, 8, 10], "refer": [3, 4, 6], "esuli": [3, 4, 5, 6, 8, 10], "2015": [3, 5, 6, 8, 10], "barranquero": [3, 5, 8, 10], "svm_perf_learn": 3, "svm_perf_classifi": 3, "trade": [3, 5], "off": [3, 5], "margin": [3, 5], "std": 3, "avail": [3, 4, 5, 6, 7, 8, 10, 12], "qacc": 3, "qf1": 3, "qgm": 3, "tmp": 3, "automat": [3, 6], "delet": 3, "multivari": [3, 10], "12": 3, "26": [3, 6], "27": [3, 10], "13": [3, 6], "22": [3, 4, 6, 10], "23": [3, 10], "24": [3, 6, 7], "textual": [4, 6], "train_siz": 4, "6": [4, 6, 7, 10, 12], "conform": 4, "nrepeat": [4, 6], "around": [4, 5, 10, 13], "round": 4, "train_path": [4, 6], "test_path": [4, 6], "loader_func": [4, 6], "loader_kwarg": 4, "read": 4, "must": [2, 4, 5, 10], "loader": [4, 6], "n_train": 4, "n_test": 4, "quick": 4, "kindl": [4, 5, 6, 10, 12], "tfidf": [4, 6, 11, 12, 13], "min_df": [4, 5, 10, 11, 12, 13], "tr": 4, "3821": [4, 6], "te": 4, "21591": [4, 6], "spars": [4, 6], "csr": 4, "csr_matrix": 4, "featur": [4, 5, 6], "4403": 4, "081": [4, 6], "919": [4, 6], "063": [4, 6], "937": [4, 6], "dedic": [4, 5, 6, 7], "attach": 4, "them": [4, 5, 6, 10], "sever": [4, 6, 8], "infer": [4, 6, 10], "linearsvc": [4, 10, 12], "my_collect": 4, "codefram": 4, "both": [4, 5, 12], "frequenc": [4, 5, 6], "actual": 5, "lead": 4, "empti": 4, "sinc": [4, 5, 6, 7, 10, 11, 12, 13], "met": 4, "whose": [4, 5], "train_prop": [4, 11, 13], "randomli": [4, 6], "stratif": [4, 5], "greater": 6, "single_sample_train": [4, 6], "for_model_select": [4, 6], "data_hom": 4, "ifcb": 4, "zenodo": [4, 6], "pleas": [4, 10], "link": 4, "publicli": [4, 6], "whoi": [4, 6], "plankton": 4, "repo": [2, 4, 6], "script": [4, 5, 6, 8, 10], "gonz\u00e1lez": [4, 5, 6, 10], "basic": [5, 12], "precomput": [6, 7], "togeth": [4, 5], "individu": [4, 10], "30": [4, 5, 6, 10, 11, 13], "86": [4, 6], "286": 4, "dump": 4, "leav": [2, 4], "quay_data": 4, "test_gen": [4, 6], "_ifcb": 4, "ifcbtrainsamplesfromdir": 4, "seri": [4, 6, 11], "ifcbtestsampl": 4, "dataset_nam": 4, "test_split": [4, 6], "uci": 4, "p\u00e9rez": [4, 5, 6, 10], "g\u00e1llego": [4, 5, 6, 10], "quevedo": [4, 6, 10], "j": [2, 4, 5, 6, 10], "del": [4, 6, 10], "coz": [4, 6, 10], "2017": [4, 5, 6, 10], "characteriz": [4, 6, 10], "chang": [4, 6, 7, 10], "studi": [4, 6, 10], "fusion": [4, 6, 10], "34": [4, 5, 6, 10], "87": [4, 6, 10], "castano": [4, 10], "2019": [4, 5, 10], "task": [4, 6, 10, 11], "45": [4, 10, 12], "predefin": 4, "fetch_ucilabelledcollect": 4, "access": [4, 5, 6, 10], "uci_dataset": 4, "ml": [4, 5, 10], "repositori": [4, 6], "adopt": [4, 10, 11], "5fcvx2": 4, "x2": 4, "import": [4, 5, 6, 10, 11, 12, 13], "yeast": [4, 6], "archiv": 4, "ic": 4, "edu": 4, "criteria": [4, 5, 11], "1000": [4, 5, 6, 11], "suit": 4, "ucimlrepo": 4, "dry": [4, 6], "bean": [4, 6], "uci_multiclass_dataset": 4, "offici": 4, "provid": [4, 5, 6, 10, 12, 13], "lequa": [4, 13], "competit": [4, 6], "brief": [4, 6, 7], "t1a": [4, 6], "t1b": [4, 6], "t2a": [4, 6], "t2b": [4, 6], "sentiment": [4, 10], "28": [4, 6, 7, 10], "merchandis": [4, 6], "product": [4, 6, 10], "we": [4, 5, 6, 7, 9, 10, 11, 12, 13], "moreo": [4, 5, 6, 10, 11], "sebastiani": [4, 5, 6, 10, 11], "f": [4, 5, 6, 7, 10, 11, 12, 13], "sperduti": [4, 6], "2022": [4, 5, 10, 13], "overview": [4, 6], "clef": [4, 6], "descript": [4, 6], "lequa2022_experi": [4, 6], "py": [4, 6, 10, 13], "folder": [4, 5, 6, 11, 13], "guid": 4, "val_gen": [4, 6], "_lequa2022": 4, "samplesfromdir": 4, "subclass": [4, 5], "review": [4, 12], "recurr": [4, 6, 10], "proceed": [4, 5, 6, 10], "27th": [4, 6, 10], "acm": [4, 5, 6, 10], "knowledg": [4, 6, 10], "manag": [4, 6, 10], "2018": [2, 4, 5, 6, 10], "reviews_sentiment_dataset": [4, 6], "hp": [4, 6, 10], "imdb": [4, 6, 11, 12, 13], "matric": [4, 6, 12], "minimun": 4, "kept": 4, "faster": [4, 6], "subsequ": 4, "twitter": 4, "gao": [4, 5, 6, 10], "w": [4, 6, 10], "tweet": [4, 6, 10], "analysi": [4, 6, 10], "social": [4, 6, 10], "mining6": 4, "19": [4, 10], "2016": [4, 5, 10], "semeval13": [4, 6], "semeval14": [4, 6], "semeval15": [4, 6], "share": [4, 6], "twitter_sentiment_datasets_train": [4, 6], "twitter_sentiment_datasets_test": [4, 6], "gasp": [4, 6], "hcr": [4, 6, 10], "omd": [4, 6], "sander": 4, "semeval16": 4, "sst": [4, 6], "wb": [4, 6], "devel": 4, "style": 4, "id": [4, 6, 10], "would": [4, 5, 6, 7, 10, 12], "countvector": 4, "keyword": [4, 5], "nogap": 4, "regardless": 4, "special": [4, 6, 12], "codifi": 4, "unknown": 4, "surfac": 4, "assert": 4, "gap": 4, "preced": 4, "inplac": [4, 5, 10], "To": [4, 5, 12], "uniqu": 4, "rare": 4, "occur": [4, 12], "unk": 4, "minimum": [4, 5, 6], "org": [4, 5, 6], "stabl": 4, "feature_extract": 4, "html": 4, "subtyp": 4, "spmatrix": 4, "remov": [2, 4, 5], "present": [4, 6, 10], "least": [4, 6], "infrequ": 4, "aka": [4, 5], "z": [4, 6], "sublinear_tf": 4, "part": [4, 10], "scall": 4, "tf": [4, 6], "counter": 4, "tfidfvector": 4, "categor": [4, 10], "toward": [4, 5, 12], "whcih": 4, "had": 4, "encod": 4, "utf": 4, "8": [4, 5, 6, 10, 11, 12], "csv": 4, "feat1": 4, "feat2": 4, "featn": 4, "covari": [4, 5], "express": 4, "col": [4, 6], "row": [4, 7], "class2int": 4, "collet": 4, "fomart": 4, "progress": 4, "sentenc": 4, "classnam": 4, "u1": 4, "springer": [], "articl": [10, 11], "1007": [], "s10618": [], "008": [], "0097": [], "invert": [5, 10], "l2": [5, 10], "norm": [2, 5, 10], "ax": 5, "better": [5, 10], "consult": [5, 6, 10, 13], "buns": [5, 10], "On": [5, 10], "multi": [5, 10], "extens": [5, 6, 8, 10, 12], "2nd": [5, 6, 10], "workshop": [5, 10], "applic": [5, 10], "lq": [5, 10], "ecml": [5, 10], "pkdd": [5, 10], "grenobl": [5, 10], "franc": [5, 10], "classif_predict": [5, 10], "y_": 5, "construct": [5, 10], "jmlr": [], "v20": [], "18": [], "456": [], "abc": 5, "base_quantifi": 5, "median": [5, 10], "parameter": 5, "parllel": 5, "subobject": 5, "well": [5, 6, 10, 12], "nest": 5, "pipelin": 5, "latter": [5, 6, 10], "__": [5, 10], "updat": 5, "reason": [5, 10, 12, 13], "phase": [5, 10], "classification_fit": 5, "maintain": [5, 10], "attribut": 5, "give": [5, 13], "fit_classifi": [5, 10], "predict_on": [5, 10], "outsid": [5, 10], "remaind": 5, "expect": [5, 13], "non": [5, 10], "soft": [5, 7, 10], "num_warmup": 5, "500": [5, 6, 7, 12], "num_sampl": 5, "mcmc_seed": 5, "bayesian": [5, 10], "rather": [5, 10, 11], "diagnos": 5, "degeneraci": 5, "visibl": 5, "confus": 5, "uncertainti": [5, 10], "extra": 5, "bay": [5, 10], "warmup": 5, "mcmc": 5, "sampler": 5, "One": [5, 6, 7, 10, 13], "noth": 5, "here": [5, 7], "cdf": [5, 10], "match": [5, 10], "helling": 5, "sought": [5, 10], "choic": [5, 7, 11], "channel": 5, "proper": [5, 10], "ch": 5, "particular": [5, 6, 10], "di": 5, "dij": 5, "fraction": [5, 10], "th": 5, "tol": 5, "find": [0, 5, 6, 10, 11], "got": [5, 11], "dl": 5, "doi": 5, "1145": 5, "3219819": 5, "3220059": 5, "histogram": 5, "toler": [2, 5], "classif_posterior": 5, "exact_train_prev": [5, 10], "recalib": [5, 10], "maxim": 5, "saeren": [5, 10], "latinn": [5, 10], "decaesteck": [5, 10], "mutual": 5, "recurs": 5, "wai": [5, 10, 13], "until": 5, "converg": 5, "heurist": [5, 7], "propos": [5, 8, 10, 13], "recalibr": 5, "meant": [5, 10], "messag": 5, "observ": [5, 7, 10], "posterior_prob": 5, "0001": 5, "reach": 5, "loop": 5, "ir": 5, "accordingli": [5, 12], "unlabel": 5, "binary_quantifi": 5, "parallel_backend": 5, "prevel": 5, "emploi": [2, 5], "joblib": 5, "help": [5, 7, 12], "elm": [5, 8, 10], "cannot": 5, "temp": 5, "dure": [5, 7, 12], "resp": 5, "simplif": 5, "conceptu": [5, 11], "equival": [5, 6], "explicit": [0, 5], "famili": [5, 10], "structur": [5, 10], "purpos": [5, 6, 13], "svmperf_hom": [5, 10], "properli": [5, 10], "underli": [5, 10, 11], "2021": [5, 10, 11], "_kdei": 5, "common": [5, 10], "ancestor": 5, "kde": [5, 10], "scott": 5, "silverman": 5, "bandwidth": [5, 10], "wrap": 5, "kerneldens": 5, "evalut": 5, "kdei": 5, "cauchi": [5, 10], "schwarz": [5, 10], "author": 5, "mont": [5, 10], "carlo": [5, 10], "approach": [5, 10, 13], "alpha": 5, "delta": 5, "d": [5, 10], "boldsymbol": 5, "q_": 5, "widetild": 5, "u": [5, 7], "p_": 5, "alpha_i": 5, "l": 5, "_i": 5, "p_x": 5, "x_i": 5, "h": 5, "datapoint": 5, "center": [5, 12], "mathrm": 5, "dx": 5, "2dx": 5, "admit": 5, "montecarlo_tri": 5, "disntac": 5, "_f": 5, "trial": 5, "x_1": 5, "ldot": 5, "x_t": 5, "sim_": 5, "iid": [5, 7, 12], "criterion": 5, "mathbb": 5, "_neural": 5, "doc_embedding_s": 5, "stats_siz": 5, "lstm_hidden_s": 5, "lstm_nlayer": 5, "ff_layer": 5, "1024": 5, "bidirect": 5, "qdrop_p": 5, "order_bi": 5, "cell": 5, "dens": [5, 6], "connect": 5, "ff": 5, "sort": 5, "doc_embed": 5, "doc_posterior": 5, "overridden": [5, 10], "although": [5, 10, 11, 12, 13], "recip": 5, "former": [5, 6], "care": 5, "regist": 5, "hook": 5, "n_epoch": 5, "tr_iter_per_poch": 5, "va_iter_per_poch": 5, "checkpointdir": 5, "checkpointnam": 5, "pytorch": 5, "advantag": [5, 10, 13], "cnn": [5, 10], "estim_preval": [5, 10], "anyth": [5, 10], "40": [5, 6, 10], "66": [5, 13], "ground": 5, "truth": 5, "_threshold_optim": 5, "forman": [5, 10, 13], "2006": [5, 10], "2008": [5, 10], "look": [5, 6, 12], "goal": 5, "bring": 5, "stabil": [5, 7], "denomin": 5, "sweep": [5, 10], "closest": 5, "choos": [5, 10], "deliv": [5, 10, 11], "interpret": [4, 5, 6, 12], "complement": 5, "param_mod_sel": 5, "param_model_sel": 5, "red_siz": [5, 10], "min_po": 5, "polici": [5, 10], "av": [5, 10], "max_sample_s": 5, "ptr": [5, 10], "member": [5, 10], "preliminari": 5, "final": [5, 7, 10, 12], "recomput": 5, "static": [5, 10], "compat": [5, 10], "recommend": [5, 7, 12], "gridsearchcv": [5, 11], "base_quantifier_class": 5, "factori": 5, "unifi": [5, 6], "interfac": [5, 6, 7], "logspac": [5, 11, 13], "class_weight": [5, 11, 12], "balanc": [5, 6, 11, 12], "110": 5, "setup": 5, "mimick": 5, "castro": [5, 10], "alaiz": [5, 10], "rodr\u00edguez": 5, "alegr": [5, 10], "2013": [5, 10], "nfeat": 5, "dissimilar": 5, "mlpe": 5, "lazi": 5, "assum": [5, 7, 10], "put": 5, "assumpion": 5, "irrespect": [4, 5, 7, 12], "lower": [2, 5, 12], "estimant": 5, "bootstrap_tri": 5, "bootstrap_rang": 5, "bagging_tri": 5, "bagging_rang": 5, "vectorizer_kwarg": 5, "class_cond_x": 5, "hat_yi": 5, "yj": 5, "yi": 5, "projection_simplex_sort": [0, 1, 2, 5, 10], "ip_if_necessari": [], "appear": [2, 12], "decim": 2, "formula": 2, "condsoftmax": [0, 1, 2, 5, 10], "l1_norm": [0, 1, 2], "softmax": [0, 1, 2, 5, 10], "solve_adjustment_binari": [0, 1, 2], "aggr": 2, "verifi": 2, "li": [2, 10], "arraylik": 2, "lie": [2, 5], "num_vector": 2, "becom": [2, 13], "happen": [2, 12], "rescal": 2, "mapsimplex": [2, 5, 10], "were": [2, 6], "you": [0, 2, 5, 6, 10], "want": [2, 10], "untouch": 2, "class_conditional_r": 2, "unadjusted_count": 2, "unadjust": [2, 10, 12], "y_i": 2, "m_": 2, "ij": 2, "y_j": 2, "futur": [2, 10], "compos": [0, 1, 2], "uniform_preval": [0, 1, 2], "blobelloss": [0, 2, 5], "cvclassifi": [0, 2, 5], "classtransform": [0, 2, 5], "combinedloss": [0, 2, 5], "composablequantifi": [0, 2, 5], "distancetransform": [0, 2, 5], "energykerneltransform": [0, 2, 5], "energyloss": [0, 2, 5], "gaussiankerneltransform": [0, 2, 5], "gaussianrffkerneltransform": [0, 2, 5], "hellingersurrogateloss": [0, 2, 5], "histogramtransform": [0, 2, 5], "kerneltransform": [0, 2, 5], "laplaciankerneltransform": [0, 2, 5], "leastsquaresloss": [0, 2, 5], "tikhonovregular": [0, 2, 5], "composit": 5, "integr": 5, "qunfold": 5, "github": [5, 6, 10], "mirkobuns": 5, "functionloss": 5, "blobel": 5, "1985": 5, "under": [5, 7, 10, 13], "assumpt": [5, 7, 12], "poisson": 5, "n_estim": 5, "fix": [5, 13], "oob_scor": 5, "oob_decision_function_": 5, "just": [5, 10, 13], "bag": 5, "is_probabilist": 5, "abstracttransform": 5, "saniti": 5, "_check_i": 5, "p_trn": 5, "class_preval": 5, "transfer": 5, "abstractloss": 5, "multipl": 5, "arbitrari": 5, "unfold": 5, "regular": 5, "unconstrain": 5, "trick": 5, "trust": 5, "ncg": 5, "solver_opt": 5, "gtol": 5, "maxit": 5, "randomst": 5, "ordin": 5, "2023": [5, 10], "randomforestclassifi": 5, "o_acc": 5, "try": [5, 11], "transformer__classifier__estimator__criterion": 5, "gini": 5, "entropi": 5, "acc_lr": 5, "preprocessor": 5, "edx": 5, "edi": 5, "accept": [5, 10], "spatial": 5, "cdist": 5, "kmm": 5, "energi": 5, "x_2": 5, "kawakubo": 5, "casta\u00f1o": 5, "sigma": 5, "gaussian": 5, "exp": 5, "2\u03c3": 5, "n_rff": 5, "effici": [5, 10], "fourier": 5, "wise": 5, "Their": 5, "problemat": 5, "becaus": 5, "twice": 5, "differenti": 5, "complic": 5, "unit_scal": 5, "intend": 5, "signatur": 5, "scalar": 5, "laplacian": 5, "bella": 5, "hopkin": 5, "king": 5, "2010": 5, "tikhonov": 5, "promot": 5, "behavior": 5, "often": [5, 7], "tau": 5, "strength": 5, "quapi": [6, 7, 8, 9, 10, 11, 12, 13], "anyon": 6, "roughli": 6, "plai": 6, "role": 6, "1st": 6, "neutral": 6, "3rd": 6, "digit": 6, "17": [6, 10], "tackl": [6, 10], "wiki": [6, 7, 9, 10], "three": [6, 10, 12], "harri": 6, "potter": 6, "movi": 6, "fetch": 6, "octob": [6, 10], "1775": [6, 10], "1778": [6, 10], "fhe": 6, "summar": 6, "9533": 6, "18399": 6, "018": 6, "982": 6, "065": 6, "935": 6, "25000": [4, 6], "idf": 6, "exemplifi": 6, "august": 6, "ieee": 6, "mine": [6, 10], "asonam": 6, "97": 6, "104": [6, 7], "semev": 6, "ase": 6, "typ": 6, "ga": 6, "8788": 6, "3765": 6, "694582": 6, "421": 6, "496": 6, "082": 6, "407": 6, "507": 6, "086": 6, "spa": 6, "rse": 6, "1594": 6, "798": 6, "222046": 6, "546": 6, "211": 6, "243": 6, "640": 6, "167": 6, "193": 6, "1839": 6, "787": 6, "199151": 6, "463": 6, "271": 6, "266": 6, "437": 6, "283": 6, "280": 6, "san": 6, "der": 6, "2155": 6, "923": 6, "229399": 6, "161": 6, "691": 6, "148": 6, "164": [6, 10], "688": 6, "sem": 6, "eva": 6, "l13": 6, "11338": 6, "3813": 6, "1215742": 6, "159": 6, "470": 6, "372": 6, "158": 6, "430": 6, "412": 6, "l14": 6, "1853": 6, "109": 6, "361": 6, "530": 6, "l15": 6, "2390": 6, "153": 6, "413": 6, "434": 6, "l16": 6, "8000": 6, "2000": 6, "889504": 6, "157": 6, "351": 6, "492": 6, "163": 6, "341": 6, "497": 6, "2971": 6, "1271": 6, "376132": 6, "261": 6, "452": 6, "288": 6, "207": 6, "481": 6, "312": 6, "2184": 6, "936": 6, "248563": 6, "305": 6, "414": 6, "281": 6, "282": 6, "446": 6, "272": [6, 7], "4259": 6, "1823": 6, "404333": 6, "270": 6, "392": 6, "337": 6, "274": 6, "335": 6, "32": [6, 11], "exactli": 6, "coincid": 6, "unabl": 6, "diabet": 6, "phonem": 6, "70": 6, "submit": 6, "practic": 6, "could": [4, 6, 7, 10, 11, 12, 13], "2x5fcv": 6, "acut": 6, "120": 6, "508": 6, "583": 6, "417": 6, "625": 6, "539": 6, "461": 6, "922": 6, "078": 6, "breast": 6, "cancer": 6, "683": 6, "350": 6, "650": 6, "cmc": 6, "1473": 6, "573": 6, "427": 6, "774": 6, "226": 6, "653": 6, "347": 6, "ctg": 6, "2126": 6, "778": 6, "861": 6, "139": 6, "917": 6, "083": 6, "german": 6, "700": 6, "haberman": [6, 10], "306": 6, "735": 6, "265": 6, "ionospher": 6, "641": 6, "359": 6, "iri": 6, "150": 6, "667": 6, "333": 6, "mammograph": 6, "830": 6, "514": 6, "486": 6, "pageblock": 6, "5473": 6, "979": 6, "021": 6, "semeion": 6, "1593": 6, "901": 6, "099": 6, "sonar": 6, "208": 6, "60": 6, "534": 6, "466": 6, "spambas": 6, "4601": 6, "57": 6, "606": 6, "394": 6, "spectf": 6, "267": 6, "44": 6, "794": 6, "206": 6, "tictacto": 6, "958": 6, "transfus": 6, "748": 6, "762": 6, "238": 6, "wdbc": 6, "569": 6, "627": 6, "373": 6, "wine": 6, "178": 6, "669": 6, "331": 6, "601": 6, "399": 6, "730": 6, "red": 6, "1599": 6, "465": 6, "535": 6, "white": 6, "4898": 6, "665": 6, "1484": 6, "711": 6, "289": 6, "action": 6, "moment": [6, 7, 10], "autom": 6, "cardiotocographi": 6, "excel": 6, "xlrd": 6, "unix": 6, "compress": 6, "directli": [6, 10], "doabl": 6, "gzip": 6, "uncompress": 6, "softwar": 6, "manual": 6, "good": [6, 11, 12], "idea": [6, 13], "easi": 6, "extrem": 6, "difficult": [6, 12], "tend": [6, 12], "magnitud": 6, "disproportion": 6, "impact": 6, "There": [6, 10], "your": [6, 10], "own": [6, 11], "min_test_split": [4, 6], "retriev": [6, 11], "platform": 6, "filter": 6, "000": 6, "9527": 6, "4084": 6, "qualiti": 6, "3428": 6, "1470": 6, "academ": 6, "3096": 6, "1328": 6, "3933": 6, "1687": 6, "letter": 6, "14000": 6, "6000": 6, "val_gener": 6, "test_gener": 6, "doc": 6, "5000": [6, 7, 12, 13], "250": 6, "20000": 6, "speci": 6, "water": 6, "record": 6, "10036244": 6, "hsosik": 6, "pglez82": 6, "ifcb_zenodo": 6, "678": 6, "584474": 6, "246916": 6, "2626429": 6, "per": [4, 6], "2922": 6, "2871": 6, "3873": 6, "min": 6, "59": 6, "6645": 6, "7375": 6, "9112": 6, "020": 6, "978": 6, "addition": 6, "deal": 6, "cl": 6, "my_data": 6, "my_custom_load": 6, "rb": 6, "fin": 6, "varianc": [6, 12], "_dataset_": [], "_labelledcollection_": [], "php": [], "_verbos": [], "true_": [], "_quapy_data_": [], "_cardiotocographi": [], "set_": [], "_xlrd_": [], "_page": [], "_acut": [], "a_": [], "b_": [], "_balanc": [], "2_": [], "arxiv": 10, "ab": [], "2401": 10, "00490": 10, "ceur": [], "vol": [], "3180": [], "146": 10, "_loader_func_": [], "_qp": [], "preprocessing_": [], "_text2tfidf_": [], "_reduce_columns_": [], "_standardize_": [], "_index_": [], "appeal": 7, "tool": 7, "scenario": [7, 10, 11, 12], "particularli": 7, "aris": 7, "belief": 7, "predictor": 7, "govern": 7, "explain": [7, 12], "popular": [7, 13], "_mae_": [], "_mrae_": [], "among": [7, 10], "_rae_": [], "_acce_": [], "_f1e_": [], "_mkld_": [], "_mnkld_": [], "third": [7, 12], "tradition": 7, "past": 7, "_sample_size_": [], "omit": 7, "thereaft": 7, "3f": 7, "600": 7, "914": 7, "error_funct": 7, "_evalu": [], "protocol_": [], "_sampl": [], "procotol_": [], "character": [7, 10], "wide": [7, 12, 13], "vari": [7, 10, 13], "_shift_": [], "md": 8, "_prot_": [], "our": [7, 13], "_quantifier_": [], "evaluatio": 7, "prot": 7, "4f": [7, 13], "_report_": [], "account": 7, "rise": [7, 13], "straightforward": 7, "visual": [7, 12], "pd": 7, "set_opt": 7, "expand_frame_repr": 7, "308": 7, "692": 7, "314": 7, "686": 7, "005649": 7, "013182": 7, "000074": 7, "896": 7, "909": 7, "091": 7, "013145": 7, "069323": 7, "000985": 7, "848": 7, "152": 7, "809": 7, "191": 7, "039063": 7, "149806": 7, "005175": 7, "016": 7, "984": 7, "033": 7, "967": 7, "017236": 7, "487529": 7, "005298": 7, "728": 7, "751": 7, "249": 7, "022769": 7, "057146": 7, "001350": 7, "4995": 7, "72": 7, "698": 7, "302": 7, "021752": 7, "053631": 7, "001133": 7, "4996": 7, "868": 7, "132": 7, "888": 7, "112": 7, "020490": 7, "088230": 7, "001985": 7, "4997": 7, "292": 7, "708": 7, "298": 7, "702": 7, "006149": 7, "014788": 7, "000090": 7, "4998": 7, "76": 7, "220": 7, "780": 7, "019950": 7, "054309": 7, "001127": 7, "4999": 7, "948": 7, "052": 7, "965": 7, "035": 7, "016941": 7, "165776": 7, "003538": 7, "023588": 7, "108779": 7, "003631": 7, "float64": 7, "finish": [7, 11], "exit": 7, "_aggregativequantifier_": [], "_onlabelledcollectionprotocol_": [], "smaller": 7, "1m": 7, "postpon": [7, 10], "_aggr_speedup": [], "convers": 7, "false_": [], "_model": [], "selection_": [], "execut": 7, "lot": 7, "procotol": 7, "ext": 8, "compil": [8, 10], "prepare_svmperf": [8, 10], "sh": [8, 10], "job": 8, "svm_perf_quantif": [8, 10], "welcom": 9, "illustr": [9, 10, 11, 12], "main": [9, 12, 13], "concept": 9, "behind": 9, "group": 10, "plan": 10, "fact": [10, 12], "shoud": 10, "abstractmethod": 10, "familiar": 10, "inspir": 10, "why": 10, "respond": 10, "simplifi": 10, "selector": 10, "_check_init_paramet": 10, "what": 10, "remain": 10, "ahead": 10, "overrid": 10, "overriden": 10, "quickli": 10, "inconsist": 10, "__init__": 10, "break": 10, "similarli": 10, "extern": 10, "fit_learn": 10, "pattern": 10, "rout": 10, "clone": 10, "huge": 10, "concern": [0, 10], "leverag": 10, "customarili": [10, 11], "done": [10, 11], "four": 10, "simplest": 10, "equip": [10, 12], "constructor": 10, "prevail": 10, "seem": 10, "calibratedclassifiercv": 10, "base_estim": 10, "cv": [10, 11], "As": [10, 11], "calibratedclassifi": 10, "lastli": 10, "everyth": 10, "said": 10, "aboud": 10, "now": [10, 12, 13], "mp": 10, "missclassif": 10, "attempt": 10, "minv": 10, "remark": 10, "izbicki": 10, "stern": 10, "journal": 10, "research": 10, "solvabl": 10, "gist": 10, "mblondel": 10, "6f3b7aaad90606b98f71": 10, "introduc": 10, "ziegler": 10, "czy\u017c": 10, "black": 10, "latent": 10, "weak": 10, "plug": 10, "markov": 10, "chain": 10, "suitabl": 10, "nearli": 10, "slower": 10, "bayesian_quantif": 10, "2002": 10, "priori": 10, "14": 10, "41": 10, "almost": 10, "effect": 10, "depart": 10, "suggest": 10, "etc": 10, "rodr\u0131": 10, "guez": 10, "scienc": 10, "218": 10, "allia": 10, "previou": 10, "firat": 10, "mutliclasshdi": 10, "maletzk": 10, "hassan": 10, "thank": 10, "pablo": 10, "contribut": 10, "achiev": [10, 11, 12, 13], "d\u00edez": 10, "reliabl": 10, "recognit": 10, "48": 10, "591": 10, "604": 10, "newsvmnkld": 10, "transact": 10, "discoveri": 10, "experiment": 10, "plo": 10, "ONE": 10, "nowadai": 10, "behav": [10, 12, 13], "Then": 10, "thing": [10, 13], "mycustomloss": 10, "oper": 10, "trivial": 10, "svmq": 10, "know": [10, 11], "explicit_loss_minim": 10, "one_vs_al": 10, "preprint": 10, "devis": 10, "too": 10, "variat": 10, "nor": 10, "inde": [10, 13], "regressor": 10, "processor": 10, "offer": 10, "supervis": 11, "strongli": [11, 12], "wherebi": 11, "pick": 11, "assess": 11, "aim": [11, 12], "appropri": 11, "design": 11, "regard": 11, "section": [0, 11, 13], "argu": 11, "alejandro": 11, "fabrizio": 11, "ecir": 11, "91": 11, "varieti": 11, "exhibit": [11, 12, 13], "degre": 11, "distributionmatch": 11, "confront": [11, 13], "against": [11, 12], "devot": 11, "prefix": 11, "classifier__": 11, "classifier__c": [11, 13], "16": 11, "best_params_": 11, "best_model_": 11, "mae_scor": 11, "5f": 11, "start": 11, "hyperparam": 11, "04021": 11, "took": 11, "1356": 11, "04286": 11, "2139": 11, "04888": 11, "2491": 11, "05163": 11, "5372": 11, "02445": 11, "9056": 11, "02234": 11, "3114": 11, "develop": 11, "03102": 11, "computation": 11, "costli": 11, "theoret": 11, "suboptim": 11, "opt": 11, "flaw": 11, "hand": 11, "surrog": 11, "analys": 12, "outcom": 12, "variou": 12, "merg": 12, "55": 12, "showcas": 12, "gen_data": 12, "base_classifi": 12, "append": 12, "insight": 12, "view": 12, "unfortun": 12, "bin_diag": 12, "png": 12, "cyan": 12, "bias": 12, "evinc": 12, "bin_bia": 12, "unbias": 12, "overestim": 12, "rewrit": 12, "method_data": 12, "training_preval": 12, "linspac": 12, "training_s": 12, "suffic": 12, "train_sampl": 12, "clearli": 12, "subinterv": 12, "interestingli": 12, "enough": 12, "seemingli": 12, "tendenc": 12, "underestim": 12, "beyond": 12, "curios": 12, "diag": 12, "pretti": 12, "discuss": 12, "analyz": 12, "harder": 12, "err_drift": 12, "higher": [4, 12, 13], "clear": 12, "lowest": 12, "rememb": 12, "solid": 12, "comparison": [12, 13], "detriment": 12, "hide": 12, "v0": 13, "robustli": 13, "presenc": 13, "stochast": 13, "fair": 13, "commonli": 13, "radom_st": 13, "technic": 13, "explan": 13, "custom_protocol": 13, "subject": 13, "2005": 13, "1771": 13, "signific": 13, "budg": 13, "budget": 13, "4960": 13, "usag": 13, "equial": 13, "val_app": 13, "cumbersom": 13, "increas": 13, "rapidli": 13, "impract": 13, "legitim": 13, "drawback": 13, "elect": 13, "burden": 13, "incur": 13, "in_protocol": 13, "sometim": 13, "due": 13, "capabl": 13, "texto": [], "aspect": 0, "explicitlossminim": [], "load_report": [0, 1, 2], "as_dict": 2, "max_train_inst": 4, "min_class_support": 4, "surpass": 4, "istanc": 4, "fewer": 4, "deafult": 4}, "objects": {"": [[2, 0, 0, "-", "quapy"]], "quapy": [[3, 0, 0, "-", "classification"], [4, 0, 0, "-", "data"], [2, 0, 0, "-", "error"], [2, 0, 0, "-", "evaluation"], [2, 0, 0, "-", "functional"], [5, 0, 0, "-", "method"], [2, 0, 0, "-", "model_selection"], [2, 0, 0, "-", "plot"], [2, 0, 0, "-", "protocol"], [2, 0, 0, "-", "util"]], "quapy.classification": [[3, 0, 0, "-", "calibration"], [3, 0, 0, "-", "methods"], [3, 0, 0, "-", "neural"], [3, 0, 0, "-", "svmperf"]], "quapy.classification.calibration": [[3, 1, 1, "", "BCTSCalibration"], [3, 1, 1, "", "NBVSCalibration"], [3, 1, 1, "", "RecalibratedProbabilisticClassifier"], [3, 1, 1, "", "RecalibratedProbabilisticClassifierBase"], [3, 1, 1, "", "TSCalibration"], [3, 1, 1, "", "VSCalibration"]], "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase": [[3, 2, 1, "", "classes_"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "fit_cv"], [3, 3, 1, "", "fit_tr_val"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"]], "quapy.classification.methods": [[3, 1, 1, "", "LowRankLogisticRegression"]], "quapy.classification.methods.LowRankLogisticRegression": [[3, 3, 1, "", "fit"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"], [3, 3, 1, "", "set_params"], [3, 3, 1, "", "transform"]], "quapy.classification.neural": [[3, 1, 1, "", "CNNnet"], [3, 1, 1, "", "LSTMnet"], [3, 1, 1, "", "NeuralClassifierTrainer"], [3, 1, 1, "", "TextClassifierNet"], [3, 1, 1, "", "TorchDataset"]], "quapy.classification.neural.CNNnet": [[3, 3, 1, "", "document_embedding"], [3, 3, 1, "", "get_params"], [3, 4, 1, "", "training"], [3, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.LSTMnet": [[3, 3, 1, "", "document_embedding"], [3, 3, 1, "", "get_params"], [3, 4, 1, "", "training"], [3, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.NeuralClassifierTrainer": [[3, 2, 1, "", "device"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"], [3, 3, 1, "", "reset_net_params"], [3, 3, 1, "", "set_params"], [3, 3, 1, "", "transform"]], "quapy.classification.neural.TextClassifierNet": [[3, 3, 1, "", "dimensions"], [3, 3, 1, "", "document_embedding"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict_proba"], [3, 4, 1, "", "training"], [3, 2, 1, "", "vocabulary_size"], [3, 3, 1, "", "xavier_uniform"]], "quapy.classification.neural.TorchDataset": [[3, 3, 1, "", "asDataloader"]], "quapy.classification.svmperf": [[3, 1, 1, "", "SVMperf"]], "quapy.classification.svmperf.SVMperf": [[3, 3, 1, "", "decision_function"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "predict"], [3, 4, 1, "", "valid_losses"]], "quapy.data": [[4, 0, 0, "-", "base"], [4, 0, 0, "-", "datasets"], [4, 0, 0, "-", "preprocessing"], [4, 0, 0, "-", "reader"]], "quapy.data.base": [[4, 1, 1, "", "Dataset"], [4, 1, 1, "", "LabelledCollection"]], "quapy.data.base.Dataset": [[4, 3, 1, "", "SplitStratified"], [4, 2, 1, "", "binary"], [4, 2, 1, "", "classes_"], [4, 3, 1, "", "kFCV"], [4, 3, 1, "", "load"], [4, 2, 1, "", "n_classes"], [4, 3, 1, "", "reduce"], [4, 3, 1, "", "stats"], [4, 2, 1, "", "train_test"], [4, 2, 1, "", "vocabulary_size"]], "quapy.data.base.LabelledCollection": [[4, 2, 1, "", "X"], [4, 2, 1, "", "Xp"], [4, 2, 1, "", "Xy"], [4, 2, 1, "", "binary"], [4, 3, 1, "", "counts"], [4, 3, 1, "", "join"], [4, 3, 1, "", "kFCV"], [4, 3, 1, "", "load"], [4, 2, 1, "", "n_classes"], [4, 2, 1, "", "p"], [4, 3, 1, "", "prevalence"], [4, 3, 1, "", "sampling"], [4, 3, 1, "", "sampling_from_index"], [4, 3, 1, "", "sampling_index"], [4, 3, 1, "", "split_random"], [4, 3, 1, "", "split_stratified"], [4, 3, 1, "", "stats"], [4, 3, 1, "", "uniform_sampling"], [4, 3, 1, "", "uniform_sampling_index"], [4, 2, 1, "", "y"]], "quapy.data.datasets": [[4, 5, 1, "", "fetch_IFCB"], [4, 5, 1, "", "fetch_UCIBinaryDataset"], [4, 5, 1, "", "fetch_UCIBinaryLabelledCollection"], [4, 5, 1, "", "fetch_UCIMulticlassDataset"], [4, 5, 1, "", "fetch_UCIMulticlassLabelledCollection"], [4, 5, 1, "", "fetch_lequa2022"], [4, 5, 1, "", "fetch_reviews"], [4, 5, 1, "", "fetch_twitter"], [4, 5, 1, "", "warn"]], "quapy.data.preprocessing": [[4, 1, 1, "", "IndexTransformer"], [4, 5, 1, "", "index"], [4, 5, 1, "", "reduce_columns"], [4, 5, 1, "", "standardize"], [4, 5, 1, "", "text2tfidf"]], "quapy.data.preprocessing.IndexTransformer": [[4, 3, 1, "", "add_word"], [4, 3, 1, "", "fit"], [4, 3, 1, "", "fit_transform"], [4, 3, 1, "", "transform"], [4, 3, 1, "", "vocabulary_size"]], "quapy.data.reader": [[4, 5, 1, "", "binarize"], [4, 5, 1, "", "from_csv"], [4, 5, 1, "", "from_sparse"], [4, 5, 1, "", "from_text"], [4, 5, 1, "", "reindex_labels"]], "quapy.error": [[2, 5, 1, "", "absolute_error"], [2, 5, 1, "", "acc_error"], [2, 5, 1, "", "acce"], [2, 5, 1, "", "ae"], [2, 5, 1, "", "f1_error"], [2, 5, 1, "", "f1e"], [2, 5, 1, "", "from_name"], [2, 5, 1, "", "kld"], [2, 5, 1, "", "mae"], [2, 5, 1, "", "mean_absolute_error"], [2, 5, 1, "", "mean_normalized_absolute_error"], [2, 5, 1, "", "mean_normalized_relative_absolute_error"], [2, 5, 1, "", "mean_relative_absolute_error"], [2, 5, 1, "", "mkld"], [2, 5, 1, "", "mnae"], [2, 5, 1, "", "mnkld"], [2, 5, 1, "", "mnrae"], [2, 5, 1, "", "mrae"], [2, 5, 1, "", "mse"], [2, 5, 1, "", "nae"], [2, 5, 1, "", "nkld"], [2, 5, 1, "", "normalized_absolute_error"], [2, 5, 1, "", "normalized_relative_absolute_error"], [2, 5, 1, "", "nrae"], [2, 5, 1, "", "rae"], [2, 5, 1, "", "relative_absolute_error"], [2, 5, 1, "", "se"], [2, 5, 1, "", "smooth"]], "quapy.evaluation": [[2, 5, 1, "", "evaluate"], [2, 5, 1, "", "evaluate_on_samples"], [2, 5, 1, "", "evaluation_report"], [2, 5, 1, "", "prediction"]], "quapy.functional": [[2, 5, 1, "", "HellingerDistance"], [2, 5, 1, "", "TopsoeDistance"], [2, 5, 1, "", "argmin_prevalence"], [2, 5, 1, "", "as_binary_prevalence"], [2, 5, 1, "", "check_prevalence_vector"], [2, 5, 1, "", "clip"], [2, 5, 1, "", "condsoftmax"], [2, 5, 1, "", "counts_from_labels"], [2, 5, 1, "", "get_divergence"], [2, 5, 1, "", "get_nprevpoints_approximation"], [2, 5, 1, "", "l1_norm"], [2, 5, 1, "", "linear_search"], [2, 5, 1, "", "normalize_prevalence"], [2, 5, 1, "", "num_prevalence_combinations"], [2, 5, 1, "", "optim_minimize"], [2, 5, 1, "", "prevalence_from_labels"], [2, 5, 1, "", "prevalence_from_probabilities"], [2, 5, 1, "", "prevalence_linspace"], [2, 5, 1, "", "projection_simplex_sort"], [2, 5, 1, "", "softmax"], [2, 5, 1, "", "solve_adjustment"], [2, 5, 1, "", "solve_adjustment_binary"], [2, 5, 1, "", "strprev"], [2, 5, 1, "", "ternary_search"], [2, 5, 1, "", "uniform_prevalence"], [2, 5, 1, "", "uniform_prevalence_sampling"], [2, 5, 1, "", "uniform_simplex_sampling"]], "quapy.method": [[5, 0, 0, "-", "_kdey"], [5, 0, 0, "-", "_neural"], [5, 0, 0, "-", "_threshold_optim"], [5, 0, 0, "-", "aggregative"], [5, 0, 0, "-", "base"], [5, 0, 0, "-", "composable"], [5, 0, 0, "-", "meta"], [5, 0, 0, "-", "non_aggregative"]], "quapy.method._kdey": [[5, 1, 1, "", "KDEBase"], [5, 1, 1, "", "KDEyCS"], [5, 1, 1, "", "KDEyHD"], [5, 1, 1, "", "KDEyML"]], "quapy.method._kdey.KDEBase": [[5, 4, 1, "", "BANDWIDTH_METHOD"], [5, 3, 1, "", "get_kde_function"], [5, 3, 1, "", "get_mixture_components"], [5, 3, 1, "", "pdf"]], "quapy.method._kdey.KDEyCS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "gram_matrix_mix_sum"]], "quapy.method._kdey.KDEyHD": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method._kdey.KDEyML": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method._neural": [[5, 1, 1, "", "QuaNetModule"], [5, 1, 1, "", "QuaNetTrainer"], [5, 5, 1, "", "mae_loss"]], "quapy.method._neural.QuaNetModule": [[5, 2, 1, "", "device"], [5, 3, 1, "", "forward"], [5, 4, 1, "", "training"]], "quapy.method._neural.QuaNetTrainer": [[5, 2, 1, "", "classes_"], [5, 3, 1, "", "clean_checkpoint"], [5, 3, 1, "", "clean_checkpoint_dir"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method._threshold_optim": [[5, 1, 1, "", "MAX"], [5, 1, 1, "", "MS"], [5, 1, 1, "", "MS2"], [5, 1, 1, "", "T50"], [5, 1, 1, "", "ThresholdOptimization"], [5, 1, 1, "", "X"]], "quapy.method._threshold_optim.MAX": [[5, 3, 1, "", "condition"]], "quapy.method._threshold_optim.MS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "condition"]], "quapy.method._threshold_optim.MS2": [[5, 3, 1, "", "discard"]], "quapy.method._threshold_optim.T50": [[5, 3, 1, "", "condition"]], "quapy.method._threshold_optim.ThresholdOptimization": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregate_with_threshold"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "condition"], [5, 3, 1, "", "discard"]], "quapy.method._threshold_optim.X": [[5, 3, 1, "", "condition"]], "quapy.method.aggregative": [[5, 1, 1, "", "ACC"], [5, 4, 1, "", "AdjustedClassifyAndCount"], [5, 1, 1, "", "AggregativeCrispQuantifier"], [5, 1, 1, "", "AggregativeMedianEstimator"], [5, 1, 1, "", "AggregativeQuantifier"], [5, 1, 1, "", "AggregativeSoftQuantifier"], [5, 1, 1, "", "BayesianCC"], [5, 1, 1, "", "BinaryAggregativeQuantifier"], [5, 1, 1, "", "CC"], [5, 4, 1, "", "ClassifyAndCount"], [5, 1, 1, "", "DMy"], [5, 4, 1, "", "DistributionMatchingY"], [5, 1, 1, "", "DyS"], [5, 1, 1, "", "EMQ"], [5, 4, 1, "", "ExpectationMaximizationQuantifier"], [5, 1, 1, "", "HDy"], [5, 4, 1, "", "HellingerDistanceY"], [5, 1, 1, "", "OneVsAllAggregative"], [5, 1, 1, "", "PACC"], [5, 1, 1, "", "PCC"], [5, 4, 1, "", "ProbabilisticAdjustedClassifyAndCount"], [5, 4, 1, "", "ProbabilisticClassifyAndCount"], [5, 4, 1, "", "SLD"], [5, 1, 1, "", "SMM"], [5, 5, 1, "", "newELM"], [5, 5, 1, "", "newSVMAE"], [5, 5, 1, "", "newSVMKLD"], [5, 5, 1, "", "newSVMQ"], [5, 5, 1, "", "newSVMRAE"]], "quapy.method.aggregative.ACC": [[5, 4, 1, "", "METHODS"], [5, 4, 1, "", "NORMALIZATIONS"], [5, 4, 1, "", "SOLVERS"], [5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "getPteCondEstim"], [5, 3, 1, "", "newInvariantRatioEstimation"]], "quapy.method.aggregative.AggregativeMedianEstimator": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.aggregative.AggregativeQuantifier": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 2, 1, "", "classes_"], [5, 2, 1, "", "classifier"], [5, 3, 1, "", "classifier_fit_predict"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 2, 1, "", "val_split"], [5, 4, 1, "", "val_split_"]], "quapy.method.aggregative.BayesianCC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "get_conditional_probability_samples"], [5, 3, 1, "", "get_prevalence_samples"], [5, 3, 1, "", "sample_from_posterior"]], "quapy.method.aggregative.BinaryAggregativeQuantifier": [[5, 3, 1, "", "fit"], [5, 2, 1, "", "neg_label"], [5, 2, 1, "", "pos_label"]], "quapy.method.aggregative.CC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.DMy": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.DyS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.EMQ": [[5, 3, 1, "", "EM"], [5, 3, 1, "", "EMQ_BCTS"], [5, 4, 1, "", "EPSILON"], [5, 4, 1, "", "MAX_ITER"], [5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "predict_proba"]], "quapy.method.aggregative.HDy": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.OneVsAllAggregative": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "classify"]], "quapy.method.aggregative.PACC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "getPteCondEstim"]], "quapy.method.aggregative.PCC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.aggregative.SMM": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"]], "quapy.method.base": [[5, 1, 1, "", "BaseQuantifier"], [5, 1, 1, "", "BinaryQuantifier"], [5, 1, 1, "", "OneVsAll"], [5, 1, 1, "", "OneVsAllGeneric"], [5, 5, 1, "", "newOneVsAll"]], "quapy.method.base.BaseQuantifier": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.base.OneVsAllGeneric": [[5, 2, 1, "", "classes_"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.composable": [[5, 1, 1, "", "BlobelLoss"], [5, 1, 1, "", "CVClassifier"], [5, 1, 1, "", "ClassTransformer"], [5, 1, 1, "", "CombinedLoss"], [5, 5, 1, "", "ComposableQuantifier"], [5, 1, 1, "", "DistanceTransformer"], [5, 1, 1, "", "EnergyKernelTransformer"], [5, 1, 1, "", "EnergyLoss"], [5, 1, 1, "", "GaussianKernelTransformer"], [5, 1, 1, "", "GaussianRFFKernelTransformer"], [5, 1, 1, "", "HellingerSurrogateLoss"], [5, 1, 1, "", "HistogramTransformer"], [5, 1, 1, "", "KernelTransformer"], [5, 1, 1, "", "LaplacianKernelTransformer"], [5, 1, 1, "", "LeastSquaresLoss"], [5, 1, 1, "", "TikhonovRegularization"], [5, 5, 1, "", "TikhonovRegularized"]], "quapy.method.composable.CVClassifier": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "predict"], [5, 3, 1, "", "predict_proba"]], "quapy.method.composable.ClassTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.DistanceTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.EnergyKernelTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.GaussianKernelTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.GaussianRFFKernelTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.HistogramTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.KernelTransformer": [[5, 3, 1, "", "fit_transform"], [5, 3, 1, "", "transform"]], "quapy.method.composable.LaplacianKernelTransformer": [[5, 2, 1, "", "kernel"]], "quapy.method.meta": [[5, 5, 1, "", "EACC"], [5, 5, 1, "", "ECC"], [5, 5, 1, "", "EEMQ"], [5, 5, 1, "", "EHDy"], [5, 5, 1, "", "EPACC"], [5, 1, 1, "", "Ensemble"], [5, 1, 1, "", "MedianEstimator"], [5, 1, 1, "", "MedianEstimator2"], [5, 5, 1, "", "ensembleFactory"], [5, 5, 1, "", "get_probability_distribution"]], "quapy.method.meta.Ensemble": [[5, 4, 1, "", "VALID_POLICIES"], [5, 2, 1, "", "aggregative"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 2, 1, "", "probabilistic"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator2": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_params"]], "quapy.method.non_aggregative": [[5, 1, 1, "", "DMx"], [5, 4, 1, "", "DistributionMatchingX"], [5, 1, 1, "", "MaximumLikelihoodPrevalenceEstimation"], [5, 1, 1, "", "ReadMe"]], "quapy.method.non_aggregative.DMx": [[5, 3, 1, "", "HDx"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"]], "quapy.method.non_aggregative.ReadMe": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "std_constrained_linear_ls"]], "quapy.model_selection": [[2, 1, 1, "", "ConfigStatus"], [2, 1, 1, "", "GridSearchQ"], [2, 1, 1, "", "Status"], [2, 5, 1, "", "cross_val_predict"], [2, 5, 1, "", "expand_grid"], [2, 5, 1, "", "group_params"]], "quapy.model_selection.ConfigStatus": [[2, 3, 1, "", "failed"], [2, 3, 1, "", "success"]], "quapy.model_selection.GridSearchQ": [[2, 3, 1, "", "best_model"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "quantify"], [2, 3, 1, "", "set_params"]], "quapy.model_selection.Status": [[2, 4, 1, "", "ERROR"], [2, 4, 1, "", "INVALID"], [2, 4, 1, "", "SUCCESS"], [2, 4, 1, "", "TIMEOUT"]], "quapy.plot": [[2, 5, 1, "", "binary_bias_bins"], [2, 5, 1, "", "binary_bias_global"], [2, 5, 1, "", "binary_diagonal"], [2, 5, 1, "", "brokenbar_supremacy_by_drift"], [2, 5, 1, "", "error_by_drift"]], "quapy.protocol": [[2, 1, 1, "", "APP"], [2, 1, 1, "", "AbstractProtocol"], [2, 1, 1, "", "AbstractStochasticSeededProtocol"], [2, 4, 1, "", "ArtificialPrevalenceProtocol"], [2, 1, 1, "", "DomainMixer"], [2, 1, 1, "", "IterateProtocol"], [2, 1, 1, "", "NPP"], [2, 4, 1, "", "NaturalPrevalenceProtocol"], [2, 1, 1, "", "OnLabelledCollectionProtocol"], [2, 1, 1, "", "UPP"], [2, 4, 1, "", "UniformPrevalenceProtocol"]], "quapy.protocol.APP": [[2, 3, 1, "", "prevalence_grid"], [2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.AbstractProtocol": [[2, 3, 1, "", "total"]], "quapy.protocol.AbstractStochasticSeededProtocol": [[2, 3, 1, "", "collator"], [2, 2, 1, "", "random_state"], [2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"]], "quapy.protocol.DomainMixer": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.IterateProtocol": [[2, 3, 1, "", "total"]], "quapy.protocol.NPP": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.OnLabelledCollectionProtocol": [[2, 4, 1, "", "RETURN_TYPES"], [2, 3, 1, "", "get_collator"], [2, 3, 1, "", "get_labelled_collection"], [2, 3, 1, "", "on_preclassified_instances"]], "quapy.protocol.UPP": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.util": [[2, 1, 1, "", "EarlyStop"], [2, 5, 1, "", "create_if_not_exist"], [2, 5, 1, "", "create_parent_dir"], [2, 5, 1, "", "download_file"], [2, 5, 1, "", "download_file_if_not_exists"], [2, 5, 1, "", "get_quapy_home"], [2, 5, 1, "", "load_report"], [2, 5, 1, "", "map_parallel"], [2, 5, 1, "", "parallel"], [2, 5, 1, "", "parallel_unpack"], [2, 5, 1, "", "pickled_resource"], [2, 5, 1, "", "save_text_file"], [2, 5, 1, "", "temp_seed"], [2, 5, 1, "", "timeout"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"welcom": 0, "quapi": [0, 1, 2, 3, 4, 5], "": 0, "document": 0, "instal": 0, "github": 0, "content": [0, 2, 3, 4, 5], "indic": 0, "tabl": 0, "packag": [2, 3, 4, 5], "subpackag": 2, "submodul": [2, 3, 4, 5], "error": [2, 7, 12], "modul": [2, 3, 4, 5], "evalu": [2, 7], "function": 2, "model_select": 2, "plot": [2, 12], "protocol": [2, 7, 13], "util": 2, "classif": [3, 11], "calibr": 3, "method": [3, 5, 10], "neural": [3, 10], "svmperf": 3, "data": [4, 6], "base": [4, 5], "dataset": [4, 6], "preprocess": 4, "reader": 4, "aggreg": [5, 10], "meta": [5, 10], "non_aggreg": 5, "compos": 5, "guidelin": [], "review": 6, "twitter": 6, "sentiment": 6, "uci": 6, "machin": 6, "learn": 6, "binari": 6, "issu": 6, "multiclass": 6, "lequa": 6, "2022": 6, "ifcb": 6, "plankton": 6, "ad": 6, "custom": 6, "process": 6, "wiki": 0, "measur": 7, "explicit": [8, 10], "loss": [8, 10, 11], "minim": [8, 10], "quantif": [10, 11, 12], "The": 10, "classifi": 10, "count": 10, "variant": 10, "bayesiancc": 10, "new": 10, "v0": 10, "1": 10, "9": 10, "expect": 10, "maxim": 10, "emq": 10, "helling": 10, "distanc": 10, "y": 10, "hdy": 10, "threshold": 10, "optim": 10, "kernel": 10, "densiti": 10, "estim": 10, "kdei": 10, "model": [10, 11], "ensembl": 10, "quanet": 10, "network": 10, "select": 11, "target": 11, "orient": 11, "diagon": 12, "bia": 12, "drift": 12, "artifici": 13, "preval": 13, "sampl": 13, "from": 13, "unit": 13, "simplex": 13, "uniform": 13, "upp": 13, "natur": 13, "other": 13}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Welcome to QuaPy\u2019s documentation!": [[0, "welcome-to-quapy-s-documentation"]], "Installation": [[0, "installation"]], "GitHub": [[0, "github"]], "Wiki Documents": [[0, "wiki-documents"]], "Contents": [[0, "contents"]], "Indices and tables": [[0, "indices-and-tables"]], "quapy": [[1, "quapy"]], "quapy package": [[2, "quapy-package"]], "Subpackages": [[2, "subpackages"]], "Submodules": [[2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"]], "quapy.error module": [[2, "module-quapy.error"]], "quapy.evaluation module": [[2, "module-quapy.evaluation"]], "quapy.functional module": [[2, "module-quapy.functional"]], "quapy.model_selection module": [[2, "module-quapy.model_selection"]], "quapy.plot module": [[2, "module-quapy.plot"]], "quapy.protocol module": [[2, "module-quapy.protocol"]], "quapy.util module": [[2, "module-quapy.util"]], "Module contents": [[2, "module-quapy"], [3, "module-quapy.classification"], [4, "module-quapy.data"], [5, "module-quapy.method"]], "quapy.classification package": [[3, "quapy-classification-package"]], "quapy.classification.calibration module": [[3, "module-quapy.classification.calibration"]], "quapy.classification.methods module": [[3, "module-quapy.classification.methods"]], "quapy.classification.neural module": [[3, "module-quapy.classification.neural"]], "quapy.classification.svmperf module": [[3, "module-quapy.classification.svmperf"]], "quapy.data package": [[4, "quapy-data-package"]], "quapy.data.base module": [[4, "module-quapy.data.base"]], "quapy.data.datasets module": [[4, "module-quapy.data.datasets"]], "quapy.data.preprocessing module": [[4, "module-quapy.data.preprocessing"]], "quapy.data.reader module": [[4, "module-quapy.data.reader"]], "quapy.method package": [[5, "quapy-method-package"]], "quapy.method.aggregative module": [[5, "module-quapy.method.aggregative"]], "quapy.method.base module": [[5, "module-quapy.method.base"]], "quapy.method.meta module": [[5, "module-quapy.method.meta"]], "quapy.method.non_aggregative module": [[5, "module-quapy.method.non_aggregative"]], "quapy.method.composable module": [[5, "quapy-method-composable-module"]], "Datasets": [[6, "datasets"]], "Reviews Datasets": [[6, "reviews-datasets"]], "Twitter Sentiment Datasets": [[6, "twitter-sentiment-datasets"]], "UCI Machine Learning": [[6, "uci-machine-learning"]], "Binary datasets": [[6, "binary-datasets"]], "Issues:": [[6, "issues"]], "Multiclass datasets": [[6, "multiclass-datasets"]], "LeQua 2022 Datasets": [[6, "lequa-2022-datasets"]], "IFCB Plankton dataset": [[6, "ifcb-plankton-dataset"]], "Adding Custom Datasets": [[6, "adding-custom-datasets"]], "Data Processing": [[6, "data-processing"]], "Evaluation": [[7, "evaluation"]], "Error Measures": [[7, "error-measures"]], "Evaluation Protocols": [[7, "evaluation-protocols"]], "Explicit Loss Minimization": [[8, "explicit-loss-minimization"], [10, "explicit-loss-minimization"]], "Quantification Methods": [[10, "quantification-methods"]], "Aggregative Methods": [[10, "aggregative-methods"]], "The Classify & Count variants": [[10, "the-classify-count-variants"]], "BayesianCC (New in v0.1.9!)": [[10, "bayesiancc-new-in-v0-1-9"]], "Expectation Maximization (EMQ)": [[10, "expectation-maximization-emq"]], "Hellinger Distance y (HDy)": [[10, "hellinger-distance-y-hdy"]], "Threshold Optimization methods": [[10, "threshold-optimization-methods"]], "Kernel Density Estimation methods (KDEy)": [[10, "kernel-density-estimation-methods-kdey"]], "Meta Models": [[10, "meta-models"]], "Ensembles": [[10, "ensembles"]], "The QuaNet neural network": [[10, "the-quanet-neural-network"]], "Model Selection": [[11, "model-selection"]], "Targeting a Quantification-oriented loss": [[11, "targeting-a-quantification-oriented-loss"]], "Targeting a Classification-oriented loss": [[11, "targeting-a-classification-oriented-loss"]], "Plotting": [[12, "plotting"]], "Diagonal Plot": [[12, "diagonal-plot"]], "Quantification bias": [[12, "quantification-bias"]], "Error by Drift": [[12, "error-by-drift"]], "Protocols": [[13, "protocols"]], "Artificial-Prevalence Protocol": [[13, "artificial-prevalence-protocol"]], "Sampling from the unit-simplex, the Uniform-Prevalence Protocol (UPP)": [[13, "sampling-from-the-unit-simplex-the-uniform-prevalence-protocol-upp"]], "Natural-Prevalence Protocol": [[13, "natural-prevalence-protocol"]], "Other protocols": [[13, "other-protocols"]]}, "indexentries": {"app (class in quapy.protocol)": [[2, "quapy.protocol.APP"]], "abstractprotocol (class in quapy.protocol)": [[2, "quapy.protocol.AbstractProtocol"]], "abstractstochasticseededprotocol (class in quapy.protocol)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol"]], "artificialprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.ArtificialPrevalenceProtocol"]], "configstatus (class in quapy.model_selection)": [[2, "quapy.model_selection.ConfigStatus"]], "domainmixer (class in quapy.protocol)": [[2, "quapy.protocol.DomainMixer"]], "error (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.ERROR"]], "earlystop (class in quapy.util)": [[2, "quapy.util.EarlyStop"]], "gridsearchq (class in quapy.model_selection)": [[2, "quapy.model_selection.GridSearchQ"]], "hellingerdistance() (in module quapy.functional)": [[2, "quapy.functional.HellingerDistance"]], "invalid (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.INVALID"]], "iterateprotocol (class in quapy.protocol)": [[2, "quapy.protocol.IterateProtocol"]], "npp (class in quapy.protocol)": [[2, "quapy.protocol.NPP"]], "naturalprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.NaturalPrevalenceProtocol"]], "onlabelledcollectionprotocol (class in quapy.protocol)": [[2, "quapy.protocol.OnLabelledCollectionProtocol"]], "return_types (quapy.protocol.onlabelledcollectionprotocol attribute)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.RETURN_TYPES"]], "success (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.SUCCESS"]], "status (class in quapy.model_selection)": [[2, "quapy.model_selection.Status"]], "timeout (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.TIMEOUT"]], "topsoedistance() (in module quapy.functional)": [[2, "quapy.functional.TopsoeDistance"]], "upp (class in quapy.protocol)": [[2, "quapy.protocol.UPP"]], "uniformprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.UniformPrevalenceProtocol"]], "absolute_error() (in module quapy.error)": [[2, "quapy.error.absolute_error"]], "acc_error() (in module quapy.error)": [[2, "quapy.error.acc_error"]], "acce() (in module quapy.error)": [[2, "quapy.error.acce"]], "ae() (in module quapy.error)": [[2, "quapy.error.ae"]], "argmin_prevalence() (in module quapy.functional)": [[2, "quapy.functional.argmin_prevalence"]], "as_binary_prevalence() (in module quapy.functional)": [[2, "quapy.functional.as_binary_prevalence"]], "best_model() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.best_model"]], "binary_bias_bins() (in module quapy.plot)": [[2, "quapy.plot.binary_bias_bins"]], "binary_bias_global() (in module quapy.plot)": [[2, "quapy.plot.binary_bias_global"]], "binary_diagonal() (in module quapy.plot)": [[2, "quapy.plot.binary_diagonal"]], "brokenbar_supremacy_by_drift() (in module quapy.plot)": [[2, "quapy.plot.brokenbar_supremacy_by_drift"]], "check_prevalence_vector() (in module quapy.functional)": [[2, "quapy.functional.check_prevalence_vector"]], "clip() (in module quapy.functional)": [[2, "quapy.functional.clip"]], "collator() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.collator"]], "condsoftmax() (in module quapy.functional)": [[2, "quapy.functional.condsoftmax"]], "counts_from_labels() (in module quapy.functional)": [[2, "quapy.functional.counts_from_labels"]], "create_if_not_exist() (in module quapy.util)": [[2, "quapy.util.create_if_not_exist"]], "create_parent_dir() (in module quapy.util)": [[2, "quapy.util.create_parent_dir"]], "cross_val_predict() (in module quapy.model_selection)": [[2, "quapy.model_selection.cross_val_predict"]], "download_file() (in module quapy.util)": [[2, "quapy.util.download_file"]], "download_file_if_not_exists() (in module quapy.util)": [[2, "quapy.util.download_file_if_not_exists"]], "error_by_drift() (in module quapy.plot)": [[2, "quapy.plot.error_by_drift"]], "evaluate() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluate"]], "evaluate_on_samples() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluate_on_samples"]], "evaluation_report() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluation_report"]], "expand_grid() (in module quapy.model_selection)": [[2, "quapy.model_selection.expand_grid"]], "f1_error() (in module quapy.error)": [[2, "quapy.error.f1_error"]], "f1e() (in module quapy.error)": [[2, "quapy.error.f1e"]], "failed() (quapy.model_selection.configstatus method)": [[2, "quapy.model_selection.ConfigStatus.failed"]], "fit() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.fit"]], "from_name() (in module quapy.error)": [[2, "quapy.error.from_name"]], "get_collator() (quapy.protocol.onlabelledcollectionprotocol class method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.get_collator"]], "get_divergence() (in module quapy.functional)": [[2, "quapy.functional.get_divergence"]], "get_labelled_collection() (quapy.protocol.onlabelledcollectionprotocol method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.get_labelled_collection"]], "get_nprevpoints_approximation() (in module quapy.functional)": [[2, "quapy.functional.get_nprevpoints_approximation"]], "get_params() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.get_params"]], "get_quapy_home() (in module quapy.util)": [[2, "quapy.util.get_quapy_home"]], "group_params() (in module quapy.model_selection)": [[2, "quapy.model_selection.group_params"]], "kld() (in module quapy.error)": [[2, "quapy.error.kld"]], "l1_norm() (in module quapy.functional)": [[2, "quapy.functional.l1_norm"]], "linear_search() (in module quapy.functional)": [[2, "quapy.functional.linear_search"]], "load_report() (in module quapy.util)": [[2, "quapy.util.load_report"]], "mae() (in module quapy.error)": [[2, "quapy.error.mae"]], "map_parallel() (in module quapy.util)": [[2, "quapy.util.map_parallel"]], "mean_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_absolute_error"]], "mean_normalized_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_normalized_absolute_error"]], "mean_normalized_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_normalized_relative_absolute_error"]], "mean_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_relative_absolute_error"]], "mkld() (in module quapy.error)": [[2, "quapy.error.mkld"]], "mnae() (in module quapy.error)": [[2, "quapy.error.mnae"]], "mnkld() (in module quapy.error)": [[2, "quapy.error.mnkld"]], "mnrae() (in module quapy.error)": [[2, "quapy.error.mnrae"]], "module": [[2, "module-quapy"], [2, "module-quapy.error"], [2, "module-quapy.evaluation"], [2, "module-quapy.functional"], [2, "module-quapy.model_selection"], [2, "module-quapy.plot"], [2, "module-quapy.protocol"], [2, "module-quapy.util"], [3, "module-quapy.classification"], [3, "module-quapy.classification.calibration"], [3, "module-quapy.classification.methods"], [3, "module-quapy.classification.neural"], [3, "module-quapy.classification.svmperf"], [4, "module-quapy.data"], [4, "module-quapy.data.base"], [4, "module-quapy.data.datasets"], [4, "module-quapy.data.preprocessing"], [4, "module-quapy.data.reader"], [5, "module-quapy.method"], [5, "module-quapy.method._kdey"], [5, "module-quapy.method._neural"], [5, "module-quapy.method._threshold_optim"], [5, "module-quapy.method.aggregative"], [5, "module-quapy.method.base"], [5, "module-quapy.method.composable"], [5, "module-quapy.method.meta"], [5, "module-quapy.method.non_aggregative"]], "mrae() (in module quapy.error)": [[2, "quapy.error.mrae"]], "mse() (in module quapy.error)": [[2, "quapy.error.mse"]], "nae() (in module quapy.error)": [[2, "quapy.error.nae"]], "nkld() (in module quapy.error)": [[2, "quapy.error.nkld"]], "normalize_prevalence() (in module quapy.functional)": [[2, "quapy.functional.normalize_prevalence"]], "normalized_absolute_error() (in module quapy.error)": [[2, "quapy.error.normalized_absolute_error"]], "normalized_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.normalized_relative_absolute_error"]], "nrae() (in module quapy.error)": [[2, "quapy.error.nrae"]], "num_prevalence_combinations() (in module quapy.functional)": [[2, "quapy.functional.num_prevalence_combinations"]], "on_preclassified_instances() (quapy.protocol.onlabelledcollectionprotocol method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.on_preclassified_instances"]], "optim_minimize() (in module quapy.functional)": [[2, "quapy.functional.optim_minimize"]], "parallel() (in module quapy.util)": [[2, "quapy.util.parallel"]], "parallel_unpack() (in module quapy.util)": [[2, "quapy.util.parallel_unpack"]], "pickled_resource() (in module quapy.util)": [[2, "quapy.util.pickled_resource"]], "prediction() (in module quapy.evaluation)": [[2, "quapy.evaluation.prediction"]], "prevalence_from_labels() (in module quapy.functional)": [[2, "quapy.functional.prevalence_from_labels"]], "prevalence_from_probabilities() (in module quapy.functional)": [[2, "quapy.functional.prevalence_from_probabilities"]], "prevalence_grid() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.prevalence_grid"]], "prevalence_linspace() (in module quapy.functional)": [[2, "quapy.functional.prevalence_linspace"]], "projection_simplex_sort() (in module quapy.functional)": [[2, "quapy.functional.projection_simplex_sort"]], "quantify() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.quantify"]], "quapy": [[2, "module-quapy"]], "quapy.error": [[2, "module-quapy.error"]], "quapy.evaluation": [[2, "module-quapy.evaluation"]], "quapy.functional": [[2, "module-quapy.functional"]], "quapy.model_selection": [[2, "module-quapy.model_selection"]], "quapy.plot": [[2, "module-quapy.plot"]], "quapy.protocol": [[2, "module-quapy.protocol"]], "quapy.util": [[2, "module-quapy.util"]], "rae() (in module quapy.error)": [[2, "quapy.error.rae"]], "random_state (quapy.protocol.abstractstochasticseededprotocol property)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.random_state"]], "relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.relative_absolute_error"]], "sample() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.sample"]], "sample() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.sample"]], "sample() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.sample"]], "sample() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.sample"]], "sample() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.sample"]], "samples_parameters() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.samples_parameters"]], "samples_parameters() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.samples_parameters"]], "samples_parameters() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.samples_parameters"]], "samples_parameters() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.samples_parameters"]], "samples_parameters() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.samples_parameters"]], "save_text_file() (in module quapy.util)": [[2, "quapy.util.save_text_file"]], "se() (in module quapy.error)": [[2, "quapy.error.se"]], "set_params() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.set_params"]], "smooth() (in module quapy.error)": [[2, "quapy.error.smooth"]], "softmax() (in module quapy.functional)": [[2, "quapy.functional.softmax"]], "solve_adjustment() (in module quapy.functional)": [[2, "quapy.functional.solve_adjustment"]], "solve_adjustment_binary() (in module quapy.functional)": [[2, "quapy.functional.solve_adjustment_binary"]], "strprev() (in module quapy.functional)": [[2, "quapy.functional.strprev"]], "success() (quapy.model_selection.configstatus method)": [[2, "quapy.model_selection.ConfigStatus.success"]], "temp_seed() (in module quapy.util)": [[2, "quapy.util.temp_seed"]], "ternary_search() (in module quapy.functional)": [[2, "quapy.functional.ternary_search"]], "timeout() (in module quapy.util)": [[2, "quapy.util.timeout"]], "total() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.total"]], "total() (quapy.protocol.abstractprotocol method)": [[2, "quapy.protocol.AbstractProtocol.total"]], "total() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.total"]], "total() (quapy.protocol.iterateprotocol method)": [[2, "quapy.protocol.IterateProtocol.total"]], "total() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.total"]], "total() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.total"]], "uniform_prevalence() (in module quapy.functional)": [[2, "quapy.functional.uniform_prevalence"]], "uniform_prevalence_sampling() (in module quapy.functional)": [[2, "quapy.functional.uniform_prevalence_sampling"]], "uniform_simplex_sampling() (in module quapy.functional)": [[2, "quapy.functional.uniform_simplex_sampling"]], "bctscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.BCTSCalibration"]], "cnnnet (class in quapy.classification.neural)": [[3, "quapy.classification.neural.CNNnet"]], "lstmnet (class in quapy.classification.neural)": [[3, "quapy.classification.neural.LSTMnet"]], "lowranklogisticregression (class in quapy.classification.methods)": [[3, "quapy.classification.methods.LowRankLogisticRegression"]], "nbvscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.NBVSCalibration"]], "neuralclassifiertrainer (class in quapy.classification.neural)": [[3, "quapy.classification.neural.NeuralClassifierTrainer"]], "recalibratedprobabilisticclassifier (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifier"]], "recalibratedprobabilisticclassifierbase (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase"]], "svmperf (class in quapy.classification.svmperf)": [[3, "quapy.classification.svmperf.SVMperf"]], "tscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.TSCalibration"]], "textclassifiernet (class in quapy.classification.neural)": [[3, "quapy.classification.neural.TextClassifierNet"]], "torchdataset (class in quapy.classification.neural)": [[3, "quapy.classification.neural.TorchDataset"]], "vscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.VSCalibration"]], "asdataloader() (quapy.classification.neural.torchdataset method)": [[3, "quapy.classification.neural.TorchDataset.asDataloader"]], "classes_ (quapy.classification.calibration.recalibratedprobabilisticclassifierbase property)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.classes_"]], "decision_function() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.decision_function"]], "device (quapy.classification.neural.neuralclassifiertrainer property)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.device"]], "dimensions() (quapy.classification.neural.textclassifiernet method)": [[3, "quapy.classification.neural.TextClassifierNet.dimensions"]], "document_embedding() (quapy.classification.neural.cnnnet method)": [[3, "quapy.classification.neural.CNNnet.document_embedding"]], "document_embedding() (quapy.classification.neural.lstmnet method)": [[3, "quapy.classification.neural.LSTMnet.document_embedding"]], "document_embedding() (quapy.classification.neural.textclassifiernet method)": [[3, "quapy.classification.neural.TextClassifierNet.document_embedding"]], "fit() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit"]], "fit() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.fit"]], "fit() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.fit"]], "fit() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.fit"]], "fit_cv() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_cv"]], "fit_tr_val() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_tr_val"]], "forward() (quapy.classification.neural.textclassifiernet method)": [[3, "quapy.classification.neural.TextClassifierNet.forward"]], "get_params() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.get_params"]], "get_params() (quapy.classification.neural.cnnnet method)": [[3, "quapy.classification.neural.CNNnet.get_params"]], "get_params() (quapy.classification.neural.lstmnet method)": [[3, "quapy.classification.neural.LSTMnet.get_params"]], "get_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.get_params"]], "get_params() (quapy.classification.neural.textclassifiernet method)": [[3, "quapy.classification.neural.TextClassifierNet.get_params"]], "predict() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict"]], "predict() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.predict"]], "predict() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.predict"]], "predict() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.predict"]], "predict_proba() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict_proba"]], "predict_proba() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.predict_proba"]], "predict_proba() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.predict_proba"]], "predict_proba() (quapy.classification.neural.textclassifiernet method)": [[3, "quapy.classification.neural.TextClassifierNet.predict_proba"]], "quapy.classification": [[3, "module-quapy.classification"]], "quapy.classification.calibration": [[3, "module-quapy.classification.calibration"]], "quapy.classification.methods": [[3, "module-quapy.classification.methods"]], "quapy.classification.neural": [[3, "module-quapy.classification.neural"]], "quapy.classification.svmperf": [[3, "module-quapy.classification.svmperf"]], "reset_net_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.reset_net_params"]], "set_params() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.set_params"]], "set_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.set_params"]], "training (quapy.classification.neural.cnnnet attribute)": [[3, "quapy.classification.neural.CNNnet.training"]], "training (quapy.classification.neural.lstmnet attribute)": [[3, "quapy.classification.neural.LSTMnet.training"]], "training (quapy.classification.neural.textclassifiernet attribute)": [[3, "quapy.classification.neural.TextClassifierNet.training"]], "transform() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.transform"]], "transform() (quapy.classification.neural.neuralclassifiertrainer method)": [[3, "quapy.classification.neural.NeuralClassifierTrainer.transform"]], "valid_losses (quapy.classification.svmperf.svmperf attribute)": [[3, "quapy.classification.svmperf.SVMperf.valid_losses"]], "vocabulary_size (quapy.classification.neural.cnnnet property)": [[3, "quapy.classification.neural.CNNnet.vocabulary_size"]], "vocabulary_size (quapy.classification.neural.lstmnet property)": [[3, "quapy.classification.neural.LSTMnet.vocabulary_size"]], "vocabulary_size (quapy.classification.neural.textclassifiernet property)": [[3, "quapy.classification.neural.TextClassifierNet.vocabulary_size"]], "xavier_uniform() (quapy.classification.neural.textclassifiernet method)": [[3, "quapy.classification.neural.TextClassifierNet.xavier_uniform"]], "dataset (class in quapy.data.base)": [[4, "quapy.data.base.Dataset"]], "indextransformer (class in quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.IndexTransformer"]], "labelledcollection (class in quapy.data.base)": [[4, "quapy.data.base.LabelledCollection"]], "splitstratified() (quapy.data.base.dataset class method)": [[4, "quapy.data.base.Dataset.SplitStratified"]], "x (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.X"]], "xp (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.Xp"]], "xy (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.Xy"]], "add_word() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.add_word"]], "binarize() (in module quapy.data.reader)": [[4, "quapy.data.reader.binarize"]], "binary (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.binary"]], "binary (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.binary"]], "classes_ (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.classes_"]], "counts() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.counts"]], "fetch_ifcb() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_IFCB"]], "fetch_ucibinarydataset() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIBinaryDataset"]], "fetch_ucibinarylabelledcollection() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIBinaryLabelledCollection"]], "fetch_ucimulticlassdataset() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIMulticlassDataset"]], "fetch_ucimulticlasslabelledcollection() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIMulticlassLabelledCollection"]], "fetch_lequa2022() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_lequa2022"]], "fetch_reviews() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_reviews"]], "fetch_twitter() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_twitter"]], "fit() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.fit"]], "fit_transform() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.fit_transform"]], "from_csv() (in module quapy.data.reader)": [[4, "quapy.data.reader.from_csv"]], "from_sparse() (in module quapy.data.reader)": [[4, "quapy.data.reader.from_sparse"]], "from_text() (in module quapy.data.reader)": [[4, "quapy.data.reader.from_text"]], "index() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.index"]], "join() (quapy.data.base.labelledcollection class method)": [[4, "quapy.data.base.LabelledCollection.join"]], "kfcv() (quapy.data.base.dataset class method)": [[4, "quapy.data.base.Dataset.kFCV"]], "kfcv() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.kFCV"]], "load() (quapy.data.base.dataset class method)": [[4, "quapy.data.base.Dataset.load"]], "load() (quapy.data.base.labelledcollection class method)": [[4, "quapy.data.base.LabelledCollection.load"]], "n_classes (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.n_classes"]], "n_classes (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.n_classes"]], "p (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.p"]], "prevalence() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.prevalence"]], "quapy.data": [[4, "module-quapy.data"]], "quapy.data.base": [[4, "module-quapy.data.base"]], "quapy.data.datasets": [[4, "module-quapy.data.datasets"]], "quapy.data.preprocessing": [[4, "module-quapy.data.preprocessing"]], "quapy.data.reader": [[4, "module-quapy.data.reader"]], "reduce() (quapy.data.base.dataset method)": [[4, "quapy.data.base.Dataset.reduce"]], "reduce_columns() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.reduce_columns"]], "reindex_labels() (in module quapy.data.reader)": [[4, "quapy.data.reader.reindex_labels"]], "sampling() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.sampling"]], "sampling_from_index() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.sampling_from_index"]], "sampling_index() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.sampling_index"]], "split_random() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.split_random"]], "split_stratified() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.split_stratified"]], "standardize() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.standardize"]], "stats() (quapy.data.base.dataset method)": [[4, "quapy.data.base.Dataset.stats"]], "stats() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.stats"]], "text2tfidf() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.text2tfidf"]], "train_test (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.train_test"]], "transform() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.transform"]], "uniform_sampling() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.uniform_sampling"]], "uniform_sampling_index() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.uniform_sampling_index"]], "vocabulary_size (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.vocabulary_size"]], "vocabulary_size() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.vocabulary_size"]], "warn() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.warn"]], "y (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.y"]], "acc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.ACC"]], "adjustedclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.AdjustedClassifyAndCount"]], "aggregativecrispquantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeCrispQuantifier"]], "aggregativemedianestimator (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator"]], "aggregativequantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeQuantifier"]], "aggregativesoftquantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeSoftQuantifier"]], "bandwidth_method (quapy.method._kdey.kdebase attribute)": [[5, "quapy.method._kdey.KDEBase.BANDWIDTH_METHOD"]], "basequantifier (class in quapy.method.base)": [[5, "quapy.method.base.BaseQuantifier"]], "bayesiancc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.BayesianCC"]], "binaryaggregativequantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier"]], "binaryquantifier (class in quapy.method.base)": [[5, "quapy.method.base.BinaryQuantifier"]], "blobelloss (class in quapy.method.composable)": [[5, "quapy.method.composable.BlobelLoss"]], "cc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.CC"]], "cvclassifier (class in quapy.method.composable)": [[5, "quapy.method.composable.CVClassifier"]], "classtransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.ClassTransformer"]], "classifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ClassifyAndCount"]], "combinedloss (class in quapy.method.composable)": [[5, "quapy.method.composable.CombinedLoss"]], "composablequantifier() (in module quapy.method.composable)": [[5, "quapy.method.composable.ComposableQuantifier"]], "dmx (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.DMx"]], "dmy (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.DMy"]], "distancetransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.DistanceTransformer"]], "distributionmatchingx (in module quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.DistributionMatchingX"]], "distributionmatchingy (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.DistributionMatchingY"]], "dys (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.DyS"]], "eacc() (in module quapy.method.meta)": [[5, "quapy.method.meta.EACC"]], "ecc() (in module quapy.method.meta)": [[5, "quapy.method.meta.ECC"]], "eemq() (in module quapy.method.meta)": [[5, "quapy.method.meta.EEMQ"]], "ehdy() (in module quapy.method.meta)": [[5, "quapy.method.meta.EHDy"]], "em() (quapy.method.aggregative.emq class method)": [[5, "quapy.method.aggregative.EMQ.EM"]], "emq (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.EMQ"]], "emq_bcts() (quapy.method.aggregative.emq class method)": [[5, "quapy.method.aggregative.EMQ.EMQ_BCTS"]], "epacc() (in module quapy.method.meta)": [[5, "quapy.method.meta.EPACC"]], "epsilon (quapy.method.aggregative.emq attribute)": [[5, "quapy.method.aggregative.EMQ.EPSILON"]], "energykerneltransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.EnergyKernelTransformer"]], "energyloss (class in quapy.method.composable)": [[5, "quapy.method.composable.EnergyLoss"]], "ensemble (class in quapy.method.meta)": [[5, "quapy.method.meta.Ensemble"]], "expectationmaximizationquantifier (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ExpectationMaximizationQuantifier"]], "gaussiankerneltransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.GaussianKernelTransformer"]], "gaussianrffkerneltransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.GaussianRFFKernelTransformer"]], "hdx() (quapy.method.non_aggregative.dmx class method)": [[5, "quapy.method.non_aggregative.DMx.HDx"]], "hdy (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.HDy"]], "hellingerdistancey (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.HellingerDistanceY"]], "hellingersurrogateloss (class in quapy.method.composable)": [[5, "quapy.method.composable.HellingerSurrogateLoss"]], "histogramtransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.HistogramTransformer"]], "kdebase (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEBase"]], "kdeycs (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyCS"]], "kdeyhd (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyHD"]], "kdeyml (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyML"]], "kerneltransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.KernelTransformer"]], "laplaciankerneltransformer (class in quapy.method.composable)": [[5, "quapy.method.composable.LaplacianKernelTransformer"]], "leastsquaresloss (class in quapy.method.composable)": [[5, "quapy.method.composable.LeastSquaresLoss"]], "max (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MAX"]], "max_iter (quapy.method.aggregative.emq attribute)": [[5, "quapy.method.aggregative.EMQ.MAX_ITER"]], "methods (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.METHODS"]], "ms (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MS"]], "ms2 (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MS2"]], "maximumlikelihoodprevalenceestimation (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation"]], "medianestimator (class in quapy.method.meta)": [[5, "quapy.method.meta.MedianEstimator"]], "medianestimator2 (class in quapy.method.meta)": [[5, "quapy.method.meta.MedianEstimator2"]], "normalizations (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.NORMALIZATIONS"]], "onevsall (class in quapy.method.base)": [[5, "quapy.method.base.OneVsAll"]], "onevsallaggregative (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.OneVsAllAggregative"]], "onevsallgeneric (class in quapy.method.base)": [[5, "quapy.method.base.OneVsAllGeneric"]], "pacc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.PACC"]], "pcc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.PCC"]], "probabilisticadjustedclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ProbabilisticAdjustedClassifyAndCount"]], "probabilisticclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ProbabilisticClassifyAndCount"]], "quanetmodule (class in quapy.method._neural)": [[5, "quapy.method._neural.QuaNetModule"]], "quanettrainer (class in quapy.method._neural)": [[5, "quapy.method._neural.QuaNetTrainer"]], "readme (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.ReadMe"]], "sld (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.SLD"]], "smm (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.SMM"]], "solvers (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.SOLVERS"]], "t50 (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.T50"]], "thresholdoptimization (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.ThresholdOptimization"]], "tikhonovregularization (class in quapy.method.composable)": [[5, "quapy.method.composable.TikhonovRegularization"]], "tikhonovregularized() (in module quapy.method.composable)": [[5, "quapy.method.composable.TikhonovRegularized"]], "valid_policies (quapy.method.meta.ensemble attribute)": [[5, "quapy.method.meta.Ensemble.VALID_POLICIES"]], "x (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.X"]], "aggregate() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.aggregate"]], "aggregate() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.aggregate"]], "aggregate() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.aggregate"]], "aggregate() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.aggregate"]], "aggregate() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregate"]], "aggregate() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.aggregate"]], "aggregate() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.aggregate"]], "aggregate() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.aggregate"]], "aggregate() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.aggregate"]], "aggregate() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.aggregate"]], "aggregate() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.aggregate"]], "aggregate() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.aggregate"]], "aggregate() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.aggregate"]], "aggregate() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.aggregate"]], "aggregate() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.aggregate"]], "aggregate() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.aggregate"]], "aggregate() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.aggregate"]], "aggregate_with_threshold() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregate_with_threshold"]], "aggregation_fit() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.aggregation_fit"]], "aggregative (quapy.method.meta.ensemble property)": [[5, "quapy.method.meta.Ensemble.aggregative"]], "classes_ (quapy.method._neural.quanettrainer property)": [[5, "quapy.method._neural.QuaNetTrainer.classes_"]], "classes_ (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classes_"]], "classes_ (quapy.method.base.onevsallgeneric property)": [[5, "quapy.method.base.OneVsAllGeneric.classes_"]], "classifier (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classifier"]], "classifier_fit_predict() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classifier_fit_predict"]], "classify() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classify"]], "classify() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.classify"]], "classify() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.classify"]], "clean_checkpoint() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.clean_checkpoint"]], "clean_checkpoint_dir() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.clean_checkpoint_dir"]], "condition() (quapy.method._threshold_optim.max method)": [[5, "quapy.method._threshold_optim.MAX.condition"]], "condition() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.condition"]], "condition() (quapy.method._threshold_optim.t50 method)": [[5, "quapy.method._threshold_optim.T50.condition"]], "condition() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.condition"]], "condition() (quapy.method._threshold_optim.x method)": [[5, "quapy.method._threshold_optim.X.condition"]], "device (quapy.method._neural.quanetmodule property)": [[5, "quapy.method._neural.QuaNetModule.device"]], "discard() (quapy.method._threshold_optim.ms2 method)": [[5, "quapy.method._threshold_optim.MS2.discard"]], "discard() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.discard"]], "ensemblefactory() (in module quapy.method.meta)": [[5, "quapy.method.meta.ensembleFactory"]], "fit() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.fit"]], "fit() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.fit"]], "fit() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.fit"]], "fit() (quapy.method.aggregative.binaryaggregativequantifier method)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.fit"]], "fit() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.fit"]], "fit() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.fit"]], "fit() (quapy.method.composable.cvclassifier method)": [[5, "quapy.method.composable.CVClassifier.fit"]], "fit() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.fit"]], "fit() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.fit"]], "fit() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.fit"]], "fit() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.fit"]], "fit() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.fit"]], "fit() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.fit"]], "fit_transform() (quapy.method.composable.classtransformer method)": [[5, "quapy.method.composable.ClassTransformer.fit_transform"]], "fit_transform() (quapy.method.composable.distancetransformer method)": [[5, "quapy.method.composable.DistanceTransformer.fit_transform"]], "fit_transform() (quapy.method.composable.energykerneltransformer method)": [[5, "quapy.method.composable.EnergyKernelTransformer.fit_transform"]], "fit_transform() (quapy.method.composable.gaussiankerneltransformer method)": [[5, "quapy.method.composable.GaussianKernelTransformer.fit_transform"]], "fit_transform() (quapy.method.composable.gaussianrffkerneltransformer method)": [[5, "quapy.method.composable.GaussianRFFKernelTransformer.fit_transform"]], "fit_transform() (quapy.method.composable.histogramtransformer method)": [[5, "quapy.method.composable.HistogramTransformer.fit_transform"]], "fit_transform() (quapy.method.composable.kerneltransformer method)": [[5, "quapy.method.composable.KernelTransformer.fit_transform"]], "forward() (quapy.method._neural.quanetmodule method)": [[5, "quapy.method._neural.QuaNetModule.forward"]], "getptecondestim() (quapy.method.aggregative.acc class method)": [[5, "quapy.method.aggregative.ACC.getPteCondEstim"]], "getptecondestim() (quapy.method.aggregative.pacc class method)": [[5, "quapy.method.aggregative.PACC.getPteCondEstim"]], "get_conditional_probability_samples() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.get_conditional_probability_samples"]], "get_kde_function() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.get_kde_function"]], "get_mixture_components() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.get_mixture_components"]], "get_params() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.get_params"]], "get_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.get_params"]], "get_params() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.get_params"]], "get_params() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.get_params"]], "get_params() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.get_params"]], "get_prevalence_samples() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.get_prevalence_samples"]], "get_probability_distribution() (in module quapy.method.meta)": [[5, "quapy.method.meta.get_probability_distribution"]], "gram_matrix_mix_sum() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.gram_matrix_mix_sum"]], "kernel (quapy.method.composable.laplaciankerneltransformer property)": [[5, "quapy.method.composable.LaplacianKernelTransformer.kernel"]], "mae_loss() (in module quapy.method._neural)": [[5, "quapy.method._neural.mae_loss"]], "neg_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.neg_label"]], "newelm() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newELM"]], "newinvariantratioestimation() (quapy.method.aggregative.acc class method)": [[5, "quapy.method.aggregative.ACC.newInvariantRatioEstimation"]], "newonevsall() (in module quapy.method.base)": [[5, "quapy.method.base.newOneVsAll"]], "newsvmae() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMAE"]], "newsvmkld() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMKLD"]], "newsvmq() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMQ"]], "newsvmrae() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMRAE"]], "pdf() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.pdf"]], "pos_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.pos_label"]], "predict() (quapy.method.composable.cvclassifier method)": [[5, "quapy.method.composable.CVClassifier.predict"]], "predict_proba() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.predict_proba"]], "predict_proba() (quapy.method.composable.cvclassifier method)": [[5, "quapy.method.composable.CVClassifier.predict_proba"]], "probabilistic (quapy.method.meta.ensemble property)": [[5, "quapy.method.meta.Ensemble.probabilistic"]], "quantify() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.quantify"]], "quantify() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.quantify"]], "quantify() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.quantify"]], "quantify() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.quantify"]], "quantify() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.quantify"]], "quantify() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.quantify"]], "quantify() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.quantify"]], "quantify() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.quantify"]], "quantify() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.quantify"]], "quantify() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.quantify"]], "quantify() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.quantify"]], "quapy.method": [[5, "module-quapy.method"]], "quapy.method._kdey": [[5, "module-quapy.method._kdey"]], "quapy.method._neural": [[5, "module-quapy.method._neural"]], "quapy.method._threshold_optim": [[5, "module-quapy.method._threshold_optim"]], "quapy.method.aggregative": [[5, "module-quapy.method.aggregative"]], "quapy.method.base": [[5, "module-quapy.method.base"]], "quapy.method.composable": [[5, "module-quapy.method.composable"]], "quapy.method.meta": [[5, "module-quapy.method.meta"]], "quapy.method.non_aggregative": [[5, "module-quapy.method.non_aggregative"]], "sample_from_posterior() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.sample_from_posterior"]], "set_params() (quapy.method._neural.quanettrainer method)": [[5, "quapy.method._neural.QuaNetTrainer.set_params"]], "set_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.set_params"]], "set_params() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.set_params"]], "set_params() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.set_params"]], "set_params() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.set_params"]], "std_constrained_linear_ls() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.std_constrained_linear_ls"]], "training (quapy.method._neural.quanetmodule attribute)": [[5, "quapy.method._neural.QuaNetModule.training"]], "transform() (quapy.method.composable.classtransformer method)": [[5, "quapy.method.composable.ClassTransformer.transform"]], "transform() (quapy.method.composable.distancetransformer method)": [[5, "quapy.method.composable.DistanceTransformer.transform"]], "transform() (quapy.method.composable.energykerneltransformer method)": [[5, "quapy.method.composable.EnergyKernelTransformer.transform"]], "transform() (quapy.method.composable.gaussiankerneltransformer method)": [[5, "quapy.method.composable.GaussianKernelTransformer.transform"]], "transform() (quapy.method.composable.gaussianrffkerneltransformer method)": [[5, "quapy.method.composable.GaussianRFFKernelTransformer.transform"]], "transform() (quapy.method.composable.histogramtransformer method)": [[5, "quapy.method.composable.HistogramTransformer.transform"]], "transform() (quapy.method.composable.kerneltransformer method)": [[5, "quapy.method.composable.KernelTransformer.transform"]], "val_split (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.val_split"]], "val_split_ (quapy.method.aggregative.aggregativequantifier attribute)": [[5, "quapy.method.aggregative.AggregativeQuantifier.val_split_"]]}})