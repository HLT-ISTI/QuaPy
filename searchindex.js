Search.setIndex({"alltitles": {"Acknowledgments": [[0, "acknowledgments"]], "Adding Custom Datasets": [[2, "adding-custom-datasets"]], "Aggregative Methods": [[5, "aggregative-methods"]], "Artificial-Prevalence Protocol": [[8, "artificial-prevalence-protocol"]], "Basics": [[5, "basics"]], "BayesianCC (New in v0.1.9!)": [[5, "bayesiancc-new-in-v0-1-9"]], "Binary datasets": [[2, "binary-datasets"]], "Citing QuaPy": [[0, "citing-quapy"]], "Composable Methods": [[5, "composable-methods"]], "Contributing": [[0, "contributing"]], "Data Processing": [[2, "data-processing"]], "Datasets": [[2, null]], "Diagonal Plot": [[7, "diagonal-plot"]], "Ensembles": [[5, "ensembles"]], "Error Measures": [[3, "error-measures"]], "Error by Drift": [[7, "error-by-drift"]], "Evaluation": [[3, null]], "Evaluation Protocols": [[3, "evaluation-protocols"]], "Expectation Maximization (EMQ)": [[5, "expectation-maximization-emq"]], "Explicit Loss Minimization": [[4, null], [5, "explicit-loss-minimization"]], "Feature transformations": [[5, "feature-transformations"]], "Features": [[0, "features"]], "Hellinger Distance y (HDy)": [[5, "hellinger-distance-y-hdy"]], "IFCB Plankton dataset": [[2, "ifcb-plankton-dataset"]], "Installation": [[0, "installation"], [5, "installation"]], "Kernel Density Estimation methods (KDEy)": [[5, "kernel-density-estimation-methods-kdey"]], "LeQua 2022 Datasets": [[2, "lequa-2022-datasets"]], "Loss functions": [[5, "loss-functions"]], "Manuals": [[0, "manuals"], [1, null]], "Meta Models": [[5, "meta-models"]], "Model Selection": [[6, null]], "Module contents": [[9, "module-quapy"], [10, "module-quapy.classification"], [11, "module-quapy.data"], [12, "module-quapy.method"]], "Multiclass datasets": [[2, "multiclass-datasets"]], "Natural-Prevalence Protocol": [[8, "natural-prevalence-protocol"]], "Notes:": [[2, "notes"]], "Other protocols": [[8, "other-protocols"]], "Plotting": [[7, null]], "Protocols": [[8, null]], "Quantification Methods": [[5, null]], "Quantification bias": [[7, "quantification-bias"]], "Quickstart": [[0, null]], "Regularization functions": [[5, "regularization-functions"]], "Reviews Datasets": [[2, "reviews-datasets"]], "Sampling from the unit-simplex, the Uniform-Prevalence Protocol (UPP)": [[8, "sampling-from-the-unit-simplex-the-uniform-prevalence-protocol-upp"]], "Submodules": [[9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"]], "Subpackages": [[9, "subpackages"]], "Targeting a Classification-oriented loss": [[6, "targeting-a-classification-oriented-loss"]], "Targeting a Quantification-oriented loss": [[6, "targeting-a-quantification-oriented-loss"]], "The Classify & Count variants": [[5, "the-classify-count-variants"]], "The QuaNet neural network": [[5, "the-quanet-neural-network"]], "Threshold Optimization methods": [[5, "threshold-optimization-methods"]], "Twitter Sentiment Datasets": [[2, "twitter-sentiment-datasets"]], "UCI Machine Learning": [[2, "uci-machine-learning"]], "Usage": [[0, "usage"]], "quapy package": [[9, null]], "quapy.classification package": [[10, null]], "quapy.classification.calibration module": [[10, "module-quapy.classification.calibration"]], "quapy.classification.methods module": [[10, "module-quapy.classification.methods"]], "quapy.classification.neural module": [[10, "module-quapy.classification.neural"]], "quapy.classification.svmperf module": [[10, "module-quapy.classification.svmperf"]], "quapy.data package": [[11, null]], "quapy.data.base module": [[11, "module-quapy.data.base"]], "quapy.data.datasets module": [[11, "module-quapy.data.datasets"]], "quapy.data.preprocessing module": [[11, "module-quapy.data.preprocessing"]], "quapy.data.reader module": [[11, "module-quapy.data.reader"]], "quapy.error module": [[9, "module-quapy.error"]], "quapy.evaluation module": [[9, "module-quapy.evaluation"]], "quapy.functional module": [[9, "module-quapy.functional"]], "quapy.method package": [[12, null]], "quapy.method.aggregative module": [[12, "module-quapy.method.aggregative"]], "quapy.method.base module": [[12, "module-quapy.method.base"]], "quapy.method.composable module": [[12, "module-quapy.method.composable"]], "quapy.method.meta module": [[12, "module-quapy.method.meta"]], "quapy.method.non_aggregative module": [[12, "module-quapy.method.non_aggregative"]], "quapy.model_selection module": [[9, "module-quapy.model_selection"]], "quapy.plot module": [[9, "module-quapy.plot"]], "quapy.protocol module": [[9, "module-quapy.protocol"]], "quapy.util module": [[9, "module-quapy.util"]]}, "docnames": ["index", "manuals", "manuals/datasets", "manuals/evaluation", "manuals/explicit-loss-minimization", "manuals/methods", "manuals/model-selection", "manuals/plotting", "manuals/protocols", "quapy", "quapy.classification", "quapy.data", "quapy.method"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["index.md", "manuals.rst", "manuals/datasets.md", "manuals/evaluation.md", "manuals/explicit-loss-minimization.md", "manuals/methods.md", "manuals/model-selection.md", "manuals/plotting.md", "manuals/protocols.md", "quapy.rst", "quapy.classification.rst", "quapy.data.rst", "quapy.method.rst"], "indexentries": {"absolute_error() (in module quapy.error)": [[9, "quapy.error.absolute_error", false]], "abstractprotocol (class in quapy.protocol)": [[9, "quapy.protocol.AbstractProtocol", false]], "abstractstochasticseededprotocol (class in quapy.protocol)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol", false]], "acc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.ACC", false]], "acc_error() (in module quapy.error)": [[9, "quapy.error.acc_error", false]], "acce() (in module quapy.error)": [[9, "quapy.error.acce", false]], "add_word() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.add_word", false]], "adjustedclassifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.AdjustedClassifyAndCount", false]], "ae() (in module quapy.error)": [[9, "quapy.error.ae", false]], "aggregate() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.aggregate", false]], "aggregate() (quapy.method._kdey.kdeyhd method)": [[12, "quapy.method._kdey.KDEyHD.aggregate", false]], "aggregate() (quapy.method._kdey.kdeyml method)": [[12, "quapy.method._kdey.KDEyML.aggregate", false]], "aggregate() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.aggregate", false]], "aggregate() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.aggregate", false]], "aggregate() (quapy.method.aggregative.acc method)": [[12, "quapy.method.aggregative.ACC.aggregate", false]], "aggregate() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.aggregate", false]], "aggregate() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.aggregate", false]], "aggregate() (quapy.method.aggregative.cc method)": [[12, "quapy.method.aggregative.CC.aggregate", false]], "aggregate() (quapy.method.aggregative.dmy method)": [[12, "quapy.method.aggregative.DMy.aggregate", false]], "aggregate() (quapy.method.aggregative.dys method)": [[12, "quapy.method.aggregative.DyS.aggregate", false]], "aggregate() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.aggregate", false]], "aggregate() (quapy.method.aggregative.hdy method)": [[12, "quapy.method.aggregative.HDy.aggregate", false]], "aggregate() (quapy.method.aggregative.onevsallaggregative method)": [[12, "quapy.method.aggregative.OneVsAllAggregative.aggregate", false]], "aggregate() (quapy.method.aggregative.pacc method)": [[12, "quapy.method.aggregative.PACC.aggregate", false]], "aggregate() (quapy.method.aggregative.pcc method)": [[12, "quapy.method.aggregative.PCC.aggregate", false]], "aggregate() (quapy.method.aggregative.smm method)": [[12, "quapy.method.aggregative.SMM.aggregate", false]], "aggregate_with_threshold() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.aggregate_with_threshold", false]], "aggregation_fit() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.aggregation_fit", false]], "aggregation_fit() (quapy.method._kdey.kdeyhd method)": [[12, "quapy.method._kdey.KDEyHD.aggregation_fit", false]], "aggregation_fit() (quapy.method._kdey.kdeyml method)": [[12, "quapy.method._kdey.KDEyML.aggregation_fit", false]], "aggregation_fit() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.aggregation_fit", false]], "aggregation_fit() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.acc method)": [[12, "quapy.method.aggregative.ACC.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.cc method)": [[12, "quapy.method.aggregative.CC.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.dmy method)": [[12, "quapy.method.aggregative.DMy.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.dys method)": [[12, "quapy.method.aggregative.DyS.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.hdy method)": [[12, "quapy.method.aggregative.HDy.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.pacc method)": [[12, "quapy.method.aggregative.PACC.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.pcc method)": [[12, "quapy.method.aggregative.PCC.aggregation_fit", false]], "aggregation_fit() (quapy.method.aggregative.smm method)": [[12, "quapy.method.aggregative.SMM.aggregation_fit", false]], "aggregative (quapy.method.meta.ensemble property)": [[12, "quapy.method.meta.Ensemble.aggregative", false]], "aggregativecrispquantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeCrispQuantifier", false]], "aggregativemedianestimator (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator", false]], "aggregativequantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeQuantifier", false]], "aggregativesoftquantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeSoftQuantifier", false]], "app (class in quapy.protocol)": [[9, "quapy.protocol.APP", false]], "argmin_prevalence() (in module quapy.functional)": [[9, "quapy.functional.argmin_prevalence", false]], "artificialprevalenceprotocol (in module quapy.protocol)": [[9, "quapy.protocol.ArtificialPrevalenceProtocol", false]], "as_binary_prevalence() (in module quapy.functional)": [[9, "quapy.functional.as_binary_prevalence", false]], "asdataloader() (quapy.classification.neural.torchdataset method)": [[10, "quapy.classification.neural.TorchDataset.asDataloader", false]], "bandwidth_method (quapy.method._kdey.kdebase attribute)": [[12, "quapy.method._kdey.KDEBase.BANDWIDTH_METHOD", false]], "basequantifier (class in quapy.method.base)": [[12, "quapy.method.base.BaseQuantifier", false]], "bayesiancc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.BayesianCC", false]], "bctscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.BCTSCalibration", false]], "best_model() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.best_model", false]], "binarize() (in module quapy.data.reader)": [[11, "quapy.data.reader.binarize", false]], "binary (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.binary", false]], "binary (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.binary", false]], "binary_bias_bins() (in module quapy.plot)": [[9, "quapy.plot.binary_bias_bins", false]], "binary_bias_global() (in module quapy.plot)": [[9, "quapy.plot.binary_bias_global", false]], "binary_diagonal() (in module quapy.plot)": [[9, "quapy.plot.binary_diagonal", false]], "binaryaggregativequantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier", false]], "binaryquantifier (class in quapy.method.base)": [[12, "quapy.method.base.BinaryQuantifier", false]], "blobelloss (class in quapy.method.composable)": [[12, "quapy.method.composable.BlobelLoss", false]], "brokenbar_supremacy_by_drift() (in module quapy.plot)": [[9, "quapy.plot.brokenbar_supremacy_by_drift", false]], "cc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.CC", false]], "check_prevalence_vector() (in module quapy.functional)": [[9, "quapy.functional.check_prevalence_vector", false]], "classes_ (quapy.classification.calibration.recalibratedprobabilisticclassifierbase property)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.classes_", false]], "classes_ (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.classes_", false]], "classes_ (quapy.method._neural.quanettrainer property)": [[12, "quapy.method._neural.QuaNetTrainer.classes_", false]], "classes_ (quapy.method.aggregative.aggregativequantifier property)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classes_", false]], "classes_ (quapy.method.base.onevsallgeneric property)": [[12, "quapy.method.base.OneVsAllGeneric.classes_", false]], "classifier (quapy.method.aggregative.aggregativequantifier property)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classifier", false]], "classifier_fit_predict() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classifier_fit_predict", false]], "classify() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classify", false]], "classify() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.classify", false]], "classify() (quapy.method.aggregative.onevsallaggregative method)": [[12, "quapy.method.aggregative.OneVsAllAggregative.classify", false]], "classifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ClassifyAndCount", false]], "classtransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.ClassTransformer", false]], "clean_checkpoint() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.clean_checkpoint", false]], "clean_checkpoint_dir() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.clean_checkpoint_dir", false]], "clip() (in module quapy.functional)": [[9, "quapy.functional.clip", false]], "cnnnet (class in quapy.classification.neural)": [[10, "quapy.classification.neural.CNNnet", false]], "collator() (quapy.protocol.abstractstochasticseededprotocol method)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.collator", false]], "combinedloss (class in quapy.method.composable)": [[12, "quapy.method.composable.CombinedLoss", false]], "composablequantifier() (in module quapy.method.composable)": [[12, "quapy.method.composable.ComposableQuantifier", false]], "condition() (quapy.method._threshold_optim.max method)": [[12, "quapy.method._threshold_optim.MAX.condition", false]], "condition() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.condition", false]], "condition() (quapy.method._threshold_optim.t50 method)": [[12, "quapy.method._threshold_optim.T50.condition", false]], "condition() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.condition", false]], "condition() (quapy.method._threshold_optim.x method)": [[12, "quapy.method._threshold_optim.X.condition", false]], "condsoftmax() (in module quapy.functional)": [[9, "quapy.functional.condsoftmax", false]], "configstatus (class in quapy.model_selection)": [[9, "quapy.model_selection.ConfigStatus", false]], "counts() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.counts", false]], "counts_from_labels() (in module quapy.functional)": [[9, "quapy.functional.counts_from_labels", false]], "create_if_not_exist() (in module quapy.util)": [[9, "quapy.util.create_if_not_exist", false]], "create_parent_dir() (in module quapy.util)": [[9, "quapy.util.create_parent_dir", false]], "cross_val_predict() (in module quapy.model_selection)": [[9, "quapy.model_selection.cross_val_predict", false]], "cvclassifier (class in quapy.method.composable)": [[12, "quapy.method.composable.CVClassifier", false]], "dataset (class in quapy.data.base)": [[11, "quapy.data.base.Dataset", false]], "decision_function() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.decision_function", false]], "device (quapy.classification.neural.neuralclassifiertrainer property)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.device", false]], "device (quapy.method._neural.quanetmodule property)": [[12, "quapy.method._neural.QuaNetModule.device", false]], "dimensions() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.dimensions", false]], "discard() (quapy.method._threshold_optim.ms2 method)": [[12, "quapy.method._threshold_optim.MS2.discard", false]], "discard() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.discard", false]], "distancetransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.DistanceTransformer", false]], "distributionmatchingx (in module quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.DistributionMatchingX", false]], "distributionmatchingy (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.DistributionMatchingY", false]], "dmx (class in quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.DMx", false]], "dmy (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.DMy", false]], "document_embedding() (quapy.classification.neural.cnnnet method)": [[10, "quapy.classification.neural.CNNnet.document_embedding", false]], "document_embedding() (quapy.classification.neural.lstmnet method)": [[10, "quapy.classification.neural.LSTMnet.document_embedding", false]], "document_embedding() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.document_embedding", false]], "domainmixer (class in quapy.protocol)": [[9, "quapy.protocol.DomainMixer", false]], "download_file() (in module quapy.util)": [[9, "quapy.util.download_file", false]], "download_file_if_not_exists() (in module quapy.util)": [[9, "quapy.util.download_file_if_not_exists", false]], "dys (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.DyS", false]], "eacc() (in module quapy.method.meta)": [[12, "quapy.method.meta.EACC", false]], "earlystop (class in quapy.util)": [[9, "quapy.util.EarlyStop", false]], "ecc() (in module quapy.method.meta)": [[12, "quapy.method.meta.ECC", false]], "eemq() (in module quapy.method.meta)": [[12, "quapy.method.meta.EEMQ", false]], "ehdy() (in module quapy.method.meta)": [[12, "quapy.method.meta.EHDy", false]], "em() (quapy.method.aggregative.emq class method)": [[12, "quapy.method.aggregative.EMQ.EM", false]], "emq (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.EMQ", false]], "emq_bcts() (quapy.method.aggregative.emq class method)": [[12, "quapy.method.aggregative.EMQ.EMQ_BCTS", false]], "energykerneltransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.EnergyKernelTransformer", false]], "energyloss (class in quapy.method.composable)": [[12, "quapy.method.composable.EnergyLoss", false]], "ensemble (class in quapy.method.meta)": [[12, "quapy.method.meta.Ensemble", false]], "ensemblefactory() (in module quapy.method.meta)": [[12, "quapy.method.meta.ensembleFactory", false]], "epacc() (in module quapy.method.meta)": [[12, "quapy.method.meta.EPACC", false]], "epsilon (quapy.method.aggregative.emq attribute)": [[12, "quapy.method.aggregative.EMQ.EPSILON", false]], "error (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.ERROR", false]], "error_by_drift() (in module quapy.plot)": [[9, "quapy.plot.error_by_drift", false]], "evaluate() (in module quapy.evaluation)": [[9, "quapy.evaluation.evaluate", false]], "evaluate_on_samples() (in module quapy.evaluation)": [[9, "quapy.evaluation.evaluate_on_samples", false]], "evaluation_report() (in module quapy.evaluation)": [[9, "quapy.evaluation.evaluation_report", false]], "expand_grid() (in module quapy.model_selection)": [[9, "quapy.model_selection.expand_grid", false]], "expectationmaximizationquantifier (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ExpectationMaximizationQuantifier", false]], "f1_error() (in module quapy.error)": [[9, "quapy.error.f1_error", false]], "f1e() (in module quapy.error)": [[9, "quapy.error.f1e", false]], "failed() (quapy.model_selection.configstatus method)": [[9, "quapy.model_selection.ConfigStatus.failed", false]], "fetch_ifcb() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_IFCB", false]], "fetch_lequa2022() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_lequa2022", false]], "fetch_lequa2024() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_lequa2024", false]], "fetch_reviews() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_reviews", false]], "fetch_twitter() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_twitter", false]], "fetch_ucibinarydataset() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIBinaryDataset", false]], "fetch_ucibinarylabelledcollection() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIBinaryLabelledCollection", false]], "fetch_ucimulticlassdataset() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIMulticlassDataset", false]], "fetch_ucimulticlasslabelledcollection() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIMulticlassLabelledCollection", false]], "fit() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit", false]], "fit() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.fit", false]], "fit() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.fit", false]], "fit() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.fit", false]], "fit() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.fit", false]], "fit() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.fit", false]], "fit() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.fit", false]], "fit() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.fit", false]], "fit() (quapy.method.aggregative.binaryaggregativequantifier method)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.fit", false]], "fit() (quapy.method.base.basequantifier method)": [[12, "quapy.method.base.BaseQuantifier.fit", false]], "fit() (quapy.method.base.onevsallgeneric method)": [[12, "quapy.method.base.OneVsAllGeneric.fit", false]], "fit() (quapy.method.composable.cvclassifier method)": [[12, "quapy.method.composable.CVClassifier.fit", false]], "fit() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.fit", false]], "fit() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.fit", false]], "fit() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.fit", false]], "fit() (quapy.method.non_aggregative.dmx method)": [[12, "quapy.method.non_aggregative.DMx.fit", false]], "fit() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.fit", false]], "fit() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.fit", false]], "fit() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.fit", false]], "fit_cv() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_cv", false]], "fit_tr_val() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_tr_val", false]], "fit_transform() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.classtransformer method)": [[12, "quapy.method.composable.ClassTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.distancetransformer method)": [[12, "quapy.method.composable.DistanceTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.energykerneltransformer method)": [[12, "quapy.method.composable.EnergyKernelTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.gaussiankerneltransformer method)": [[12, "quapy.method.composable.GaussianKernelTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.gaussianrffkerneltransformer method)": [[12, "quapy.method.composable.GaussianRFFKernelTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.histogramtransformer method)": [[12, "quapy.method.composable.HistogramTransformer.fit_transform", false]], "fit_transform() (quapy.method.composable.kerneltransformer method)": [[12, "quapy.method.composable.KernelTransformer.fit_transform", false]], "forward() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.forward", false]], "forward() (quapy.method._neural.quanetmodule method)": [[12, "quapy.method._neural.QuaNetModule.forward", false]], "from_csv() (in module quapy.data.reader)": [[11, "quapy.data.reader.from_csv", false]], "from_name() (in module quapy.error)": [[9, "quapy.error.from_name", false]], "from_sparse() (in module quapy.data.reader)": [[11, "quapy.data.reader.from_sparse", false]], "from_text() (in module quapy.data.reader)": [[11, "quapy.data.reader.from_text", false]], "gaussiankerneltransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.GaussianKernelTransformer", false]], "gaussianrffkerneltransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.GaussianRFFKernelTransformer", false]], "get_collator() (quapy.protocol.onlabelledcollectionprotocol class method)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.get_collator", false]], "get_conditional_probability_samples() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.get_conditional_probability_samples", false]], "get_divergence() (in module quapy.functional)": [[9, "quapy.functional.get_divergence", false]], "get_kde_function() (quapy.method._kdey.kdebase method)": [[12, "quapy.method._kdey.KDEBase.get_kde_function", false]], "get_labelled_collection() (quapy.protocol.onlabelledcollectionprotocol method)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.get_labelled_collection", false]], "get_mixture_components() (quapy.method._kdey.kdebase method)": [[12, "quapy.method._kdey.KDEBase.get_mixture_components", false]], "get_nprevpoints_approximation() (in module quapy.functional)": [[9, "quapy.functional.get_nprevpoints_approximation", false]], "get_params() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.get_params", false]], "get_params() (quapy.classification.neural.cnnnet method)": [[10, "quapy.classification.neural.CNNnet.get_params", false]], "get_params() (quapy.classification.neural.lstmnet method)": [[10, "quapy.classification.neural.LSTMnet.get_params", false]], "get_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.get_params", false]], "get_params() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.get_params", false]], "get_params() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.get_params", false]], "get_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.get_params", false]], "get_params() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.get_params", false]], "get_params() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.get_params", false]], "get_params() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.get_params", false]], "get_params() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.get_params", false]], "get_prevalence_samples() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.get_prevalence_samples", false]], "get_probability_distribution() (in module quapy.method.meta)": [[12, "quapy.method.meta.get_probability_distribution", false]], "get_quapy_home() (in module quapy.util)": [[9, "quapy.util.get_quapy_home", false]], "getptecondestim() (quapy.method.aggregative.acc class method)": [[12, "quapy.method.aggregative.ACC.getPteCondEstim", false]], "getptecondestim() (quapy.method.aggregative.pacc class method)": [[12, "quapy.method.aggregative.PACC.getPteCondEstim", false]], "gram_matrix_mix_sum() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.gram_matrix_mix_sum", false]], "gridsearchq (class in quapy.model_selection)": [[9, "quapy.model_selection.GridSearchQ", false]], "group_params() (in module quapy.model_selection)": [[9, "quapy.model_selection.group_params", false]], "hdx() (quapy.method.non_aggregative.dmx class method)": [[12, "quapy.method.non_aggregative.DMx.HDx", false]], "hdy (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.HDy", false]], "hellingerdistance() (in module quapy.functional)": [[9, "quapy.functional.HellingerDistance", false]], "hellingerdistancey (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.HellingerDistanceY", false]], "hellingersurrogateloss (class in quapy.method.composable)": [[12, "quapy.method.composable.HellingerSurrogateLoss", false]], "histogramtransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.HistogramTransformer", false]], "index() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.index", false]], "indextransformer (class in quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.IndexTransformer", false]], "invalid (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.INVALID", false]], "iterateprotocol (class in quapy.protocol)": [[9, "quapy.protocol.IterateProtocol", false]], "join() (quapy.data.base.labelledcollection class method)": [[11, "quapy.data.base.LabelledCollection.join", false]], "kdebase (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEBase", false]], "kdeycs (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEyCS", false]], "kdeyhd (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEyHD", false]], "kdeyml (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEyML", false]], "kernel (quapy.method.composable.laplaciankerneltransformer property)": [[12, "quapy.method.composable.LaplacianKernelTransformer.kernel", false]], "kerneltransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.KernelTransformer", false]], "kfcv() (quapy.data.base.dataset class method)": [[11, "quapy.data.base.Dataset.kFCV", false]], "kfcv() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.kFCV", false]], "kld() (in module quapy.error)": [[9, "quapy.error.kld", false]], "l1_norm() (in module quapy.functional)": [[9, "quapy.functional.l1_norm", false]], "labelledcollection (class in quapy.data.base)": [[11, "quapy.data.base.LabelledCollection", false]], "laplaciankerneltransformer (class in quapy.method.composable)": [[12, "quapy.method.composable.LaplacianKernelTransformer", false]], "leastsquaresloss (class in quapy.method.composable)": [[12, "quapy.method.composable.LeastSquaresLoss", false]], "linear_search() (in module quapy.functional)": [[9, "quapy.functional.linear_search", false]], "load() (quapy.data.base.dataset class method)": [[11, "quapy.data.base.Dataset.load", false]], "load() (quapy.data.base.labelledcollection class method)": [[11, "quapy.data.base.LabelledCollection.load", false]], "load_report() (in module quapy.util)": [[9, "quapy.util.load_report", false]], "lowranklogisticregression (class in quapy.classification.methods)": [[10, "quapy.classification.methods.LowRankLogisticRegression", false]], "lstmnet (class in quapy.classification.neural)": [[10, "quapy.classification.neural.LSTMnet", false]], "mae() (in module quapy.error)": [[9, "quapy.error.mae", false]], "mae_loss() (in module quapy.method._neural)": [[12, "quapy.method._neural.mae_loss", false]], "map_parallel() (in module quapy.util)": [[9, "quapy.util.map_parallel", false]], "match_distance() (in module quapy.error)": [[9, "quapy.error.match_distance", false]], "max (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.MAX", false]], "max_iter (quapy.method.aggregative.emq attribute)": [[12, "quapy.method.aggregative.EMQ.MAX_ITER", false]], "maximumlikelihoodprevalenceestimation (class in quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation", false]], "md() (in module quapy.error)": [[9, "quapy.error.md", false]], "mean_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_absolute_error", false]], "mean_normalized_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_normalized_absolute_error", false]], "mean_normalized_relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_normalized_relative_absolute_error", false]], "mean_relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_relative_absolute_error", false]], "medianestimator (class in quapy.method.meta)": [[12, "quapy.method.meta.MedianEstimator", false]], "medianestimator2 (class in quapy.method.meta)": [[12, "quapy.method.meta.MedianEstimator2", false]], "methods (quapy.method.aggregative.acc attribute)": [[12, "quapy.method.aggregative.ACC.METHODS", false]], "mkld() (in module quapy.error)": [[9, "quapy.error.mkld", false]], "mnae() (in module quapy.error)": [[9, "quapy.error.mnae", false]], "mnkld() (in module quapy.error)": [[9, "quapy.error.mnkld", false]], "mnrae() (in module quapy.error)": [[9, "quapy.error.mnrae", false]], "module": [[9, "module-quapy", false], [9, "module-quapy.error", false], [9, "module-quapy.evaluation", false], [9, "module-quapy.functional", false], [9, "module-quapy.model_selection", false], [9, "module-quapy.plot", false], [9, "module-quapy.protocol", false], [9, "module-quapy.util", false], [10, "module-quapy.classification", false], [10, "module-quapy.classification.calibration", false], [10, "module-quapy.classification.methods", false], [10, "module-quapy.classification.neural", false], [10, "module-quapy.classification.svmperf", false], [11, "module-quapy.data", false], [11, "module-quapy.data.base", false], [11, "module-quapy.data.datasets", false], [11, "module-quapy.data.preprocessing", false], [11, "module-quapy.data.reader", false], [12, "module-quapy.method", false], [12, "module-quapy.method._kdey", false], [12, "module-quapy.method._neural", false], [12, "module-quapy.method._threshold_optim", false], [12, "module-quapy.method.aggregative", false], [12, "module-quapy.method.base", false], [12, "module-quapy.method.composable", false], [12, "module-quapy.method.meta", false], [12, "module-quapy.method.non_aggregative", false]], "mrae() (in module quapy.error)": [[9, "quapy.error.mrae", false]], "ms (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.MS", false]], "ms2 (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.MS2", false]], "mse() (in module quapy.error)": [[9, "quapy.error.mse", false]], "n_classes (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.n_classes", false]], "n_classes (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.n_classes", false]], "nae() (in module quapy.error)": [[9, "quapy.error.nae", false]], "naturalprevalenceprotocol (in module quapy.protocol)": [[9, "quapy.protocol.NaturalPrevalenceProtocol", false]], "nbvscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.NBVSCalibration", false]], "neg_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.neg_label", false]], "neuralclassifiertrainer (class in quapy.classification.neural)": [[10, "quapy.classification.neural.NeuralClassifierTrainer", false]], "newelm() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newELM", false]], "newinvariantratioestimation() (quapy.method.aggregative.acc class method)": [[12, "quapy.method.aggregative.ACC.newInvariantRatioEstimation", false]], "newonevsall() (in module quapy.method.base)": [[12, "quapy.method.base.newOneVsAll", false]], "newsvmae() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMAE", false]], "newsvmkld() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMKLD", false]], "newsvmq() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMQ", false]], "newsvmrae() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMRAE", false]], "nkld() (in module quapy.error)": [[9, "quapy.error.nkld", false]], "nmd() (in module quapy.error)": [[9, "quapy.error.nmd", false]], "normalizations (quapy.method.aggregative.acc attribute)": [[12, "quapy.method.aggregative.ACC.NORMALIZATIONS", false]], "normalize_prevalence() (in module quapy.functional)": [[9, "quapy.functional.normalize_prevalence", false]], "normalized_absolute_error() (in module quapy.error)": [[9, "quapy.error.normalized_absolute_error", false]], "normalized_match_distance() (in module quapy.error)": [[9, "quapy.error.normalized_match_distance", false]], "normalized_relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.normalized_relative_absolute_error", false]], "npp (class in quapy.protocol)": [[9, "quapy.protocol.NPP", false]], "nrae() (in module quapy.error)": [[9, "quapy.error.nrae", false]], "num_prevalence_combinations() (in module quapy.functional)": [[9, "quapy.functional.num_prevalence_combinations", false]], "on_preclassified_instances() (quapy.protocol.onlabelledcollectionprotocol method)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.on_preclassified_instances", false]], "onevsall (class in quapy.method.base)": [[12, "quapy.method.base.OneVsAll", false]], "onevsallaggregative (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.OneVsAllAggregative", false]], "onevsallgeneric (class in quapy.method.base)": [[12, "quapy.method.base.OneVsAllGeneric", false]], "onlabelledcollectionprotocol (class in quapy.protocol)": [[9, "quapy.protocol.OnLabelledCollectionProtocol", false]], "optim_minimize() (in module quapy.functional)": [[9, "quapy.functional.optim_minimize", false]], "p (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.p", false]], "pacc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.PACC", false]], "parallel() (in module quapy.util)": [[9, "quapy.util.parallel", false]], "parallel_unpack() (in module quapy.util)": [[9, "quapy.util.parallel_unpack", false]], "pcc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.PCC", false]], "pdf() (quapy.method._kdey.kdebase method)": [[12, "quapy.method._kdey.KDEBase.pdf", false]], "pickled_resource() (in module quapy.util)": [[9, "quapy.util.pickled_resource", false]], "pos_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.pos_label", false]], "predict() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict", false]], "predict() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.predict", false]], "predict() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.predict", false]], "predict() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.predict", false]], "predict() (quapy.method.composable.cvclassifier method)": [[12, "quapy.method.composable.CVClassifier.predict", false]], "predict_proba() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict_proba", false]], "predict_proba() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.predict_proba", false]], "predict_proba() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.predict_proba", false]], "predict_proba() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.predict_proba", false]], "predict_proba() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.predict_proba", false]], "predict_proba() (quapy.method.composable.cvclassifier method)": [[12, "quapy.method.composable.CVClassifier.predict_proba", false]], "prediction() (in module quapy.evaluation)": [[9, "quapy.evaluation.prediction", false]], "prevalence() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.prevalence", false]], "prevalence_from_labels() (in module quapy.functional)": [[9, "quapy.functional.prevalence_from_labels", false]], "prevalence_from_probabilities() (in module quapy.functional)": [[9, "quapy.functional.prevalence_from_probabilities", false]], "prevalence_grid() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.prevalence_grid", false]], "prevalence_linspace() (in module quapy.functional)": [[9, "quapy.functional.prevalence_linspace", false]], "probabilistic (quapy.method.meta.ensemble property)": [[12, "quapy.method.meta.Ensemble.probabilistic", false]], "probabilisticadjustedclassifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ProbabilisticAdjustedClassifyAndCount", false]], "probabilisticclassifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ProbabilisticClassifyAndCount", false]], "projection_simplex_sort() (in module quapy.functional)": [[9, "quapy.functional.projection_simplex_sort", false]], "quanetmodule (class in quapy.method._neural)": [[12, "quapy.method._neural.QuaNetModule", false]], "quanettrainer (class in quapy.method._neural)": [[12, "quapy.method._neural.QuaNetTrainer", false]], "quantify() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.quantify", false]], "quantify() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.quantify", false]], "quantify() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.quantify", false]], "quantify() (quapy.method.base.basequantifier method)": [[12, "quapy.method.base.BaseQuantifier.quantify", false]], "quantify() (quapy.method.base.onevsallgeneric method)": [[12, "quapy.method.base.OneVsAllGeneric.quantify", false]], "quantify() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.quantify", false]], "quantify() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.quantify", false]], "quantify() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.quantify", false]], "quantify() (quapy.method.non_aggregative.dmx method)": [[12, "quapy.method.non_aggregative.DMx.quantify", false]], "quantify() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.quantify", false]], "quantify() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.quantify", false]], "quantify() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.quantify", false]], "quapy": [[9, "module-quapy", false]], "quapy.classification": [[10, "module-quapy.classification", false]], "quapy.classification.calibration": [[10, "module-quapy.classification.calibration", false]], "quapy.classification.methods": [[10, "module-quapy.classification.methods", false]], "quapy.classification.neural": [[10, "module-quapy.classification.neural", false]], "quapy.classification.svmperf": [[10, "module-quapy.classification.svmperf", false]], "quapy.data": [[11, "module-quapy.data", false]], "quapy.data.base": [[11, "module-quapy.data.base", false]], "quapy.data.datasets": [[11, "module-quapy.data.datasets", false]], "quapy.data.preprocessing": [[11, "module-quapy.data.preprocessing", false]], "quapy.data.reader": [[11, "module-quapy.data.reader", false]], "quapy.error": [[9, "module-quapy.error", false]], "quapy.evaluation": [[9, "module-quapy.evaluation", false]], "quapy.functional": [[9, "module-quapy.functional", false]], "quapy.method": [[12, "module-quapy.method", false]], "quapy.method._kdey": [[12, "module-quapy.method._kdey", false]], "quapy.method._neural": [[12, "module-quapy.method._neural", false]], "quapy.method._threshold_optim": [[12, "module-quapy.method._threshold_optim", false]], "quapy.method.aggregative": [[12, "module-quapy.method.aggregative", false]], "quapy.method.base": [[12, "module-quapy.method.base", false]], "quapy.method.composable": [[12, "module-quapy.method.composable", false]], "quapy.method.meta": [[12, "module-quapy.method.meta", false]], "quapy.method.non_aggregative": [[12, "module-quapy.method.non_aggregative", false]], "quapy.model_selection": [[9, "module-quapy.model_selection", false]], "quapy.plot": [[9, "module-quapy.plot", false]], "quapy.protocol": [[9, "module-quapy.protocol", false]], "quapy.util": [[9, "module-quapy.util", false]], "rae() (in module quapy.error)": [[9, "quapy.error.rae", false]], "random_state (quapy.protocol.abstractstochasticseededprotocol property)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.random_state", false]], "readme (class in quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.ReadMe", false]], "recalibratedprobabilisticclassifier (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifier", false]], "recalibratedprobabilisticclassifierbase (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase", false]], "reduce() (quapy.data.base.dataset method)": [[11, "quapy.data.base.Dataset.reduce", false]], "reduce_columns() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.reduce_columns", false]], "reindex_labels() (in module quapy.data.reader)": [[11, "quapy.data.reader.reindex_labels", false]], "relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.relative_absolute_error", false]], "reset_net_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.reset_net_params", false]], "return_types (quapy.protocol.onlabelledcollectionprotocol attribute)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.RETURN_TYPES", false]], "sample() (quapy.protocol.abstractstochasticseededprotocol method)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.sample", false]], "sample() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.sample", false]], "sample() (quapy.protocol.domainmixer method)": [[9, "quapy.protocol.DomainMixer.sample", false]], "sample() (quapy.protocol.npp method)": [[9, "quapy.protocol.NPP.sample", false]], "sample() (quapy.protocol.upp method)": [[9, "quapy.protocol.UPP.sample", false]], "sample_from_posterior() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.sample_from_posterior", false]], "samples_parameters() (quapy.protocol.abstractstochasticseededprotocol method)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.samples_parameters", false]], "samples_parameters() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.samples_parameters", false]], "samples_parameters() (quapy.protocol.domainmixer method)": [[9, "quapy.protocol.DomainMixer.samples_parameters", false]], "samples_parameters() (quapy.protocol.npp method)": [[9, "quapy.protocol.NPP.samples_parameters", false]], "samples_parameters() (quapy.protocol.upp method)": [[9, "quapy.protocol.UPP.samples_parameters", false]], "sampling() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.sampling", false]], "sampling_from_index() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.sampling_from_index", false]], "sampling_index() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.sampling_index", false]], "save_text_file() (in module quapy.util)": [[9, "quapy.util.save_text_file", false]], "se() (in module quapy.error)": [[9, "quapy.error.se", false]], "set_fit_request() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.set_fit_request", false]], "set_fit_request() (quapy.method._kdey.kdeyhd method)": [[12, "quapy.method._kdey.KDEyHD.set_fit_request", false]], "set_fit_request() (quapy.method._kdey.kdeyml method)": [[12, "quapy.method._kdey.KDEyML.set_fit_request", false]], "set_fit_request() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.set_fit_request", false]], "set_fit_request() (quapy.method._threshold_optim.max method)": [[12, "quapy.method._threshold_optim.MAX.set_fit_request", false]], "set_fit_request() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.set_fit_request", false]], "set_fit_request() (quapy.method._threshold_optim.ms2 method)": [[12, "quapy.method._threshold_optim.MS2.set_fit_request", false]], "set_fit_request() (quapy.method._threshold_optim.t50 method)": [[12, "quapy.method._threshold_optim.T50.set_fit_request", false]], "set_fit_request() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.set_fit_request", false]], "set_fit_request() (quapy.method._threshold_optim.x method)": [[12, "quapy.method._threshold_optim.X.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.acc method)": [[12, "quapy.method.aggregative.ACC.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.aggregativecrispquantifier method)": [[12, "quapy.method.aggregative.AggregativeCrispQuantifier.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.aggregativesoftquantifier method)": [[12, "quapy.method.aggregative.AggregativeSoftQuantifier.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.binaryaggregativequantifier method)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.cc method)": [[12, "quapy.method.aggregative.CC.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.dmy method)": [[12, "quapy.method.aggregative.DMy.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.dys method)": [[12, "quapy.method.aggregative.DyS.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.hdy method)": [[12, "quapy.method.aggregative.HDy.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.onevsallaggregative method)": [[12, "quapy.method.aggregative.OneVsAllAggregative.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.pacc method)": [[12, "quapy.method.aggregative.PACC.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.pcc method)": [[12, "quapy.method.aggregative.PCC.set_fit_request", false]], "set_fit_request() (quapy.method.aggregative.smm method)": [[12, "quapy.method.aggregative.SMM.set_fit_request", false]], "set_fit_request() (quapy.method.base.basequantifier method)": [[12, "quapy.method.base.BaseQuantifier.set_fit_request", false]], "set_fit_request() (quapy.method.base.binaryquantifier method)": [[12, "quapy.method.base.BinaryQuantifier.set_fit_request", false]], "set_fit_request() (quapy.method.base.onevsallgeneric method)": [[12, "quapy.method.base.OneVsAllGeneric.set_fit_request", false]], "set_fit_request() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.set_fit_request", false]], "set_fit_request() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.set_fit_request", false]], "set_fit_request() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.set_fit_request", false]], "set_fit_request() (quapy.method.non_aggregative.dmx method)": [[12, "quapy.method.non_aggregative.DMx.set_fit_request", false]], "set_fit_request() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.set_fit_request", false]], "set_fit_request() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.set_fit_request", false]], "set_fit_request() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.set_fit_request", false]], "set_params() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.set_params", false]], "set_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.set_params", false]], "set_params() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.set_params", false]], "set_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.set_params", false]], "set_params() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.set_params", false]], "set_params() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.set_params", false]], "set_params() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.set_params", false]], "set_params() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.set_params", false]], "set_predict_proba_request() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.set_predict_proba_request", false]], "set_score_request() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.set_score_request", false]], "set_score_request() (quapy.method.composable.cvclassifier method)": [[12, "quapy.method.composable.CVClassifier.set_score_request", false]], "sld (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.SLD", false]], "smm (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.SMM", false]], "smooth() (in module quapy.error)": [[9, "quapy.error.smooth", false]], "softmax() (in module quapy.functional)": [[9, "quapy.functional.softmax", false]], "solve_adjustment() (in module quapy.functional)": [[9, "quapy.functional.solve_adjustment", false]], "solve_adjustment_binary() (in module quapy.functional)": [[9, "quapy.functional.solve_adjustment_binary", false]], "solvers (quapy.method.aggregative.acc attribute)": [[12, "quapy.method.aggregative.ACC.SOLVERS", false]], "split_random() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.split_random", false]], "split_stratified() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.split_stratified", false]], "splitstratified() (quapy.data.base.dataset class method)": [[11, "quapy.data.base.Dataset.SplitStratified", false]], "standardize() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.standardize", false]], "stats() (quapy.data.base.dataset method)": [[11, "quapy.data.base.Dataset.stats", false]], "stats() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.stats", false]], "status (class in quapy.model_selection)": [[9, "quapy.model_selection.Status", false]], "std_constrained_linear_ls() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.std_constrained_linear_ls", false]], "strprev() (in module quapy.functional)": [[9, "quapy.functional.strprev", false]], "success (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.SUCCESS", false]], "success() (quapy.model_selection.configstatus method)": [[9, "quapy.model_selection.ConfigStatus.success", false]], "svmperf (class in quapy.classification.svmperf)": [[10, "quapy.classification.svmperf.SVMperf", false]], "t50 (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.T50", false]], "temp_seed() (in module quapy.util)": [[9, "quapy.util.temp_seed", false]], "ternary_search() (in module quapy.functional)": [[9, "quapy.functional.ternary_search", false]], "text2tfidf() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.text2tfidf", false]], "textclassifiernet (class in quapy.classification.neural)": [[10, "quapy.classification.neural.TextClassifierNet", false]], "thresholdoptimization (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.ThresholdOptimization", false]], "tikhonovregularization (class in quapy.method.composable)": [[12, "quapy.method.composable.TikhonovRegularization", false]], "tikhonovregularized() (in module quapy.method.composable)": [[12, "quapy.method.composable.TikhonovRegularized", false]], "timeout (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.TIMEOUT", false]], "timeout() (in module quapy.util)": [[9, "quapy.util.timeout", false]], "topsoedistance() (in module quapy.functional)": [[9, "quapy.functional.TopsoeDistance", false]], "torchdataset (class in quapy.classification.neural)": [[10, "quapy.classification.neural.TorchDataset", false]], "total() (quapy.protocol.abstractprotocol method)": [[9, "quapy.protocol.AbstractProtocol.total", false]], "total() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.total", false]], "total() (quapy.protocol.domainmixer method)": [[9, "quapy.protocol.DomainMixer.total", false]], "total() (quapy.protocol.iterateprotocol method)": [[9, "quapy.protocol.IterateProtocol.total", false]], "total() (quapy.protocol.npp method)": [[9, "quapy.protocol.NPP.total", false]], "total() (quapy.protocol.upp method)": [[9, "quapy.protocol.UPP.total", false]], "train_test (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.train_test", false]], "transform() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.transform", false]], "transform() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.transform", false]], "transform() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.transform", false]], "transform() (quapy.method.composable.classtransformer method)": [[12, "quapy.method.composable.ClassTransformer.transform", false]], "transform() (quapy.method.composable.distancetransformer method)": [[12, "quapy.method.composable.DistanceTransformer.transform", false]], "transform() (quapy.method.composable.energykerneltransformer method)": [[12, "quapy.method.composable.EnergyKernelTransformer.transform", false]], "transform() (quapy.method.composable.gaussiankerneltransformer method)": [[12, "quapy.method.composable.GaussianKernelTransformer.transform", false]], "transform() (quapy.method.composable.gaussianrffkerneltransformer method)": [[12, "quapy.method.composable.GaussianRFFKernelTransformer.transform", false]], "transform() (quapy.method.composable.histogramtransformer method)": [[12, "quapy.method.composable.HistogramTransformer.transform", false]], "transform() (quapy.method.composable.kerneltransformer method)": [[12, "quapy.method.composable.KernelTransformer.transform", false]], "tscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.TSCalibration", false]], "uniform_prevalence() (in module quapy.functional)": [[9, "quapy.functional.uniform_prevalence", false]], "uniform_prevalence_sampling() (in module quapy.functional)": [[9, "quapy.functional.uniform_prevalence_sampling", false]], "uniform_sampling() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.uniform_sampling", false]], "uniform_sampling_index() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.uniform_sampling_index", false]], "uniform_simplex_sampling() (in module quapy.functional)": [[9, "quapy.functional.uniform_simplex_sampling", false]], "uniformprevalenceprotocol (in module quapy.protocol)": [[9, "quapy.protocol.UniformPrevalenceProtocol", false]], "upp (class in quapy.protocol)": [[9, "quapy.protocol.UPP", false]], "val_split (quapy.method.aggregative.aggregativequantifier property)": [[12, "quapy.method.aggregative.AggregativeQuantifier.val_split", false]], "val_split_ (quapy.method.aggregative.aggregativequantifier attribute)": [[12, "quapy.method.aggregative.AggregativeQuantifier.val_split_", false]], "valid_losses (quapy.classification.svmperf.svmperf attribute)": [[10, "quapy.classification.svmperf.SVMperf.valid_losses", false]], "valid_policies (quapy.method.meta.ensemble attribute)": [[12, "quapy.method.meta.Ensemble.VALID_POLICIES", false]], "vocabulary_size (quapy.classification.neural.cnnnet property)": [[10, "quapy.classification.neural.CNNnet.vocabulary_size", false]], "vocabulary_size (quapy.classification.neural.lstmnet property)": [[10, "quapy.classification.neural.LSTMnet.vocabulary_size", false]], "vocabulary_size (quapy.classification.neural.textclassifiernet property)": [[10, "quapy.classification.neural.TextClassifierNet.vocabulary_size", false]], "vocabulary_size (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.vocabulary_size", false]], "vocabulary_size() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.vocabulary_size", false]], "vscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.VSCalibration", false]], "x (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.X", false]], "x (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.X", false]], "xavier_uniform() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.xavier_uniform", false]], "xp (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.Xp", false]], "xy (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.Xy", false]], "y (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.y", false]]}, "objects": {"": [[9, 0, 0, "-", "quapy"]], "quapy": [[10, 0, 0, "-", "classification"], [11, 0, 0, "-", "data"], [9, 0, 0, "-", "error"], [9, 0, 0, "-", "evaluation"], [9, 0, 0, "-", "functional"], [12, 0, 0, "-", "method"], [9, 0, 0, "-", "model_selection"], [9, 0, 0, "-", "plot"], [9, 0, 0, "-", "protocol"], [9, 0, 0, "-", "util"]], "quapy.classification": [[10, 0, 0, "-", "calibration"], [10, 0, 0, "-", "methods"], [10, 0, 0, "-", "neural"], [10, 0, 0, "-", "svmperf"]], "quapy.classification.calibration": [[10, 1, 1, "", "BCTSCalibration"], [10, 1, 1, "", "NBVSCalibration"], [10, 1, 1, "", "RecalibratedProbabilisticClassifier"], [10, 1, 1, "", "RecalibratedProbabilisticClassifierBase"], [10, 1, 1, "", "TSCalibration"], [10, 1, 1, "", "VSCalibration"]], "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase": [[10, 2, 1, "", "classes_"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "fit_cv"], [10, 3, 1, "", "fit_tr_val"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "predict_proba"]], "quapy.classification.methods": [[10, 1, 1, "", "LowRankLogisticRegression"]], "quapy.classification.methods.LowRankLogisticRegression": [[10, 3, 1, "", "fit"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "predict_proba"], [10, 3, 1, "", "set_params"], [10, 3, 1, "", "transform"]], "quapy.classification.neural": [[10, 1, 1, "", "CNNnet"], [10, 1, 1, "", "LSTMnet"], [10, 1, 1, "", "NeuralClassifierTrainer"], [10, 1, 1, "", "TextClassifierNet"], [10, 1, 1, "", "TorchDataset"]], "quapy.classification.neural.CNNnet": [[10, 3, 1, "", "document_embedding"], [10, 3, 1, "", "get_params"], [10, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.LSTMnet": [[10, 3, 1, "", "document_embedding"], [10, 3, 1, "", "get_params"], [10, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.NeuralClassifierTrainer": [[10, 2, 1, "", "device"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "predict_proba"], [10, 3, 1, "", "reset_net_params"], [10, 3, 1, "", "set_params"], [10, 3, 1, "", "transform"]], "quapy.classification.neural.TextClassifierNet": [[10, 3, 1, "", "dimensions"], [10, 3, 1, "", "document_embedding"], [10, 3, 1, "", "forward"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "predict_proba"], [10, 2, 1, "", "vocabulary_size"], [10, 3, 1, "", "xavier_uniform"]], "quapy.classification.neural.TorchDataset": [[10, 3, 1, "", "asDataloader"]], "quapy.classification.svmperf": [[10, 1, 1, "", "SVMperf"]], "quapy.classification.svmperf.SVMperf": [[10, 3, 1, "", "decision_function"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "set_score_request"], [10, 4, 1, "", "valid_losses"]], "quapy.data": [[11, 0, 0, "-", "base"], [11, 0, 0, "-", "datasets"], [11, 0, 0, "-", "preprocessing"], [11, 0, 0, "-", "reader"]], "quapy.data.base": [[11, 1, 1, "", "Dataset"], [11, 1, 1, "", "LabelledCollection"]], "quapy.data.base.Dataset": [[11, 3, 1, "", "SplitStratified"], [11, 2, 1, "", "binary"], [11, 2, 1, "", "classes_"], [11, 3, 1, "", "kFCV"], [11, 3, 1, "", "load"], [11, 2, 1, "", "n_classes"], [11, 3, 1, "", "reduce"], [11, 3, 1, "", "stats"], [11, 2, 1, "", "train_test"], [11, 2, 1, "", "vocabulary_size"]], "quapy.data.base.LabelledCollection": [[11, 2, 1, "", "X"], [11, 2, 1, "", "Xp"], [11, 2, 1, "", "Xy"], [11, 2, 1, "", "binary"], [11, 3, 1, "", "counts"], [11, 3, 1, "", "join"], [11, 3, 1, "", "kFCV"], [11, 3, 1, "", "load"], [11, 2, 1, "", "n_classes"], [11, 2, 1, "", "p"], [11, 3, 1, "", "prevalence"], [11, 3, 1, "", "sampling"], [11, 3, 1, "", "sampling_from_index"], [11, 3, 1, "", "sampling_index"], [11, 3, 1, "", "split_random"], [11, 3, 1, "", "split_stratified"], [11, 3, 1, "", "stats"], [11, 3, 1, "", "uniform_sampling"], [11, 3, 1, "", "uniform_sampling_index"], [11, 2, 1, "", "y"]], "quapy.data.datasets": [[11, 5, 1, "", "fetch_IFCB"], [11, 5, 1, "", "fetch_UCIBinaryDataset"], [11, 5, 1, "", "fetch_UCIBinaryLabelledCollection"], [11, 5, 1, "", "fetch_UCIMulticlassDataset"], [11, 5, 1, "", "fetch_UCIMulticlassLabelledCollection"], [11, 5, 1, "", "fetch_lequa2022"], [11, 5, 1, "", "fetch_lequa2024"], [11, 5, 1, "", "fetch_reviews"], [11, 5, 1, "", "fetch_twitter"]], "quapy.data.preprocessing": [[11, 1, 1, "", "IndexTransformer"], [11, 5, 1, "", "index"], [11, 5, 1, "", "reduce_columns"], [11, 5, 1, "", "standardize"], [11, 5, 1, "", "text2tfidf"]], "quapy.data.preprocessing.IndexTransformer": [[11, 3, 1, "", "add_word"], [11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "transform"], [11, 3, 1, "", "vocabulary_size"]], "quapy.data.reader": [[11, 5, 1, "", "binarize"], [11, 5, 1, "", "from_csv"], [11, 5, 1, "", "from_sparse"], [11, 5, 1, "", "from_text"], [11, 5, 1, "", "reindex_labels"]], "quapy.error": [[9, 5, 1, "", "absolute_error"], [9, 5, 1, "", "acc_error"], [9, 5, 1, "", "acce"], [9, 5, 1, "", "ae"], [9, 5, 1, "", "f1_error"], [9, 5, 1, "", "f1e"], [9, 5, 1, "", "from_name"], [9, 5, 1, "", "kld"], [9, 5, 1, "", "mae"], [9, 5, 1, "", "match_distance"], [9, 5, 1, "", "md"], [9, 5, 1, "", "mean_absolute_error"], [9, 5, 1, "", "mean_normalized_absolute_error"], [9, 5, 1, "", "mean_normalized_relative_absolute_error"], [9, 5, 1, "", "mean_relative_absolute_error"], [9, 5, 1, "", "mkld"], [9, 5, 1, "", "mnae"], [9, 5, 1, "", "mnkld"], [9, 5, 1, "", "mnrae"], [9, 5, 1, "", "mrae"], [9, 5, 1, "", "mse"], [9, 5, 1, "", "nae"], [9, 5, 1, "", "nkld"], [9, 5, 1, "", "nmd"], [9, 5, 1, "", "normalized_absolute_error"], [9, 5, 1, "", "normalized_match_distance"], [9, 5, 1, "", "normalized_relative_absolute_error"], [9, 5, 1, "", "nrae"], [9, 5, 1, "", "rae"], [9, 5, 1, "", "relative_absolute_error"], [9, 5, 1, "", "se"], [9, 5, 1, "", "smooth"]], "quapy.evaluation": [[9, 5, 1, "", "evaluate"], [9, 5, 1, "", "evaluate_on_samples"], [9, 5, 1, "", "evaluation_report"], [9, 5, 1, "", "prediction"]], "quapy.functional": [[9, 5, 1, "", "HellingerDistance"], [9, 5, 1, "", "TopsoeDistance"], [9, 5, 1, "", "argmin_prevalence"], [9, 5, 1, "", "as_binary_prevalence"], [9, 5, 1, "", "check_prevalence_vector"], [9, 5, 1, "", "clip"], [9, 5, 1, "", "condsoftmax"], [9, 5, 1, "", "counts_from_labels"], [9, 5, 1, "", "get_divergence"], [9, 5, 1, "", "get_nprevpoints_approximation"], [9, 5, 1, "", "l1_norm"], [9, 5, 1, "", "linear_search"], [9, 5, 1, "", "normalize_prevalence"], [9, 5, 1, "", "num_prevalence_combinations"], [9, 5, 1, "", "optim_minimize"], [9, 5, 1, "", "prevalence_from_labels"], [9, 5, 1, "", "prevalence_from_probabilities"], [9, 5, 1, "", "prevalence_linspace"], [9, 5, 1, "", "projection_simplex_sort"], [9, 5, 1, "", "softmax"], [9, 5, 1, "", "solve_adjustment"], [9, 5, 1, "", "solve_adjustment_binary"], [9, 5, 1, "", "strprev"], [9, 5, 1, "", "ternary_search"], [9, 5, 1, "", "uniform_prevalence"], [9, 5, 1, "", "uniform_prevalence_sampling"], [9, 5, 1, "", "uniform_simplex_sampling"]], "quapy.method": [[12, 0, 0, "-", "_kdey"], [12, 0, 0, "-", "_neural"], [12, 0, 0, "-", "_threshold_optim"], [12, 0, 0, "-", "aggregative"], [12, 0, 0, "-", "base"], [12, 0, 0, "-", "composable"], [12, 0, 0, "-", "meta"], [12, 0, 0, "-", "non_aggregative"]], "quapy.method._kdey": [[12, 1, 1, "", "KDEBase"], [12, 1, 1, "", "KDEyCS"], [12, 1, 1, "", "KDEyHD"], [12, 1, 1, "", "KDEyML"]], "quapy.method._kdey.KDEBase": [[12, 4, 1, "", "BANDWIDTH_METHOD"], [12, 3, 1, "", "get_kde_function"], [12, 3, 1, "", "get_mixture_components"], [12, 3, 1, "", "pdf"]], "quapy.method._kdey.KDEyCS": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "gram_matrix_mix_sum"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._kdey.KDEyHD": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._kdey.KDEyML": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._neural": [[12, 1, 1, "", "QuaNetModule"], [12, 1, 1, "", "QuaNetTrainer"], [12, 5, 1, "", "mae_loss"]], "quapy.method._neural.QuaNetModule": [[12, 2, 1, "", "device"], [12, 3, 1, "", "forward"]], "quapy.method._neural.QuaNetTrainer": [[12, 2, 1, "", "classes_"], [12, 3, 1, "", "clean_checkpoint"], [12, 3, 1, "", "clean_checkpoint_dir"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method._threshold_optim": [[12, 1, 1, "", "MAX"], [12, 1, 1, "", "MS"], [12, 1, 1, "", "MS2"], [12, 1, 1, "", "T50"], [12, 1, 1, "", "ThresholdOptimization"], [12, 1, 1, "", "X"]], "quapy.method._threshold_optim.MAX": [[12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.MS": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.MS2": [[12, 3, 1, "", "discard"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.T50": [[12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.ThresholdOptimization": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregate_with_threshold"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "condition"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.X": [[12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative": [[12, 1, 1, "", "ACC"], [12, 4, 1, "", "AdjustedClassifyAndCount"], [12, 1, 1, "", "AggregativeCrispQuantifier"], [12, 1, 1, "", "AggregativeMedianEstimator"], [12, 1, 1, "", "AggregativeQuantifier"], [12, 1, 1, "", "AggregativeSoftQuantifier"], [12, 1, 1, "", "BayesianCC"], [12, 1, 1, "", "BinaryAggregativeQuantifier"], [12, 1, 1, "", "CC"], [12, 4, 1, "", "ClassifyAndCount"], [12, 1, 1, "", "DMy"], [12, 4, 1, "", "DistributionMatchingY"], [12, 1, 1, "", "DyS"], [12, 1, 1, "", "EMQ"], [12, 4, 1, "", "ExpectationMaximizationQuantifier"], [12, 1, 1, "", "HDy"], [12, 4, 1, "", "HellingerDistanceY"], [12, 1, 1, "", "OneVsAllAggregative"], [12, 1, 1, "", "PACC"], [12, 1, 1, "", "PCC"], [12, 4, 1, "", "ProbabilisticAdjustedClassifyAndCount"], [12, 4, 1, "", "ProbabilisticClassifyAndCount"], [12, 4, 1, "", "SLD"], [12, 1, 1, "", "SMM"], [12, 5, 1, "", "newELM"], [12, 5, 1, "", "newSVMAE"], [12, 5, 1, "", "newSVMKLD"], [12, 5, 1, "", "newSVMQ"], [12, 5, 1, "", "newSVMRAE"]], "quapy.method.aggregative.ACC": [[12, 4, 1, "", "METHODS"], [12, 4, 1, "", "NORMALIZATIONS"], [12, 4, 1, "", "SOLVERS"], [12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "getPteCondEstim"], [12, 3, 1, "", "newInvariantRatioEstimation"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.AggregativeCrispQuantifier": [[12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.AggregativeMedianEstimator": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.aggregative.AggregativeQuantifier": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 2, 1, "", "classes_"], [12, 2, 1, "", "classifier"], [12, 3, 1, "", "classifier_fit_predict"], [12, 3, 1, "", "classify"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 2, 1, "", "val_split"], [12, 4, 1, "", "val_split_"]], "quapy.method.aggregative.AggregativeSoftQuantifier": [[12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.BayesianCC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "get_conditional_probability_samples"], [12, 3, 1, "", "get_prevalence_samples"], [12, 3, 1, "", "sample_from_posterior"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.BinaryAggregativeQuantifier": [[12, 3, 1, "", "fit"], [12, 2, 1, "", "neg_label"], [12, 2, 1, "", "pos_label"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.CC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.DMy": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.DyS": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.EMQ": [[12, 3, 1, "", "EM"], [12, 3, 1, "", "EMQ_BCTS"], [12, 4, 1, "", "EPSILON"], [12, 4, 1, "", "MAX_ITER"], [12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "classify"], [12, 3, 1, "", "predict_proba"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_predict_proba_request"]], "quapy.method.aggregative.HDy": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.OneVsAllAggregative": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "classify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.PACC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "getPteCondEstim"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.PCC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.SMM": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.base": [[12, 1, 1, "", "BaseQuantifier"], [12, 1, 1, "", "BinaryQuantifier"], [12, 1, 1, "", "OneVsAll"], [12, 1, 1, "", "OneVsAllGeneric"], [12, 5, 1, "", "newOneVsAll"]], "quapy.method.base.BaseQuantifier": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.base.BinaryQuantifier": [[12, 3, 1, "", "set_fit_request"]], "quapy.method.base.OneVsAllGeneric": [[12, 2, 1, "", "classes_"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.composable": [[12, 1, 1, "", "BlobelLoss"], [12, 1, 1, "", "CVClassifier"], [12, 1, 1, "", "ClassTransformer"], [12, 1, 1, "", "CombinedLoss"], [12, 5, 1, "", "ComposableQuantifier"], [12, 1, 1, "", "DistanceTransformer"], [12, 1, 1, "", "EnergyKernelTransformer"], [12, 1, 1, "", "EnergyLoss"], [12, 1, 1, "", "GaussianKernelTransformer"], [12, 1, 1, "", "GaussianRFFKernelTransformer"], [12, 1, 1, "", "HellingerSurrogateLoss"], [12, 1, 1, "", "HistogramTransformer"], [12, 1, 1, "", "KernelTransformer"], [12, 1, 1, "", "LaplacianKernelTransformer"], [12, 1, 1, "", "LeastSquaresLoss"], [12, 1, 1, "", "TikhonovRegularization"], [12, 5, 1, "", "TikhonovRegularized"]], "quapy.method.composable.CVClassifier": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "predict"], [12, 3, 1, "", "predict_proba"], [12, 3, 1, "", "set_score_request"]], "quapy.method.composable.ClassTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.DistanceTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.EnergyKernelTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.GaussianKernelTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.GaussianRFFKernelTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.HistogramTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.KernelTransformer": [[12, 3, 1, "", "fit_transform"], [12, 3, 1, "", "transform"]], "quapy.method.composable.LaplacianKernelTransformer": [[12, 2, 1, "", "kernel"]], "quapy.method.meta": [[12, 5, 1, "", "EACC"], [12, 5, 1, "", "ECC"], [12, 5, 1, "", "EEMQ"], [12, 5, 1, "", "EHDy"], [12, 5, 1, "", "EPACC"], [12, 1, 1, "", "Ensemble"], [12, 1, 1, "", "MedianEstimator"], [12, 1, 1, "", "MedianEstimator2"], [12, 5, 1, "", "ensembleFactory"], [12, 5, 1, "", "get_probability_distribution"]], "quapy.method.meta.Ensemble": [[12, 4, 1, "", "VALID_POLICIES"], [12, 2, 1, "", "aggregative"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 2, 1, "", "probabilistic"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator2": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.non_aggregative": [[12, 1, 1, "", "DMx"], [12, 4, 1, "", "DistributionMatchingX"], [12, 1, 1, "", "MaximumLikelihoodPrevalenceEstimation"], [12, 1, 1, "", "ReadMe"]], "quapy.method.non_aggregative.DMx": [[12, 3, 1, "", "HDx"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.non_aggregative.ReadMe": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "std_constrained_linear_ls"]], "quapy.model_selection": [[9, 1, 1, "", "ConfigStatus"], [9, 1, 1, "", "GridSearchQ"], [9, 1, 1, "", "Status"], [9, 5, 1, "", "cross_val_predict"], [9, 5, 1, "", "expand_grid"], [9, 5, 1, "", "group_params"]], "quapy.model_selection.ConfigStatus": [[9, 3, 1, "", "failed"], [9, 3, 1, "", "success"]], "quapy.model_selection.GridSearchQ": [[9, 3, 1, "", "best_model"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_params"], [9, 3, 1, "", "quantify"], [9, 3, 1, "", "set_fit_request"], [9, 3, 1, "", "set_params"]], "quapy.model_selection.Status": [[9, 4, 1, "", "ERROR"], [9, 4, 1, "", "INVALID"], [9, 4, 1, "", "SUCCESS"], [9, 4, 1, "", "TIMEOUT"]], "quapy.plot": [[9, 5, 1, "", "binary_bias_bins"], [9, 5, 1, "", "binary_bias_global"], [9, 5, 1, "", "binary_diagonal"], [9, 5, 1, "", "brokenbar_supremacy_by_drift"], [9, 5, 1, "", "error_by_drift"]], "quapy.protocol": [[9, 1, 1, "", "APP"], [9, 1, 1, "", "AbstractProtocol"], [9, 1, 1, "", "AbstractStochasticSeededProtocol"], [9, 4, 1, "", "ArtificialPrevalenceProtocol"], [9, 1, 1, "", "DomainMixer"], [9, 1, 1, "", "IterateProtocol"], [9, 1, 1, "", "NPP"], [9, 4, 1, "", "NaturalPrevalenceProtocol"], [9, 1, 1, "", "OnLabelledCollectionProtocol"], [9, 1, 1, "", "UPP"], [9, 4, 1, "", "UniformPrevalenceProtocol"]], "quapy.protocol.APP": [[9, 3, 1, "", "prevalence_grid"], [9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.protocol.AbstractProtocol": [[9, 3, 1, "", "total"]], "quapy.protocol.AbstractStochasticSeededProtocol": [[9, 3, 1, "", "collator"], [9, 2, 1, "", "random_state"], [9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"]], "quapy.protocol.DomainMixer": [[9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.protocol.IterateProtocol": [[9, 3, 1, "", "total"]], "quapy.protocol.NPP": [[9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.protocol.OnLabelledCollectionProtocol": [[9, 4, 1, "", "RETURN_TYPES"], [9, 3, 1, "", "get_collator"], [9, 3, 1, "", "get_labelled_collection"], [9, 3, 1, "", "on_preclassified_instances"]], "quapy.protocol.UPP": [[9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.util": [[9, 1, 1, "", "EarlyStop"], [9, 5, 1, "", "create_if_not_exist"], [9, 5, 1, "", "create_parent_dir"], [9, 5, 1, "", "download_file"], [9, 5, 1, "", "download_file_if_not_exists"], [9, 5, 1, "", "get_quapy_home"], [9, 5, 1, "", "load_report"], [9, 5, 1, "", "map_parallel"], [9, 5, 1, "", "parallel"], [9, 5, 1, "", "parallel_unpack"], [9, 5, 1, "", "pickled_resource"], [9, 5, 1, "", "save_text_file"], [9, 5, 1, "", "temp_seed"], [9, 5, 1, "", "timeout"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [2, 3, 5, 6, 7, 9, 10, 11, 12], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "000": 2, "000074": 3, "000090": 3, "0001": 12, "000985": 3, "001": [2, 6, 9, 10, 12], "001127": 3, "001133": 3, "001350": 3, "001985": 3, "002": 2, "003": 2, "003538": 3, "003631": 3, "004": 2, "00490": 5, "005": 9, "005175": 3, "005298": 3, "005649": 3, "006149": 3, "007": 2, "009": 2, "01": [5, 6, 9, 10, 12], "013145": 3, "013182": 3, "014": 2, "014788": 3, "016": 3, "016941": 3, "017": 2, "017236": 3, "018": 2, "019950": 3, "02": 9, "020": 2, "020490": 3, "021": 2, "021752": 3, "02234": 6, "022769": 3, "023588": 3, "02445": 6, "025": 2, "027": 2, "030": 2, "03102": 6, "033": [2, 3], "035": 3, "037": 2, "038": 2, "039": 2, "039063": 3, "040": 2, "04021": 6, "041": 2, "04286": 6, "048": 2, "04888": 6, "05": [7, 9, 12], "051": 2, "05163": 6, "052": 3, "053": 2, "053631": 3, "054309": 3, "056": 2, "057146": 3, "061": 2, "063": [2, 11], "065": 2, "067": 2, "069": 2, "069323": 3, "071": 2, "076": 2, "078": 2, "08": 9, "081": [2, 11], "082": 2, "083": 2, "086": 2, "088230": 3, "091": 3, "095": 2, "096": 2, "097": 2, "099": 2, "1": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12], "10": [2, 6, 7, 8, 9, 10, 12], "100": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "1000": [2, 6, 11, 12], "10000": [9, 12], "10036244": 2, "101": 2, "1014": 2, "102": 2, "1024": 12, "1024985": 2, "104": [2, 3], "108779": 3, "109": 2, "10992": 2, "11": [0, 2, 8, 9], "110": [2, 12], "112": 3, "11338": 2, "1145": 12, "12": 10, "120": 2, "1215742": 2, "125": 2, "127": 2, "1271": 2, "129": 2, "12958": 2, "1299": 2, "13": [2, 10], "132": 3, "1353": 2, "1356": 6, "136": 2, "13611": 2, "137": 2, "1385": 2, "139": 2, "14": 5, "141": 2, "142": 2, "143": 2, "146": 5, "1473": 2, "148": 2, "1484": 2, "149": 2, "149806": 3, "15": [2, 5, 9, 11], "150": 2, "152": 3, "153": 2, "154": 2, "157": 2, "158": 2, "159": 2, "1593": 2, "1594": 2, "1599": 2, "16": [2, 6], "161": 2, "163": 2, "164": [2, 5], "165": 2, "165776": 3, "166": 2, "167": 2, "17": [2, 5], "1771": 8, "1775": [2, 5], "1778": [2, 5], "178": 2, "179": 2, "1823": 2, "1839": 2, "18399": 2, "1853": 2, "188": 2, "19": [2, 5, 11], "191": 3, "193": 2, "194": 2, "1985": 12, "199151": 2, "1e": [9, 10, 12], "1m": 3, "1st": 2, "2": [2, 3, 5, 6, 7, 8, 9, 11, 12], "20": [2, 3, 5, 7, 9, 12], "200": [2, 3, 10], "2000": 2, "20000": 2, "2002": 5, "2005": 8, "2006": [5, 12], "2008": [5, 12], "2010": 12, "2013": [5, 12], "2014": 9, "2015": [2, 4, 5, 10, 12], "2016": [5, 11, 12], "2017": [2, 5, 11, 12], "2018": [2, 5, 9, 11, 12], "2019": [5, 11, 12], "2020": [5, 10], "2021": [0, 5, 6, 12], "2022": [0, 1, 5, 8, 11, 12], "2023": [5, 12], "206": 2, "207": 2, "208": 2, "21": [2, 5, 7, 8, 9], "211": 2, "2111": 2, "2126": 2, "2139": 6, "2155": 2, "21591": [2, 11], "218": 5, "2184": 2, "22": [5, 10, 11], "220": 3, "222": [2, 10], "222046": 2, "226": 2, "227": 2, "229399": 2, "23": [2, 5, 10], "2310": 2, "232": 10, "234": 2, "238": 2, "2390": 2, "24": [2, 3, 10], "240": 2, "2401": 5, "241": 2, "243": 2, "246": 2, "246916": 2, "248563": 2, "249": 3, "2491": 6, "25": [5, 7, 9, 10, 12], "250": 2, "25000": [2, 11], "256": [2, 10], "26": [2, 10], "261": 2, "2626429": 2, "265": 2, "266": 2, "267": 2, "268": 2, "27": [5, 10], "270": 2, "271": 2, "272": [2, 3], "274": 2, "27870": 2, "27th": [2, 5, 11], "28": [2, 3, 5, 11], "280": 2, "281": 2, "282": 2, "283": 2, "286": 11, "2871": 2, "288": 2, "289": 2, "292": 3, "2922": 2, "2971": 2, "298": 3, "2dx": 12, "2frac": 9, "2nd": [2, 5, 12], "2t": [3, 9], "2tp": 9, "2x5fcv": 2, "2\u03c3": 12, "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "30": [2, 5, 6, 8, 11, 12], "300": [2, 3, 10], "30000": 2, "302": 3, "305": 2, "306": 2, "308": 3, "30th": 0, "3114": 6, "312": 2, "314": 3, "3190": 2, "32": [0, 2, 6], "321": 2, "3219819": 12, "3220059": 12, "3227": 9, "329": 2, "33": [2, 7, 9], "330": 2, "331": 2, "333": 2, "335": 2, "337": 2, "339": 2, "34": [2, 5, 11, 12], "341": 2, "347": 2, "350": 2, "351": 2, "356": 2, "359": 2, "36": 2, "361": 2, "372": 2, "373": 2, "376132": 2, "3765": 2, "3813": 2, "3821": [2, 11], "3842": 2, "3873": 2, "392": 2, "394": 2, "399": 2, "3f": [0, 3], "3rd": 2, "4": [0, 2, 3, 5, 6, 7, 8, 9, 11], "40": [2, 5, 12], "400": 2, "404333": 2, "405": 2, "407": 2, "41": 5, "412": 2, "413": 2, "414": 2, "417": 2, "421": 2, "423": 2, "4259": 2, "427": 2, "430": 2, "434": 2, "437": 2, "439": 2, "44": 2, "4403": 11, "4424": 2, "446": 2, "45": [5, 7, 11], "452": 2, "4534": 0, "4543": 0, "4601": 2, "461": 2, "463": 2, "465": 2, "466": 2, "470": 2, "48": 5, "481": 2, "486": 2, "487529": 3, "4898": 2, "492": 2, "496": 2, "4960": 8, "497": 2, "499": 2, "4995": 3, "4996": 3, "4997": 3, "4998": 3, "4999": 3, "4f": [3, 8], "5": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "50": [2, 7, 9, 12], "500": [2, 3, 7, 12], "5000": [2, 3, 7, 8], "501": 2, "507": 2, "508": 2, "512": [2, 10, 12], "514": 2, "519": 2, "530": 2, "534": 2, "535": 2, "5357": 2, "5372": 6, "539": 2, "546": 2, "5473": 2, "55": 7, "5620": 2, "569": 2, "57": 2, "573": 2, "57927": 2, "583": 2, "584474": 2, "59": 2, "591": 5, "5f": 6, "5fcvx2": 11, "6": [2, 3, 5, 7, 11], "60": 2, "600": 3, "601": 2, "604": 5, "606": 2, "617": 2, "625": 2, "627": 2, "64": [2, 6, 10, 12], "640": 2, "641": 2, "6435": 2, "6462": 2, "650": 2, "653": 2, "658": 2, "66": [8, 12], "6645": 2, "665": 2, "667": 2, "669": 2, "67": [7, 9], "67557": 2, "678": 2, "683": 2, "686": 3, "688": 2, "691": 2, "692": 3, "694582": 2, "698": 3, "7": [0, 2, 5, 6, 7, 8, 9, 10, 12], "70": 2, "700": 2, "702": 3, "708": 3, "711": 2, "72": 3, "728": 3, "730": 2, "735": 2, "7375": 2, "748": 2, "75": [6, 7, 8, 9, 12], "751": 3, "76": 3, "762": 2, "774": 2, "778": 2, "7797": 2, "780": 3, "787": 2, "794": 2, "798": 2, "8": [0, 2, 5, 6, 7, 11, 12], "8000": 2, "809": 3, "830": 2, "84": 2, "848": 3, "86": [2, 11], "861": 2, "868": 3, "87": [2, 5, 11], "8788": 2, "888": 3, "889504": 2, "896": 3, "9": [2, 7, 9], "90": [7, 9], "901": 2, "9056": 6, "909": 3, "91": 6, "9112": 2, "914": 3, "917": 2, "919": [2, 11], "922": 2, "923": 2, "935": 2, "936": 2, "937": [2, 11], "948": 3, "95": 9, "9533": 2, "958": 2, "965": 3, "967": 3, "97": 2, "978": 2, "979": 2, "982": 2, "984": 3, "99": 9, "A": [2, 3, 5, 9, 10, 11, 12], "As": [5, 6], "By": [5, 9], "For": [0, 2, 3, 6, 7, 8, 9, 11, 12], "If": [0, 5, 7, 9, 11, 12], "In": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "It": [3, 5, 6, 7, 9, 11, 12], "Its": 5, "No": [10, 12], "ONE": 5, "On": [5, 12], "One": [2, 3, 5, 8, 12], "That": [3, 6, 9], "The": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12], "Their": 12, "Then": 5, "There": [2, 5], "These": [2, 3, 4, 5, 8, 10, 12], "To": [5, 7, 11, 12], "_": [2, 7, 9, 11, 12], "__": 12, "__init__": 5, "_check_i": 12, "_check_init_paramet": 5, "_f": 12, "_i": 12, "_ifcb": 11, "_kdei": 12, "_lequa2022": 11, "_nestedsequ": 9, "_neural": 12, "_supportsarrai": 9, "_threshold_optim": 12, "abalon": 2, "abc": 12, "aboud": 5, "about": [2, 5, 7, 9, 11, 12], "abov": [2, 4, 5, 7, 9], "absolut": [0, 3, 5, 7, 9, 12], "absolute_error": 9, "abstent": 10, "abstract": [5, 9, 10, 11, 12], "abstractloss": 12, "abstractmethod": 5, "abstractprotocol": [8, 9, 11], "abstractstochasticseededprotocol": [8, 9], "abstracttransform": 12, "academ": 2, "acc": [0, 3, 5, 7, 8, 9, 12], "acc_error": 9, "acc_lr": 12, "accept": [5, 12], "access": [2, 5, 11, 12], "accommod": [2, 9], "accompani": 9, "accord": [6, 9, 10, 11, 12], "accordingli": [7, 12], "account": 3, "accuraci": [2, 3, 7, 9, 12], "achiev": [2, 5, 6, 7, 8], "acm": [0, 2, 5, 11, 12], "across": [0, 2, 3, 7, 9, 12], "act": 9, "actual": 12, "acut": 2, "ad": [0, 1, 8, 9, 10, 12], "adapt": [9, 10], "add": [5, 6, 9, 11, 12], "add_word": [9, 11], "addit": [5, 9], "addition": 2, "adher": 9, "adjust": [0, 5, 9, 12], "adjustedclassifyandcount": [9, 12], "admit": 12, "adopt": [5, 6, 11], "advanc": [0, 2, 6, 8, 9], "advantag": [5, 8, 12], "ae": [0, 4, 5, 7, 9], "after": [5, 9, 11, 12], "afterward": [10, 12], "again": [7, 9], "against": [6, 7], "aggr": 9, "aggr_speedup": [3, 9], "aggreg": [0, 1, 3, 6, 7, 8, 9], "aggregate_with_threshold": [9, 12], "aggregation_fit": [5, 9, 12], "aggregativecrispquantifi": [5, 9, 12], "aggregativemedianestim": [9, 12], "aggregativequantifi": [3, 5, 9, 12], "aggregativesoftquantifi": [5, 9, 12], "ahead": 5, "aim": [6, 7], "aka": [11, 12], "akin": [9, 12], "akinori": 9, "al": [2, 4, 5, 9, 10, 11, 12], "alaiz": [5, 12], "alegr": [5, 12], "alejandro": [0, 6], "alexandari": [5, 10, 12], "algorithm": [2, 8, 9, 12], "alia": [5, 9, 10, 11, 12], "all": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12], "allia": 5, "alloc": [9, 10], "allow": [2, 4, 5, 7, 8, 9, 10, 11, 12], "almost": 5, "along": [2, 3, 5, 9, 12], "alpha": 12, "alpha_i": 12, "alreadi": [3, 5, 9, 11], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12], "altern": [3, 6, 9, 12], "although": [5, 6, 7, 8, 12], "alwai": [5, 7, 9, 12], "among": [0, 3, 5], "amount": [3, 5, 8, 9, 12], "an": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "analys": [0, 7], "analysi": [0, 2, 5, 11], "analyz": 7, "ancestor": 12, "andrea": 0, "ani": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12], "anoth": [2, 3, 7, 8, 9, 12], "anotherdir": 9, "anyon": 2, "anyth": [5, 12], "anywher": 9, "api": [2, 5, 12], "app": [0, 6, 7, 8, 9, 12], "appeal": 3, "appear": [7, 9], "append": 7, "appli": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12], "applic": [5, 12], "approach": [5, 8, 12], "appropri": 6, "approxim": [5, 7, 9, 10, 12], "ar": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "arbitrari": [5, 12], "archiv": 11, "archive_filenam": 9, "arg": [9, 10, 11, 12], "argmax": 9, "argmin_preval": 9, "args_i": 9, "argu": 6, "argument": [2, 3, 5, 7, 8, 9, 11, 12], "aris": 3, "around": [5, 8, 11, 12], "arrai": [5, 7, 9, 10, 11, 12], "arraylik": 9, "articl": [5, 6], "artifici": [0, 1, 5, 6, 7, 9], "artificialprevalenceprotocol": 9, "arxiv": 5, "as_binary_preval": 9, "as_dict": 9, "asarrai": [3, 9], "asdataload": [9, 10], "asonam": 2, "aspect": 0, "assert": 11, "assess": 6, "assign": [5, 9, 11], "associ": 9, "assum": [0, 3, 5, 12], "assumpion": 12, "assumpt": [0, 3, 7, 9, 12], "attach": 11, "attempt": 5, "attribut": 12, "august": 2, "author": [0, 12], "auto": [3, 9], "autom": 0, "automat": [2, 10], "av": [5, 12], "avail": [0, 2, 3, 4, 5, 7, 10, 11, 12], "averag": [2, 3, 5, 9, 11, 12], "avoid": [5, 9, 11], "ax": 12, "axi": [7, 9, 12], "b": [2, 5, 9, 11, 12], "back": 5, "backend": [9, 12], "bag": [5, 12], "bagging_rang": 12, "bagging_tri": 12, "balanc": [2, 6, 7, 12], "band": [7, 9], "bandwidth": [5, 12], "bandwidth_method": [9, 12], "bar": 9, "barranquero": [4, 5, 10, 12], "base": [0, 2, 5, 9, 10], "base_classifi": 7, "base_estim": 5, "base_quantifi": 12, "base_quantifier_class": 12, "baseestim": [5, 10, 12], "baselin": 0, "basequantifi": [5, 9, 12], "basic": [7, 12], "batch": 10, "batch_siz": 10, "batch_size_test": 10, "bay": [5, 12], "bayesian": [5, 12], "bayesian_quantif": 5, "bayesiancc": [9, 12], "bct": [10, 12], "bctscalibr": [9, 10], "bean": [2, 11], "beat": [10, 12], "becaus": 12, "becom": [8, 9], "been": [2, 5, 6, 7, 8, 9, 10, 11, 12], "befor": [9, 10, 11, 12], "beforehand": 9, "begin": 9, "behav": [5, 7, 8], "behavior": 12, "behaviour": [3, 5, 8, 9], "being": [3, 6, 8, 9, 12], "belief": 3, "bella": 12, "belong": [5, 6, 9, 12], "below": [2, 5, 7, 9, 11], "best": [6, 9, 10, 12], "best_epoch": 9, "best_model": 9, "best_model_": 6, "best_params_": 6, "best_scor": 9, "better": [5, 12], "between": [0, 7, 9, 10, 12], "beyond": 7, "bia": [0, 1, 5, 9, 10, 12], "bias": 7, "bidirect": 12, "bigger": 2, "bin": [6, 7, 9, 12], "bin_bia": 7, "bin_diag": 7, "binar": [9, 11], "binari": [0, 5, 7, 9, 10, 11, 12], "binary_bias_bin": [7, 9], "binary_bias_glob": [7, 9], "binary_diagon": [7, 9], "binary_quantifi": 12, "binaryaggregativequantifi": [9, 12], "binaryquantifi": [9, 12], "binom": 9, "black": 5, "blobel": 12, "blobelloss": [5, 9, 12], "block": [5, 9], "blondel": [5, 9, 12], "boldsymbol": 12, "booktitl": 0, "bool": [9, 10, 12], "boolean": [9, 11, 12], "bootstrap_rang": 12, "bootstrap_tri": 12, "both": [7, 11, 12], "bound": [9, 12], "boundari": 9, "box": [5, 7, 9], "branch": 0, "break": 5, "breast": 2, "brief": [2, 3, 11], "bring": 12, "broken": [7, 9], "brokenbar_supremacy_by_drift": 9, "bsd": 9, "budg": 8, "budget": 8, "build": 5, "buns": [5, 12], "burden": 8, "byte": 9, "c": [5, 6, 9, 10, 11, 12], "calcul": [9, 12], "calibr": [5, 9], "calibratedclassifi": 5, "calibratedclassifiercv": 5, "calibratorfactori": 10, "call": [2, 3, 5, 7, 8, 9, 11, 12], "callabl": [2, 9, 11, 12], "can": [2, 3, 5, 6, 7, 8, 9, 11, 12], "cancer": 2, "cannot": 12, "capabl": 8, "care": 12, "carlo": [5, 12], "carri": [2, 3, 5, 9, 11, 12], "case": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12], "castano": [5, 11], "casta\u00f1o": 12, "castro": [5, 12], "categor": [5, 11], "categori": 9, "cauchi": [5, 12], "cc": [5, 7, 9, 12], "cdf": [5, 12], "cdist": 12, "cell": 12, "center": [7, 12], "central": 9, "ch": 12, "chain": 5, "chang": [2, 3, 5, 9, 10, 11, 12], "channel": 12, "character": [0, 3, 5], "characteriz": [2, 5, 11], "charg": [2, 9, 11], "chart": 9, "check": [5, 9, 11, 12], "check_prevalence_vector": 9, "checkpoint": [10, 12], "checkpointdir": 12, "checkpointnam": 12, "checkpointpath": 10, "chess": 2, "child": 9, "choic": [3, 6, 12], "choos": [5, 12], "chosen": [3, 6, 9], "cl": 2, "class": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "class2int": 11, "class_cond_x": 12, "class_conditional_r": 9, "class_preval": 12, "class_weight": [6, 7, 12], "classes_": [9, 10, 11, 12], "classif": [0, 1, 2, 3, 5, 9, 11, 12], "classif_posterior": 12, "classif_predict": [5, 12], "classifi": [0, 2, 6, 7, 9, 10, 12], "classification_fit": 12, "classifier__": 6, "classifier__c": [6, 8], "classifier_fit_predict": [5, 9, 12], "classifier_net": 10, "classifiermixin": [10, 12], "classifyandcount": [5, 9, 12], "classmethod": [2, 9, 11, 12], "classnam": 11, "classs": 9, "classtransform": [5, 9, 12], "clean_checkpoint": [9, 12], "clean_checkpoint_dir": [9, 12], "clear": 7, "clearli": 7, "clef": [2, 11], "clip": [5, 9, 12], "clip_if_necessari": 9, "clone": 5, "close": [5, 8, 9, 11, 12], "closest": 12, "cm": 9, "cmc": 2, "cnn": [5, 12], "cnnnet": [5, 9, 10, 12], "code": [2, 3, 4, 5, 6, 7, 8, 9, 10], "codefram": 11, "codifi": 11, "coincid": 2, "col": [2, 11], "collat": 9, "collect": [2, 8, 9, 10, 11, 12], "collet": 11, "color": [7, 9], "colormap": 9, "column": [2, 3, 9, 11], "com": [0, 2, 9, 12], "combin": [5, 6, 8, 9, 12], "combinations_budget": 9, "combinedloss": [5, 9, 12], "come": [2, 3, 5, 8, 9, 11, 12], "common": [5, 12], "commonli": [0, 8], "compar": [7, 9], "comparison": [7, 8], "compat": [5, 12], "competit": [0, 2, 11], "compil": [4, 5], "complement": 12, "complet": [5, 7, 9, 12], "complex": 9, "complic": 12, "compon": [9, 10, 12], "compos": [0, 1, 9], "composablequantifi": [5, 9, 12], "composit": [5, 12], "comput": [3, 5, 7, 8, 9, 11, 12], "computation": 6, "concept": 0, "conceptu": [6, 12], "concern": 5, "condit": [5, 8, 9, 12], "condsoftmax": [5, 9, 12], "conduct": [2, 9], "confer": [0, 2, 5, 10, 11], "confid": [5, 9], "configstatu": 9, "configur": [6, 9, 12], "conform": 11, "confront": [6, 8], "confus": 12, "connect": [2, 12], "consecut": [9, 10, 11, 12], "consid": [0, 5, 7, 8, 9, 10, 11, 12], "consist": [2, 6, 7, 8, 9, 10, 11, 12], "constrain": [7, 8, 9, 11], "construct": [5, 12], "constructor": 5, "consult": [2, 5, 8, 12], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12], "contanin": 9, "context": 9, "contribut": 5, "control": [8, 9, 12], "conveni": [3, 5, 8, 9], "converg": 12, "convers": 3, "convert": [5, 9, 10, 11, 12], "convolut": 10, "copi": [9, 11], "correct": [5, 10, 12], "correctli": 9, "correspond": [2, 3, 5, 7, 9, 11, 12], "cost": 9, "costli": 6, "could": [0, 2, 3, 5, 6, 7, 8, 11], "count": [0, 6, 7, 9, 11, 12], "counter": 11, "counts_from_label": 9, "countvector": 11, "covari": [11, 12], "cover": [8, 9, 10], "coz": [2, 5, 11], "cpu": [5, 10, 12], "creat": [0, 2, 5, 9, 12], "create_if_not_exist": 9, "create_parent_dir": 9, "crisp": [3, 5, 9, 12], "criteria": [6, 11, 12], "criterion": 12, "cross": [5, 9, 10, 11, 12], "cross_val_predict": 9, "csr": 11, "csr_matrix": 11, "csv": 11, "ctg": 2, "cuda": [5, 10, 12], "cumbersom": 8, "cumberson": 9, "curios": 7, "current": [5, 9, 10, 11, 12], "custom": [0, 1, 5, 8, 9, 11], "custom_protocol": 8, "customarili": [5, 6], "cv": [5, 6], "cvclassifi": [5, 9, 12], "cyan": 7, "czy\u017c": 5, "d": [5, 12], "d_": 9, "dat": [2, 10], "data": [0, 5, 7, 9, 10, 12], "data_hom": 11, "datafram": [3, 9], "dataload": 10, "datapoint": 12, "dataset": [0, 1, 3, 5, 6, 7, 8, 9, 10, 12], "dataset_nam": 11, "deactiv": [3, 9], "deafult": 11, "deal": 2, "decaesteck": [5, 12], "decai": 10, "decid": [8, 9, 11], "decim": 9, "decis": [9, 10, 12], "decision_funct": [9, 10, 12], "decomposit": 10, "dedic": [2, 3, 11, 12], "deep": [5, 9, 12], "def": [2, 3, 5, 7, 9], "default": [2, 5, 8, 9, 10, 11, 12], "defin": [2, 5, 8, 9, 10, 11, 12], "degener": [5, 9], "degeneraci": 12, "degre": 6, "del": [2, 5, 11], "delai": 9, "delet": 10, "deliv": [5, 6, 12], "delta": 12, "denomin": 12, "dens": [2, 12], "densiti": [9, 12], "depart": 5, "depend": [5, 6, 7, 9, 12], "deprec": [8, 9, 12], "describ": [5, 9, 12], "descript": [2, 11], "design": 6, "desir": [2, 3, 5, 8, 9, 11], "destin": 9, "detail": [0, 2, 3, 4, 5, 10, 11, 12], "determin": [6, 7, 8, 9], "determinist": 9, "detriment": 7, "devel": [0, 11], "develop": 6, "deviat": [2, 7, 8, 9, 11], "devic": [2, 5, 7, 9, 10, 12], "devis": 5, "devot": 6, "di": 12, "diabet": 2, "diagnos": 12, "diagon": [0, 1, 9], "dict": [9, 11, 12], "dictionari": [9, 10, 11, 12], "differ": [0, 2, 5, 6, 7, 8, 9, 11, 12], "differenti": 12, "difficult": [2, 7], "digit": 2, "dij": 12, "dimens": [9, 10, 11, 12], "dimension": [9, 10, 11, 12], "dir": [9, 12], "directli": 5, "directori": [4, 5, 9, 10, 11, 12], "discard": [9, 11, 12], "discoveri": 5, "discret": [9, 12], "discuss": 7, "disjoint": 10, "disk": [9, 11], "disntac": 12, "displai": [2, 3, 7, 8, 9, 10], "displaystyl": 9, "disproportion": 2, "dissimilar": 12, "distanc": [9, 12], "distancetransform": [5, 9, 12], "distant": [8, 9], "distribut": [2, 3, 5, 7, 8, 9, 11, 12], "distributionmatch": 6, "distributionmatchingi": [9, 12], "distributionmatchingx": [9, 12], "diverg": [5, 9, 12], "divid": 9, "dl": 12, "dmx": [9, 12], "dmy": [5, 6, 9, 12], "do": [2, 3, 5, 6, 9, 10, 11, 12], "doc": 2, "doc_embed": 12, "doc_embedding_s": 12, "doc_posterior": 12, "document": [2, 5, 7, 10, 11, 12], "document_embed": [9, 10], "doe": [2, 4, 5, 9, 12], "doi": 12, "domain": 9, "domaina": 9, "domainb": 9, "domainmix": 9, "done": [5, 6], "dot": [7, 9], "dowload": 9, "down": [3, 7, 8, 9, 11, 12], "download": [2, 4, 5, 9, 11], "download_fil": 9, "download_file_if_not_exist": 9, "draw": [9, 12], "drawback": 8, "drawn": [2, 8, 9, 11], "drift": [0, 1], "drop": 10, "drop_p": 10, "dropout": [10, 12], "dry": [2, 11], "dtype": [3, 9, 11], "due": 8, "dump": 11, "dure": [3, 5, 7, 12], "dx": 12, "dy": [5, 9, 12], "dynam": [5, 10, 11, 12], "d\u00edez": 5, "e": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "eacc": [9, 12], "each": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "earli": [9, 10, 12], "earlystop": 9, "easi": 2, "easili": [2, 7, 10], "ecc": [9, 12], "ecir": 6, "ecml": [5, 12], "edi": 12, "edu": 11, "edx": 12, "eemq": [9, 12], "effect": [5, 9, 10, 12], "effici": [5, 12], "ehdi": [9, 12], "either": [3, 5, 9, 12], "elect": 8, "element": [5, 9, 11, 12], "elm": [4, 5, 12], "em": [9, 12], "emb": 10, "embed": [5, 10, 12], "embed_s": 10, "embedding_s": 10, "emploi": [9, 12], "empti": 11, "emq": [7, 9, 12], "emq_bct": [9, 12], "enabl": 10, "enable_metadata_rout": [9, 10, 12], "encod": 11, "end": [5, 6, 9, 12], "end_msg": 9, "endeavour": 9, "endow": 9, "energi": 12, "energykerneltransform": [5, 9, 12], "energyloss": [5, 9, 12], "enforc": 9, "enough": 7, "ensembl": [0, 2, 9, 11, 12], "ensemblefactori": [9, 12], "ensur": [9, 12], "entir": [2, 3, 5, 6, 7, 8, 9], "entri": [2, 9, 12], "entropi": 12, "enum": 9, "environ": [3, 5, 6, 7, 8, 9, 12], "ep": [3, 9], "epacc": [9, 12], "epoch": [9, 10, 12], "epsilon": [3, 9, 12], "equal": [8, 9, 12], "equat": [5, 9, 12], "equial": 8, "equidist": 9, "equip": [5, 7], "equival": [0, 12], "err_drift": 7, "err_nam": 9, "error": [0, 1, 2, 5, 6, 10, 12], "error_by_drift": [7, 9], "error_funct": 3, "error_metr": [3, 6, 8, 9], "error_nam": [7, 9], "error_tol": 9, "especi": 9, "establish": 9, "estim": [0, 2, 3, 7, 9, 10, 11, 12], "estim_prev": [3, 7, 9], "estim_preval": [0, 5, 12], "estimant": 12, "esuli": [0, 2, 4, 5, 10, 11, 12], "et": [2, 4, 5, 9, 10, 11, 12], "etc": [0, 5], "euclidean": [9, 12], "evalu": [0, 1, 2, 5, 6, 7, 8, 10, 11, 12], "evaluate_on_sampl": 9, "evaluatio": 3, "evaluation_report": [3, 9], "evalut": 12, "even": [0, 9], "eventu": [10, 11], "everi": [2, 3, 5, 6, 8, 9, 12], "everyth": 5, "evinc": 7, "exact": [2, 5, 8, 9, 11, 12], "exact_train_prev": [5, 12], "exactli": 2, "exampl": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12], "exce": 9, "except": [5, 9, 12], "execut": 3, "exemplifi": 2, "exhaust": [5, 9], "exhibit": [6, 7, 8], "exist": [5, 8, 9, 10, 12], "exist_ok": 9, "exit": 3, "exp": 12, "expand": 9, "expand_frame_repr": 3, "expand_grid": 9, "expect": [0, 8, 12], "expectationmaximizationquantifi": [5, 9, 12], "experi": [2, 5, 7, 9, 11], "experiment": [0, 5], "explain": [3, 7], "explan": 8, "explicit": [0, 1, 12], "explicit_loss_minim": 5, "explor": [5, 6, 9], "express": 11, "ext": 4, "extend": [4, 5, 9, 12], "extens": [4, 5, 7, 12], "extern": 5, "extra": 12, "extract": [9, 11, 12], "extrem": 2, "f": [0, 2, 3, 5, 6, 7, 8, 11, 12], "f1": [9, 10], "f1_error": 9, "f1e": [3, 9], "f_1": 9, "fabrizio": [0, 6], "facilit": 0, "fact": [5, 7], "factor": 9, "factori": 12, "fail": 9, "fair": 8, "fals": [2, 3, 5, 7, 9, 10, 11, 12], "famili": [5, 12], "familiar": 5, "far": [9, 10, 11], "fare": 9, "fast": [2, 9, 11], "faster": [2, 11], "feat1": 11, "feat2": 11, "featn": 11, "featur": [2, 11, 12], "feature_extract": 11, "fetch": [0, 2], "fetch_ifcb": [2, 9, 11], "fetch_lequa2022": [2, 9, 11], "fetch_lequa2024": [9, 11], "fetch_review": [2, 5, 6, 7, 8, 9, 11, 12], "fetch_twitt": [0, 2, 5, 9, 11], "fetch_ucibinarydataset": [2, 5, 9, 11], "fetch_ucibinarylabelledcollect": [2, 9, 11], "fetch_ucilabelledcollect": 11, "fetch_ucimulticlassdataset": [2, 9, 11], "fetch_ucimulticlasslabelledcollect": [2, 9, 11], "fetchucimulticlasslabelledcollect": 2, "fewer": 11, "ff": 12, "ff_layer": 12, "fhe": 2, "file": [7, 9, 10, 11, 12], "filenam": 9, "filter": 2, "fin": 2, "final": [3, 5, 7, 12], "find": [0, 2, 5, 6, 12], "finish": [3, 6], "firat": 5, "first": [2, 3, 4, 5, 7, 9, 11, 12], "fit": [0, 5, 6, 7, 8, 9, 10, 11, 12], "fit_classifi": [5, 12], "fit_cv": [9, 10], "fit_learn": 5, "fit_tr_val": [9, 10], "fit_transform": [9, 11, 12], "fix": [8, 12], "flag": 9, "flaw": 6, "float": [2, 5, 9, 10, 11, 12], "float64": 3, "fn": 9, "fold": [5, 9, 11, 12], "folder": [2, 6, 8, 11, 12], "follow": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12], "folow": 2, "fomart": 11, "for_model_select": [2, 11], "forc": [3, 9], "forest": 5, "form": [2, 5, 9, 11, 12], "forman": [5, 8, 12], "format": [2, 7, 9, 11, 12], "former": 12, "formula": 9, "forward": [9, 10, 12], "found": [0, 2, 5, 9, 10, 11, 12], "four": 5, "fourier": 12, "fp": 9, "fpr": [9, 12], "frac": [9, 12], "fraction": [5, 12], "framework": [0, 5, 12], "franc": [5, 12], "frequenc": [2, 11, 12], "frequent": 0, "from": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "from_csv": [9, 11], "from_nam": [3, 9], "from_spars": [9, 11], "from_text": [9, 11], "fujino": 9, "fulfil": 5, "full": [8, 9, 11, 12], "fulli": 9, "func": 9, "function": [0, 2, 3, 6, 7, 8, 10, 11, 12], "functionloss": 12, "further": [2, 5, 10, 11, 12], "fusion": [2, 5, 11], "futur": [5, 9], "g": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12], "gain": 9, "gao": [2, 5, 11, 12], "gap": 11, "gasp": [2, 11], "gaussian": 12, "gaussiankerneltransform": [5, 9, 12], "gaussianrffkerneltransform": [5, 9, 12], "gen": 9, "gen_data": 7, "gener": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "generation_func": 9, "german": 2, "get": [2, 5, 7, 8, 9, 10, 11, 12], "get_col": 9, "get_conditional_probability_sampl": [9, 12], "get_diverg": 9, "get_kde_funct": [9, 12], "get_labelled_collect": 9, "get_mixture_compon": [9, 12], "get_nprevpoints_approxim": [8, 9], "get_param": [5, 9, 10, 12], "get_prevalence_sampl": [5, 9, 12], "get_probability_distribut": [9, 12], "get_quapy_hom": 9, "getptecondestim": [9, 12], "gini": 12, "github": [0, 2, 12], "give": [8, 12], "given": [3, 5, 6, 8, 9, 10, 11, 12], "global": 9, "goal": 12, "goe": [6, 9], "gonz\u00e1lez": [2, 5, 11, 12], "good": [2, 6, 7], "got": [6, 12], "govern": 3, "gpu": [10, 12], "gram_matrix_mix_sum": [9, 12], "greater": 2, "grenobl": [5, 12], "grid": [6, 8, 9, 12], "grid_point": 9, "gridsearchcv": [6, 12], "gridsearchq": [6, 8, 9, 12], "ground": 12, "group": 5, "group_param": 9, "gtol": 12, "guarante": [5, 8, 9, 11, 12], "guez": 5, "guid": [9, 10, 11, 12], "g\u00e1llego": [2, 5, 11, 12], "h": 12, "ha": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "haberman": [2, 5], "had": 11, "hand": 6, "hand_digit": 2, "handl": [2, 9], "happen": [7, 9], "hard": [5, 9, 10, 12], "harder": 7, "harmon": 9, "harri": 2, "hassan": 5, "hat": [9, 12], "hat_yi": 12, "have": [2, 3, 5, 6, 7, 8, 9, 11, 12], "hcr": [2, 5, 11], "hcv": 2, "hd": [5, 9, 12], "hdx": [5, 9, 12], "hdy": [0, 9, 12], "held": [5, 6, 9, 10, 12], "helling": 12, "hellingerdist": 9, "hellingerdistancei": [5, 9, 12], "hellingersurrogateloss": [5, 9, 12], "hellingh": 9, "help": [3, 7, 12], "helper": 9, "henc": [9, 11, 12], "here": [3, 12], "heurist": [3, 12], "hidden": [7, 10, 12], "hidden_s": 10, "hide": 7, "high": [7, 9, 12], "higher": [7, 8, 11], "highlight": 9, "hightlight": 9, "histogram": 12, "histogramtransform": [5, 9, 12], "hlt": 0, "hold": [0, 9, 12], "home": [9, 11], "hook": 12, "hope": 0, "hopkin": 12, "host": [0, 2], "host_fold": 10, "how": [2, 5, 6, 7, 9, 10, 11, 12], "howev": [2, 6, 7, 9], "hp": [2, 5, 11], "hsosik": 2, "html": 11, "http": [0, 2, 9, 11, 12], "huge": 5, "hyper": [5, 6, 9, 10, 12], "hyperparam": 6, "hyperparamet": [5, 8, 9, 12], "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "ic": 11, "icpr": 9, "id": [2, 5, 11], "idea": [2, 8], "idf": 2, "ieee": 2, "ifcb": [0, 1, 11], "ifcb_zenodo": 2, "ifcbtestsampl": 11, "ifcbtrainsamplesfromdir": 11, "ignor": [2, 9, 10, 11, 12], "ii": 9, "iid": [0, 3, 7, 12], "ij": 9, "illustr": [0, 5, 6, 7], "image_seg": 2, "imdb": [2, 6, 7, 8, 11], "impact": 2, "implement": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "implicit": 9, "import": [0, 2, 5, 6, 7, 8, 11, 12], "impos": [6, 9], "impract": 8, "improv": [0, 5, 9, 10, 12], "in_plac": 9, "in_protocol": 8, "includ": [0, 2, 4, 5, 6, 7, 8, 11, 12], "inconsist": 5, "inconveni": 9, "increas": 8, "incur": 8, "inde": [5, 8], "independ": [9, 12], "index": [2, 5, 9, 10, 11, 12], "indextransform": [9, 11], "indic": [2, 3, 5, 7, 8, 9, 10, 11, 12], "individu": [5, 11], "ineffici": 9, "infer": [2, 5, 11], "inform": [0, 2, 5, 6, 8, 9, 10, 11, 12], "infrequ": 11, "inherit": [5, 8, 9], "initi": [2, 10, 12], "inplac": [5, 11, 12], "inproceed": 0, "input": [5, 7, 9, 10, 11, 12], "insid": [9, 10, 12], "insight": 7, "inspir": 5, "instal": [10, 12], "instanc": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12], "instanti": [2, 3, 5, 6, 8, 9, 10, 12], "instead": [2, 3, 5, 8, 9, 10, 11, 12], "int": [2, 7, 9, 11, 12], "integ": [5, 9, 10, 11, 12], "integr": 12, "intend": 12, "interest": [0, 3, 7, 8, 9], "interestingli": 7, "interfac": [2, 3, 12], "intern": [0, 2, 3, 5, 10, 11, 12], "interpret": [0, 2, 7, 11, 12], "interv": [7, 8, 9], "intract": 9, "introduc": 5, "invalid": 9, "invari": [5, 9, 12], "invers": [5, 9, 12], "invert": [5, 12], "invok": [5, 8, 9, 11], "involv": [7, 9], "ionospher": 2, "ir": 12, "iri": 2, "irrespect": [3, 7, 11, 12], "is_probabilist": 12, "isolet": 2, "isomer": 9, "isometr": [7, 9], "issu": [9, 12], "istanc": 11, "isti": 0, "item": [9, 12], "iter": [2, 9, 11, 12], "iterateprotocol": 9, "its": [0, 5, 6, 8, 9, 10, 12], "itself": [5, 9, 12], "izbicki": 5, "j": [2, 5, 9, 11, 12], "jax": 5, "joachim": [5, 10, 12], "job": 4, "joblib": 12, "join": [9, 11], "journal": 5, "just": [5, 8, 12], "k": [0, 5, 9, 10, 11, 12], "kawakubo": 12, "kde": [5, 12], "kdebas": [9, 12], "kdei": 12, "kdeyc": [9, 12], "kdeyhd": [9, 12], "kdeyml": [9, 12], "keep": [9, 11], "kei": [9, 11], "kept": 11, "kernel": [9, 10, 12], "kernel_height": 10, "kerneldens": 12, "kerneltransform": [9, 12], "keyword": [11, 12], "kfcv": [2, 9, 10, 11], "kind": 5, "kindl": [2, 5, 7, 11, 12], "king": 12, "kl": 9, "kld": [0, 4, 5, 9, 10, 12], "kmm": 12, "know": [5, 6], "knowledg": [0, 2, 5, 11], "known": [2, 5, 6, 9, 12], "kraemer": [8, 9], "kullback": [5, 9, 12], "kundaj": 10, "kwarg": [10, 11, 12], "l": 12, "l1": [5, 9, 12], "l1_norm": 9, "l2": [5, 12], "label": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12], "labelled_collect": [8, 9], "labelledcollect": [2, 5, 8, 9, 11, 12], "laplacian": 12, "laplaciankerneltransform": [5, 9, 12], "larg": 9, "larger": [9, 12], "largest": 9, "last": [5, 7, 8, 9, 10, 11, 12], "lastli": 5, "latent": 5, "latinn": [5, 12], "latter": [5, 12], "launch": 9, "layer": [5, 10, 12], "lazi": 12, "ldot": 12, "lead": 11, "learn": [0, 1, 3, 5, 6, 9, 10, 11, 12], "learner": [5, 6, 10, 12], "least": [2, 11], "leastsquaresloss": [5, 9, 12], "leav": [9, 11], "left": [9, 11, 12], "legend": 9, "legitim": 8, "leibler": [5, 9, 12], "len": 9, "length": [10, 11], "lequa": [0, 1, 8, 11], "lequa2022_experi": [2, 11], "less": [9, 11, 12], "let": [3, 5, 6, 9, 12], "letter": 2, "leverag": 5, "leyend": 9, "li": [5, 9], "licens": 9, "lie": [9, 12], "like": [3, 5, 7, 8, 9, 10, 11, 12], "likelihood": [5, 10, 12], "limit": [7, 8, 9, 12], "line": [5, 9], "linear": [5, 7, 9, 12], "linear_model": [0, 5, 6, 8, 10, 12], "linear_search": 9, "linearsvc": [5, 7, 11], "link": 11, "linspac": 7, "list": [2, 7, 9, 10, 11, 12], "listedcolormap": 9, "liter": [9, 12], "literatur": [2, 3, 6, 8, 9], "littl": 0, "load": [2, 5, 8, 9, 11, 12], "load_report": 9, "loader": [2, 11], "loader_func": [2, 11], "loader_kwarg": 11, "local": 9, "log": [9, 11, 12], "logist": [5, 10, 12], "logisticregress": [0, 5, 6, 8, 10, 12], "logscal": 9, "logspac": [6, 8, 12], "loki": [9, 12], "long": [6, 10], "longer": [9, 12], "longest": 10, "look": [2, 7, 12], "loop": 12, "loss": [0, 1, 9, 10, 12], "lost": 9, "lot": 3, "low": [6, 7, 9, 10], "lower": [7, 9, 12], "lower_is_bett": 9, "lowest": 7, "lowranklogisticregress": [9, 10], "lq": [5, 12], "lr": [5, 10, 12], "lstm": [5, 10, 12], "lstm_class_nlay": 10, "lstm_hidden_s": 12, "lstm_nlayer": 12, "lstmnet": [9, 10], "m": [5, 9, 12], "m_": 9, "machin": [0, 1, 3, 5, 6, 9, 10], "macro": 9, "made": [2, 4, 9, 11, 12], "mae": [0, 3, 6, 8, 9, 10, 12], "mae_loss": [9, 12], "mae_scor": 6, "magnitud": 2, "mai": [5, 9], "main": [7, 8], "maintain": [5, 12], "make": [0, 2, 4, 5, 9, 12], "makedir": 9, "maletzk": 5, "mammograph": 2, "manag": [0, 2, 5, 11], "mani": [0, 2, 3, 5, 6, 7, 8, 9, 12], "manner": [2, 10, 12], "manual": [2, 3, 4, 5], "map": [3, 9, 10, 12], "map_parallel": 9, "mapsimplex": [5, 9, 12], "margin": [10, 12], "mark": [6, 9], "markov": 5, "mass": 9, "match": [5, 9, 12], "match_dist": 9, "math": [5, 9, 12], "mathbb": 12, "mathcal": [9, 12], "mathieu": [5, 9, 12], "mathrm": 12, "matplotlib": 9, "matric": [2, 7, 11], "matrix": [5, 7, 9, 12], "max": [2, 5, 9, 12], "max_it": [9, 12], "max_sample_s": 12, "max_train_inst": [2, 11], "maxim": [0, 12], "maximum": [2, 5, 8, 9, 10, 11, 12], "maximumlikelihoodprevalenceestim": [9, 12], "maxit": 12, "mcmc": 12, "mcmc_seed": 12, "md": 9, "mean": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "mean_absolute_error": 9, "mean_normalized_absolute_error": 9, "mean_normalized_relative_absolute_error": 9, "mean_relative_absolute_error": 9, "meant": [5, 12], "measur": [0, 1, 4, 5, 6, 7, 9, 12], "mechan": [0, 9, 10, 12], "median": [5, 12], "medianestim": [9, 12], "medianestimator2": [9, 12], "member": [5, 12], "memori": 10, "merchandis": [2, 11], "merg": 7, "merge_t3": 11, "messag": 12, "met": 11, "meta": [0, 1, 9, 10], "metadata": [9, 10, 12], "metadata_rout": [9, 10, 12], "method": [0, 1, 2, 3, 4, 6, 7, 8, 9], "method_data": 7, "method_nam": [7, 9, 12], "method_ord": 9, "metric": [0, 5, 6, 9, 12], "mhr": 2, "might": [3, 9, 11], "mimick": 12, "min": 2, "min_": [9, 12], "min_class_support": [2, 11], "min_df": [5, 6, 7, 8, 11, 12], "min_po": 12, "min_test_split": [2, 11], "mine": [2, 5], "minim": [0, 1, 9, 12], "minimum": [2, 11, 12], "minimun": 11, "mining6": 11, "minu": 9, "minv": 5, "mirkobuns": 12, "misclassif": 12, "miss": 9, "missclassif": 5, "mistak": 9, "mixtur": [5, 9, 12], "mixture_point": 9, "mkld": [3, 9, 12], "ml": [5, 11, 12], "mlpe": 12, "mnae": [9, 12], "mnkld": [3, 9, 12], "mnrae": [9, 12], "mock": [9, 10], "model": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12], "model_select": [6, 8, 12], "modif": 9, "modifi": [5, 9], "modul": [3, 5, 7, 8], "molecular": 2, "moment": [3, 5], "monitor": 9, "mont": [5, 12], "montecarlo_tri": 12, "more": [2, 3, 4, 5, 7, 8, 9, 11, 12], "moreo": [0, 2, 5, 6, 11, 12], "moreo2021quapi": 0, "most": [0, 2, 3, 5, 7, 8, 9, 11, 12], "movi": 2, "mp": 5, "mrae": [3, 9, 10, 12], "ms2": [5, 9, 12], "mse": [3, 5, 9, 12], "msg": 9, "multi": [5, 12], "multiclass": [0, 5, 8, 9, 11, 12], "multipl": 12, "multipli": 9, "multiprocess": [9, 12], "multivari": [5, 10], "must": [5, 9, 11, 12], "mutliclasshdi": 5, "mutual": 12, "my_arrai": 9, "my_collect": 11, "my_custom_load": 2, "my_data": 2, "mycustomloss": 5, "n": [2, 8, 9, 10, 12], "n_bin": [7, 9, 12], "n_class": [5, 8, 9, 10, 11, 12], "n_compon": 10, "n_dimens": [10, 12], "n_epoch": 12, "n_estim": 12, "n_featur": [10, 12], "n_instanc": [9, 10, 12], "n_job": [5, 6, 8, 9, 10, 11, 12], "n_preval": [8, 9], "n_prevpoint": [8, 9], "n_repeat": [8, 9], "n_rff": 12, "n_sampl": [9, 10], "n_test": 11, "n_train": 11, "nae": [0, 9], "name": [5, 7, 9, 10, 11, 12], "naonori": 9, "nativ": 0, "natur": [0, 1, 9], "naturalprevalenceprotocol": 9, "nbin": [6, 7, 9, 12], "nbv": [10, 12], "nbvscalibr": [9, 10], "ncg": 12, "ndarrai": [3, 5, 9, 11, 12], "nearli": 5, "necessari": [9, 12], "need": [5, 8, 9, 11, 12], "neg": [2, 7, 9, 12], "neg_label": [9, 12], "nest": 12, "net": 10, "network": [2, 9, 10, 11, 12], "neural": [2, 9, 11, 12], "neuralclassifiertrain": [5, 9, 10, 12], "neutral": 2, "never": [8, 9], "new": [0, 2, 8, 9, 11], "newelm": [9, 12], "newinvariantratioestim": [9, 12], "newonevsal": [5, 9, 12], "newsvma": [5, 9, 12], "newsvmkld": [5, 9, 12], "newsvmnkld": 5, "newsvmq": [5, 9, 12], "newsvmra": [5, 9, 12], "next": [6, 9, 10, 11], "nfeat": 12, "nfold": [2, 9, 11], "nkld": [0, 4, 5, 9, 10, 12], "nmd": 9, "nn": 10, "nogap": 11, "non": [5, 12], "non_aggreg": 9, "none": [3, 5, 6, 8, 9, 10, 11, 12], "nor": 5, "norm": [5, 9, 12], "normal": [2, 5, 9, 11, 12], "normalize_preval": 9, "normalized_absolute_error": 9, "normalized_match_dist": 9, "normalized_relative_absolute_error": 9, "note": [3, 5, 7, 8, 9, 10, 11, 12], "noth": 12, "notic": 2, "novemb": 10, "now": [5, 7, 8], "nowadai": 5, "np": [3, 5, 6, 7, 8, 9, 11, 12], "npp": [0, 8, 9], "nrae": [0, 9], "nrepeat": [2, 11], "num_prevalence_combin": [8, 9], "num_sampl": 12, "num_vector": 9, "num_warmup": 12, "number": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "numer": [0, 2, 3, 5, 9, 11, 12], "numpi": [6, 8, 9, 10, 12], "nurseri": 2, "o": 9, "o_acc": 12, "obes": 2, "object": [2, 8, 9, 10, 11, 12], "observ": [3, 5, 12], "obtain": [2, 8, 9, 10, 12], "obtaind": 9, "obvious": 9, "occur": [7, 11], "occurr": 11, "octob": [2, 5], "off": [10, 12], "offer": [0, 5], "offici": 11, "often": [3, 12], "omd": [2, 11], "omit": 3, "on_preclassified_inst": 9, "onc": [2, 3, 5, 6, 7, 8, 9, 11], "one": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "ones": [0, 3, 7, 9, 11, 12], "onevsal": [5, 9, 12], "onevsallaggreg": [5, 9, 12], "onevsallgener": [5, 9, 12], "onlabelledcollectionprotocol": [3, 8, 9], "onli": [2, 3, 5, 7, 9, 10, 11, 12], "onto": [9, 12], "oob_decision_funct": 5, "oob_decision_function_": 12, "oob_scor": [5, 12], "open": [0, 2, 9, 11], "open_arg": 9, "oper": 5, "opt": 6, "optim": [3, 4, 6, 9, 10, 12], "optim_minim": [9, 12], "option": [2, 5, 7, 9, 10, 11, 12], "order": [2, 5, 6, 7, 8, 9, 11, 12], "order_bi": 12, "ordin": [5, 12], "org": [2, 11, 12], "orient": [0, 1, 4, 5, 9, 12], "origin": [0, 2, 3, 5, 8, 9, 10, 11, 12], "other": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12], "otherwis": [2, 5, 9, 10, 11, 12], "our": [3, 8], "out": [2, 3, 5, 6, 7, 9, 10, 11, 12], "outcom": 7, "outer": 9, "outlier": 9, "output": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12], "outsid": [5, 12], "over": [5, 6, 9, 12], "overal": 9, "overestim": 7, "overrid": 5, "overridden": [5, 12], "overriden": 5, "overview": [2, 11], "own": [2, 5, 6], "p": [2, 5, 9, 10, 11, 12], "p_": 12, "p_c": 12, "p_i": 9, "p_trn": 12, "p_x": 12, "pablo": 5, "pacc": [5, 7, 9, 12], "packag": [2, 4, 5], "pad": [10, 11], "pad_length": 10, "padding_length": 10, "page": 0, "page_block": 2, "pageblock": 2, "pair": [2, 9], "panda": [3, 9], "paper": [0, 2, 5, 9, 10, 12], "parallel": [5, 6, 9, 10, 11, 12], "parallel_backend": 12, "parallel_unpack": 9, "param": [6, 9, 10, 12], "param_grid": [6, 8, 9, 12], "param_mod_sel": 12, "param_model_sel": 12, "paramet": [2, 3, 5, 6, 8, 9, 10, 11, 12], "parameter": 12, "parent": 9, "parllel": 12, "part": [2, 5, 11], "particular": [2, 5, 12], "particularli": 3, "partit": [2, 9, 10], "pass": [2, 3, 7, 9, 10, 12], "past": 3, "patch": [4, 5, 10, 12], "path": [2, 5, 7, 9, 10, 11, 12], "patienc": [9, 10, 12], "pattern": 5, "pcc": [5, 7, 9, 12], "pd": 3, "pdf": [7, 9, 12], "per": [2, 11], "percentil": 9, "perf": [4, 10, 12], "perform": [0, 2, 3, 5, 6, 7, 8, 9, 10, 12], "perman": 9, "pglez82": 2, "phase": [5, 12], "phish": 2, "phonem": 2, "pick": 6, "pickl": [5, 9, 11, 12], "pickle_path": 9, "pickled_resourc": 9, "pip": [0, 5, 12], "pipelin": [9, 10, 12], "pkdd": [5, 12], "pkl": 9, "place": [9, 11], "plai": 2, "plan": 5, "plankton": [0, 1, 11], "platform": 2, "pleas": [0, 5, 9, 10, 11, 12], "plo": 5, "plot": [0, 1], "plug": 5, "pmlr": 10, "png": 7, "point": [5, 8, 9, 11, 12], "poisson": 12, "poker_hand": 2, "polici": [5, 12], "popular": [0, 3, 8], "portion": 11, "pos_class": [9, 11], "pos_label": [9, 12], "posit": [2, 5, 7, 9, 11, 12], "positive_preval": 9, "possibl": [3, 5, 8, 9, 12], "post": 9, "posterior": [5, 9, 10, 12], "posterior_prob": 12, "postpon": [3, 5], "potter": 2, "power": 9, "pp": [2, 5, 6, 10], "practic": 2, "pre": [2, 5, 9], "pre_classif": 9, "prec": [2, 9], "preced": 11, "precis": [2, 9], "precomput": [2, 3], "predefin": 11, "predict": [0, 3, 5, 7, 9, 10, 12], "predict_on": [5, 12], "predict_proba": [5, 9, 10, 12], "predictor": 3, "prefer": [3, 8, 9, 12], "prefix": 6, "preliminari": 12, "prepar": 9, "prepare_svmperf": [4, 5], "preprint": 5, "preprocess": [2, 5, 9, 12], "preprocessor": 12, "presenc": 8, "present": [2, 5, 11], "preserv": [7, 9, 11], "pretti": 7, "prev": [2, 3, 8, 9, 11], "prevail": 5, "preval": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "prevalence_estim": 9, "prevalence_from_label": 9, "prevalence_from_prob": 9, "prevalence_grid": 9, "prevalence_linspac": 9, "prevel": 12, "previou": 5, "previous": [9, 12], "prevs_hat": [3, 9], "princip": 10, "print": [0, 2, 3, 5, 6, 8, 9, 10, 11], "prior": [0, 3, 5, 6, 7, 8, 9, 12], "priori": 5, "probabilist": [5, 9, 10, 12], "probabilisticadjustedclassifyandcount": [9, 12], "probabilisticclassifyandcount": [9, 12], "probabl": [0, 2, 3, 5, 6, 7, 8, 9, 10, 12], "problem": [2, 5, 7, 9, 11, 12], "problemat": 12, "procedur": [0, 3, 5, 9], "proceed": [0, 2, 5, 11, 12], "process": [3, 5, 6, 9, 11], "processor": 5, "procotol": 3, "produc": [2, 3, 5, 7, 8, 9], "product": [0, 2, 5, 11], "progress": 11, "project": [5, 9, 12], "projection_simplex_sort": [5, 9, 12], "promot": 12, "proper": [5, 12], "properli": [5, 12], "properti": [5, 9, 10, 11, 12], "proport": [5, 9, 10, 11, 12], "propos": [4, 5, 8, 12], "prot": 3, "protocol": [0, 1, 2, 5, 6, 7, 11, 12], "provid": [0, 2, 5, 7, 8, 9, 10, 11, 12], "ptr": [5, 12], "publicli": [2, 11], "pull": 0, "purpos": [2, 8, 12], "put": 12, "py": [2, 5, 8, 11], "python": [0, 2, 11], "pytorch": 12, "p\u00e9rez": [2, 5, 11, 12], "q": [2, 4, 5, 9, 10, 12], "q_": 12, "q_i": 9, "qacc": 10, "qdrop_p": 12, "qf1": 10, "qgm": 10, "qp": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12], "qualiti": 2, "qualnam": 9, "quanet": [0, 10, 12], "quanetmodul": [9, 12], "quanettrain": [9, 12], "quantif": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12], "quantifi": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12], "quantification_error": 9, "quantiti": [5, 9], "quapi": [2, 3, 4, 5, 6, 7, 8], "quapy_data": [2, 9], "quay_data": 11, "que": 9, "question": 9, "quevedo": [2, 5, 11], "quick": 11, "quickli": 5, "quit": 9, "qunfold": [5, 12], "r": [2, 5, 9, 11, 12], "radom_st": 8, "rae": [0, 3, 4, 5, 9], "rais": [5, 9, 10, 12], "raise_error": 9, "raise_except": 9, "rand": 9, "random": [5, 7, 8, 9, 11, 12], "random_se": 9, "random_st": [7, 8, 9, 11, 12], "randomforestclassifi": [5, 12], "randomli": [2, 11], "randomst": 12, "rang": [5, 6, 7, 8, 9, 12], "rank": [5, 9, 10, 12], "rapidli": 8, "rare": 11, "rate": [5, 9, 10, 12], "rather": [5, 6, 12], "ratio": [5, 9, 12], "raw": [2, 9, 11], "rb": 2, "re": [5, 6, 10, 11], "reach": 12, "read": 11, "reader": 9, "readm": [9, 12], "real": [9, 10, 11, 12], "realiz": [9, 12], "reason": [0, 5, 7, 8, 12], "recal": 9, "recalib": [5, 12], "recalibr": 12, "recalibratedprobabilisticclassifi": [9, 10], "recalibratedprobabilisticclassifierbas": [9, 10], "receiv": [2, 5, 7, 9], "recip": 12, "recognit": 5, "recommend": [3, 7, 12], "recomput": 12, "record": 2, "recurr": [2, 5, 11], "recurs": 12, "red": 2, "red_siz": [5, 12], "reduc": [2, 3, 9, 11], "reduce_column": [2, 9, 11], "refer": [2, 10, 11], "refit": [6, 9], "regard": 6, "regardless": 11, "regim": 9, "region": 9, "regist": 12, "regress": [10, 12], "regressor": 5, "regular": 12, "reindex_label": [9, 11], "reiniti": 10, "rel": [3, 5, 9, 11, 12], "relative_absolute_error": 9, "relev": [9, 10, 12], "reli": [5, 8, 9, 12], "reliabl": 5, "remain": 5, "remaind": 12, "remark": 5, "rememb": 7, "remov": [9, 11, 12], "repeat": [7, 8, 9], "repetit": 9, "replac": [2, 5, 9, 11, 12], "replic": [8, 9], "repo": [2, 9, 11], "report": [3, 9, 12], "repositori": [2, 11], "repr_siz": 10, "repres": [5, 7, 9, 11, 12], "represent": [2, 5, 9, 10, 12], "reproduc": [9, 11], "request": [0, 2, 6, 9, 10, 11, 12], "requir": [2, 3, 4, 5, 8, 10, 11, 12], "rescal": 9, "research": [0, 5], "reset_net_param": [9, 10], "resourc": 9, "resp": 12, "respect": [2, 3, 7, 9, 12], "respond": 5, "rest": [9, 10, 11], "result": [0, 2, 3, 4, 5, 7, 9, 12], "retain": [2, 5, 9, 10, 12], "retrain": [6, 10], "retriev": [2, 6], "return": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "return_constrained_dim": 9, "return_typ": [8, 9], "reus": [2, 5, 9, 11], "review": [0, 1, 7, 11], "reviews_sentiment_dataset": [2, 11], "rewrit": 7, "right": [6, 9, 11, 12], "rise": [3, 8], "robustli": 8, "rodr\u00edguez": 12, "rodr\u0131": 5, "role": 2, "roughli": [0, 2], "round": 11, "rout": [5, 9, 10, 12], "routin": [5, 9, 11, 12], "row": [3, 11], "run": [2, 4, 5, 7, 9, 11, 12], "saeren": [5, 12], "said": 5, "same": [2, 5, 6, 7, 8, 9, 11, 12], "sampl": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "sample_from_posterior": [9, 12], "sample_prev": [8, 9], "sample_s": [2, 3, 5, 6, 7, 8, 9, 12], "sample_weight": [10, 12], "sampler": 12, "samples_paramet": 9, "samplesfromdir": 11, "sampling_from_index": [2, 9, 11], "sampling_index": [2, 9, 11], "sander": [2, 11], "saniti": 12, "sanity_check": 9, "satellit": 2, "save": [5, 7, 9, 11], "save_text_fil": 9, "savepath": [7, 9], "scalar": 12, "scale": [5, 9, 10, 12], "scall": 11, "scenario": [0, 3, 5, 6, 7], "schwarz": [5, 12], "scienc": 5, "scikit": [5, 6, 9, 10, 11, 12], "scipi": [9, 11, 12], "score": [2, 5, 6, 9, 10, 11, 12], "scott": 12, "script": [0, 2, 4, 5, 11, 12], "se": [0, 9], "search": [6, 9, 12], "sebastiani": [0, 2, 5, 6, 11, 12], "second": [2, 3, 5, 7, 9, 11, 12], "secondari": 9, "section": [6, 8], "see": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12], "seed": [8, 9, 11, 12], "seem": 5, "seemingli": 7, "seen": [7, 9, 12], "select": [0, 1, 2, 3, 5, 8, 9, 11, 12], "self": [5, 6, 9, 10, 11, 12], "semeion": 2, "semev": 2, "semeval13": [2, 11], "semeval14": [2, 11], "semeval15": [2, 11], "semeval16": [0, 2, 11], "sens": 9, "sentenc": 11, "sentiment": [0, 1, 5, 11], "separ": [9, 11], "sequenc": [8, 9], "seri": [2, 6, 11], "serv": [5, 9, 11], "set": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "set_config": [9, 10, 12], "set_fit_request": [9, 12], "set_opt": 3, "set_param": [5, 9, 10, 12], "set_predict_proba_request": [9, 12], "set_score_request": [9, 10, 12], "setup": 12, "setuptool": 5, "sever": [0, 2, 4, 11], "sh": [4, 5], "shape": [7, 9, 10, 11, 12], "share": [2, 11], "shift": [0, 3, 5, 6, 8, 9, 10, 12], "short": 10, "shorter": 10, "shoud": 5, "should": [0, 2, 5, 6, 7, 9, 10, 11, 12], "show": [2, 5, 6, 7, 8, 9, 10, 11, 12], "show_dens": 9, "show_legend": 9, "show_std": [7, 9], "showcas": 7, "shown": [2, 7, 9], "shrikumar": 10, "shuffl": [10, 11], "shuttl": 2, "side": 9, "sigma": 12, "sign": 9, "signatur": 12, "signific": 8, "significantli": 9, "silent": [9, 12], "silverman": 12, "sim_": 12, "similar": [9, 12], "similarli": 5, "simpl": [2, 5, 7, 9, 12], "simplest": 5, "simplex": [0, 1, 5, 9, 12], "simpli": [3, 4, 5, 6, 7, 9, 12], "simplif": 12, "simplifi": 5, "sinc": [2, 3, 5, 6, 7, 8, 11, 12], "singl": [0, 2, 3, 5, 8, 9, 12], "single_sample_train": [2, 11], "size": [2, 3, 5, 9, 10, 11, 12], "skip": 9, "sklearn": [0, 5, 6, 7, 8, 9, 10, 11, 12], "sld": [5, 9, 12], "sleep": 9, "slice": 9, "slower": 5, "slsqp": 9, "smaller": 3, "smallest": 9, "smm": [5, 9, 12], "smooth": [3, 5, 9, 12], "smooth_limits_epsilon": 9, "so": [2, 5, 7, 8, 9, 10, 11, 12], "social": [2, 5, 11], "soft": [3, 5, 12], "softmax": [5, 9, 12], "solid": 7, "solut": [5, 9, 12], "solv": [5, 6, 9, 12], "solvabl": 5, "solve_adjust": 9, "solve_adjustment_binari": 9, "solver": [5, 9, 12], "solver_opt": 12, "some": [2, 3, 5, 7, 8, 9, 10, 11, 12], "some_arrai": 9, "sometim": 8, "sonar": 2, "sort": 12, "sought": [5, 12], "sourc": [0, 4, 5, 9, 10, 11, 12], "space": [6, 9, 10, 12], "spambas": 2, "spars": [2, 11], "spatial": 12, "speci": 2, "special": [7, 11], "specif": [3, 5, 6, 8, 9, 12], "specifi": [2, 5, 7, 8, 9, 10, 11, 12], "spectf": 2, "spectrum": [7, 8, 9], "speed": [3, 5, 9, 12], "sperduti": [2, 11], "split": [2, 5, 7, 9, 10, 11, 12], "split_random": [9, 11], "split_stratifi": [2, 6, 8, 9, 11], "splitstratifi": [9, 11], "spmatrix": 11, "sqrt": [9, 12], "squar": [5, 9, 12], "sst": [2, 11], "stabil": [3, 12], "stabl": 11, "stackexchang": 9, "stand": [5, 9, 12], "standard": [2, 5, 7, 8, 9, 10, 11, 12], "star": 9, "start": [5, 6, 9], "start_msg": 9, "stat": [9, 11], "state": [9, 12], "static": [5, 12], "statist": [2, 8, 9, 12], "stats_siz": 12, "statu": 9, "std": [10, 11], "std_constrained_linear_l": [9, 12], "stdout": 9, "step": [5, 7, 9, 12], "stern": 5, "stochast": 8, "stop": [9, 10, 12], "store": [2, 10, 11, 12], "str": [2, 9, 10, 11, 12], "straightforward": 3, "strategi": [5, 6, 9], "stratif": [11, 12], "stratifi": [2, 5, 10, 11, 12], "strength": 12, "strictli": [9, 12], "stride": 10, "string": [3, 9, 11, 12], "strongli": [6, 7], "strprev": [2, 3, 9], "structur": [0, 5, 12], "studi": [2, 5, 11], "style": 11, "sub": [9, 10, 12], "subclass": [11, 12], "subdir": 9, "subinterv": 7, "subject": 8, "sublinear_tf": 11, "submit": 2, "subobject": 12, "suboptim": 6, "subsequ": 11, "subtract": [2, 9, 11], "subtyp": 11, "success": [2, 9], "suffic": 7, "suggest": 5, "suit": 11, "suitabl": 5, "sum": [5, 9, 12], "sum_": [9, 12], "summar": 2, "supervis": [0, 6], "support": [0, 5, 9, 11, 12], "surfac": 11, "surpass": 11, "surrog": 6, "svm": [4, 5, 7, 10, 11, 12], "svm_perf_classifi": 10, "svm_perf_learn": 10, "svm_perf_quantif": [4, 5], "svmperf": [4, 5, 9, 12], "svmperf_bas": [10, 12], "svmperf_hom": [5, 12], "svmq": 5, "sweep": [5, 12], "system": [3, 5, 6, 9, 12], "t": [2, 3, 9, 10, 12], "t1a": [2, 11], "t1b": [2, 11], "t2a": [2, 11], "t2b": [2, 11], "t50": [5, 9, 12], "tab10": 9, "tackl": [2, 5], "tail": 9, "tail_density_threshold": 9, "take": [2, 5, 7, 8, 9, 11, 12], "taken": [5, 9, 10, 11, 12], "target": [0, 1, 5, 7, 9, 10, 12], "task": [0, 2, 5, 6, 11], "tau": 12, "te": 11, "technic": 8, "temp": 12, "temp_se": 9, "temperatur": [5, 10, 12], "tempor": [9, 10], "tend": [2, 7], "tendenc": 7, "tensor": 10, "term": [2, 5, 6, 7, 9, 10, 11, 12], "ternari": [9, 12], "ternary_search": 9, "test": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "test_gen": [2, 11], "test_gener": 2, "test_path": [2, 11], "test_split": 11, "text": [2, 5, 9, 10, 11, 12], "text2tfidf": [2, 5, 9, 11], "textclassifiernet": [9, 10], "textual": [0, 2, 11], "tf": [2, 11], "tfidf": [2, 6, 7, 8, 11], "tfidfvector": 11, "th": 12, "than": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "thank": 5, "thei": [2, 5, 9, 12], "them": [2, 5, 11, 12], "theoret": 6, "thereaft": 3, "therefor": 9, "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "thing": [5, 8], "third": [3, 7], "thorsten": 10, "those": [0, 3, 5, 6, 7, 9, 10, 12], "though": [5, 9], "three": [2, 5, 7], "threshold": [9, 12], "thresholdoptim": [9, 12], "through": [0, 2, 5, 9, 12], "thu": [2, 3, 5, 6, 7, 9, 10, 12], "tictacto": 2, "tikhonov": 12, "tikhonovregular": [5, 9, 12], "time": [2, 3, 5, 8, 9, 11, 12], "timeout": 9, "timeouterror": 9, "timer": 9, "titl": [0, 9], "tmp": 10, "tn": 9, "togeth": [11, 12], "token": [2, 10, 11], "tol": 12, "toler": [9, 12], "too": 5, "took": 6, "tool": [0, 3], "top": [5, 9, 12], "topso": [9, 12], "topsoedist": 9, "torch": [5, 10, 12], "torchdataset": [9, 10], "total": [2, 8, 9], "toward": [7, 11, 12], "tp": 9, "tpr": [9, 12], "tr": 11, "tr_iter_per_poch": 12, "tr_prev": [7, 9, 12], "track": 9, "trade": [10, 12], "tradition": 3, "train": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "train_path": [2, 11], "train_prev": [7, 9], "train_prop": [6, 8, 11], "train_sampl": 7, "train_siz": 11, "train_test": [2, 5, 6, 7, 8, 9, 11], "trainer": 10, "training_preval": 7, "training_s": 7, "transact": 5, "transfer": 12, "transform": [2, 9, 10, 11, 12], "transformer__classifier__estimator__criterion": 12, "transfus": 2, "tri": [2, 9, 12], "trial": 12, "trick": 12, "trivial": 5, "true": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "true_prev": [3, 7, 9], "true_preval": 0, "truncatedsvd": 10, "trust": 12, "truth": 12, "try": [6, 12], "tscalibr": [9, 10], "ttest_alpha": 9, "tupl": [8, 9, 11, 12], "tweet": [0, 2, 5, 11], "twice": 12, "twitter": [0, 1, 11], "twitter_sentiment_datasets_test": [2, 11], "twitter_sentiment_datasets_train": [2, 11], "two": [2, 5, 7, 8, 9, 11, 12], "txt": 9, "type": [2, 5, 9, 10, 11, 12], "typic": [3, 5, 6, 7, 8, 9, 10, 11, 12], "u": [3, 12], "u1": 11, "uci": [0, 1, 11], "uci_dataset": 11, "uci_multiclass_dataset": 11, "ucimlrepo": 11, "ueda": 9, "unabl": 2, "unadjust": [5, 7, 9], "unadjusted_count": 9, "unalt": 10, "unbias": 7, "uncertainti": [5, 12], "unchang": [9, 10, 12], "unconstrain": 12, "under": [3, 5, 8, 9, 12], "underestim": 7, "underli": [5, 6, 12], "underlin": 9, "understand": 9, "undertaken": 9, "unfold": 12, "unfortun": 7, "unifi": [2, 12], "uniform": [0, 1, 9, 11, 12], "uniform_preval": 9, "uniform_prevalence_sampl": 9, "uniform_sampl": [9, 11], "uniform_sampling_index": [9, 11], "uniform_simplex_sampl": 9, "uniformli": [8, 9], "uniformprevalenceprotocol": 9, "union": 11, "uniqu": 11, "unit": [0, 1, 2, 9, 12], "unit_scal": 12, "unk": 11, "unknown": 11, "unlabel": 12, "unlik": [3, 9], "unlimit": 5, "unnormalized_arr": 9, "until": 12, "untouch": 9, "unus": [5, 9, 10], "up": [3, 5, 9, 10, 12], "updat": [9, 10, 12], "upgrad": 5, "upp": [0, 1, 9], "url": 9, "us": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "usag": 8, "user": [2, 7, 8, 9, 10, 12], "utf": 11, "util": [10, 11, 12], "v": [5, 9, 10, 12], "v0": [0, 8], "v1": 2, "va_iter_per_poch": 12, "val": [2, 8, 10, 11], "val_app": 8, "val_gen": [2, 11], "val_gener": 2, "val_split": [5, 9, 10, 12], "val_split_": [9, 12], "valid": [2, 5, 6, 7, 8, 9, 10, 11, 12], "valid_loss": [5, 9, 10, 12], "valid_polici": [9, 12], "valu": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12], "valueerror": 9, "vari": [3, 5, 8], "variabl": [3, 5, 7, 9, 11], "varianc": [2, 7], "variant": [0, 7, 9, 12], "variat": 5, "varieti": 6, "variou": 7, "vaz": [5, 9, 12], "vector": [2, 5, 8, 9, 10, 11, 12], "vectorizer_kwarg": 12, "verbos": [2, 6, 9, 10, 11, 12], "veri": [0, 2, 5, 7, 9], "verifi": 9, "versatil": 0, "version": [4, 9, 10, 12], "versu": 5, "vertic": 9, "vertical_xtick": 9, "via": [5, 8, 9, 10, 12], "view": 7, "visibl": 12, "visual": [0, 3, 7], "vline": 9, "vocab_s": 10, "vocabulari": [10, 11], "vocabulary_s": [5, 9, 10, 11, 12], "vscalibr": [9, 10], "w": [2, 5, 11], "wa": [2, 5, 7, 8, 9, 11, 12], "wai": [5, 8, 12], "wait": 10, "want": [0, 5, 9], "warmup": 12, "warn": [9, 12], "water": [0, 2], "waveform": 2, "wb": [2, 11], "wdbc": 2, "we": [0, 2, 3, 5, 6, 7, 8, 11, 12], "weak": 5, "weight": [5, 10, 11, 12], "weight_decai": 10, "well": [2, 5, 7, 12], "were": [2, 9], "what": 5, "whcih": 11, "wheel": 5, "when": [2, 3, 5, 7, 8, 9, 10, 11, 12], "whenev": [7, 9], "where": [5, 7, 9, 10, 11, 12], "wherebi": 6, "whether": [9, 10, 11, 12], "which": [2, 3, 5, 6, 7, 9, 10, 11, 12], "while": [2, 5, 7, 10, 11, 12], "white": 2, "whoi": [2, 11], "whole": [2, 5, 6, 9, 10], "whose": [11, 12], "why": 5, "wide": [3, 7, 8], "widetild": 12, "wine": 2, "wise": 12, "within": [9, 12], "without": [5, 9], "word": [0, 3, 5, 9, 10, 11, 12], "work": [5, 7, 8, 9, 10, 11, 12], "worker": [9, 10, 11, 12], "workflow": 0, "workshop": [5, 12], "wors": [7, 9], "worst": 9, "would": [0, 2, 3, 5, 7, 11, 12], "wrap": 12, "wrapper": [9, 10, 11, 12], "written": 0, "x": [3, 5, 7, 9, 10, 11, 12], "x2": 11, "x_1": 12, "x_2": 12, "x_error": 9, "x_i": 12, "x_t": 12, "xavier": 10, "xavier_uniform": [9, 10], "xp": [9, 11], "xy": [9, 11], "y": [7, 9, 10, 11, 12], "y_": 12, "y_error": 9, "y_i": 9, "y_j": 9, "y_pred": 9, "y_true": 9, "year": 0, "yeast": [2, 11], "yet": [8, 9], "yi": 12, "yield": [7, 8, 9, 11, 12], "yj": 12, "you": [0, 2, 5, 9, 10, 12], "your": [0, 2, 5], "z": [2, 11], "z_": 9, "zenodo": [2, 11], "zero": [2, 9], "ziegler": 5, "zip": [7, 9]}, "titles": ["Quickstart", "Manuals", "<span class=\"section-number\">1. </span>Datasets", "<span class=\"section-number\">2. </span>Evaluation", "<span class=\"section-number\">3. </span>Explicit Loss Minimization", "<span class=\"section-number\">4. </span>Quantification Methods", "<span class=\"section-number\">5. </span>Model Selection", "<span class=\"section-number\">6. </span>Plotting", "<span class=\"section-number\">7. </span>Protocols", "quapy package", "quapy.classification package", "quapy.data package", "quapy.method package"], "titleterms": {"1": 5, "2022": 2, "9": 5, "The": 5, "acknowledg": 0, "ad": 2, "aggreg": [5, 12], "artifici": 8, "base": [11, 12], "basic": 5, "bayesiancc": 5, "bia": 7, "binari": 2, "calibr": 10, "cite": 0, "classif": [6, 10], "classifi": 5, "compos": [5, 12], "content": [9, 10, 11, 12], "contribut": 0, "count": 5, "custom": 2, "data": [2, 11], "dataset": [2, 11], "densiti": 5, "diagon": 7, "distanc": 5, "drift": 7, "emq": 5, "ensembl": 5, "error": [3, 7, 9], "estim": 5, "evalu": [3, 9], "expect": 5, "explicit": [4, 5], "featur": [0, 5], "from": 8, "function": [5, 9], "hdy": 5, "helling": 5, "ifcb": 2, "instal": [0, 5], "kdei": 5, "kernel": 5, "learn": 2, "lequa": 2, "loss": [4, 5, 6], "machin": 2, "manual": [0, 1], "maxim": 5, "measur": 3, "meta": [5, 12], "method": [5, 10, 12], "minim": [4, 5], "model": [5, 6], "model_select": 9, "modul": [9, 10, 11, 12], "multiclass": 2, "natur": 8, "network": 5, "neural": [5, 10], "new": 5, "non_aggreg": 12, "note": 2, "optim": 5, "orient": 6, "other": 8, "packag": [9, 10, 11, 12], "plankton": 2, "plot": [7, 9], "preprocess": 11, "preval": 8, "process": 2, "protocol": [3, 8, 9], "quanet": 5, "quantif": [5, 6, 7], "quapi": [0, 9, 10, 11, 12], "quickstart": 0, "reader": 11, "regular": 5, "review": 2, "sampl": 8, "select": 6, "sentiment": 2, "simplex": 8, "submodul": [9, 10, 11, 12], "subpackag": 9, "svmperf": 10, "target": 6, "threshold": 5, "transform": 5, "twitter": 2, "uci": 2, "uniform": 8, "unit": 8, "upp": 8, "usag": 0, "util": 9, "v0": 5, "variant": 5, "y": 5}})